
asadmin Utility Subcommands                     create-jmsdest(1)

NAME
     create-jmsdest - creates a JMS physical destination

SYNOPSIS
     create-jmsdest [--help]
     [--target target]
     --desttype dest_type [--property (name=value)[:name=value]*]
     dest_name

DESCRIPTION
     The create-jmsdest subcommand creates a Java Message Service
     (JMS)  physical  destination. Typically, you use the create-
     jms-resource subcommand to create a JMS destination resource
     that  has a Name property that specifies the physical desti-
     nation. The physical destination  is  created  automatically
     when  you  run  an  application  that  uses  the destination
     resource. Use the create-jmsdest subcommand if you  want  to
     create a physical destination with non-default property set-
     tings.

     This subcommand is supported in remote mode only.

OPTIONS
     --help
     -?

         Displays the help text for the subcommand.

     --target
         Do not specify this option. This option is retained  for
         compatibility  with  other releases. If you specify this
         option, a syntax error does not occur. Instead, the sub-
         command  runs  successfully  and  the option is silently
         ignored.

     --desttype
     -T

         The type of the JMS destination. Valid values are  topic
         and queue.

     --property
         Optional attribute name/value pairs for configuring  the
         physical destination. You can specify the following pro-
         perties for a physical destination.

Java EE 6           Last change: 22 Sep 2009                    1

asadmin Utility Subcommands                     create-jmsdest(1)

         maxNumMsgs

             The maximum number of unconsumed messages  permitted
             for the destination. A value of -1 denotes an unlim-
             ited number of messages. The default  value  is  -1.
             For  the  dead  message  queue, the default value is
             1000.

             If   the   limitBehavior   property   is   set    to
             FLOW_CONTROL,  it is possible for the specified mes-
             sage limit to be exceeded because the broker  cannot
             react  quickly  enough  to stop the flow of incoming
             messages. In such cases,  the  value  specified  for
             maxNumMsgs  serves  as  merely a hint for the broker
             rather than a strictly enforced limit.

         maxBytesPerMsg
             The maximum size, in bytes, of any  single  message.
             Rejection of a persistent message is reported to the
             producing client with an exception; no  notification
             is sent for non-persistent messages.

             The value may be expressed in bytes,  kilobytes,  or
             megabytes, using the following suffixes:

             b    Bytes

             k    Kilobytes (1024 bytes)

             m    Megabytes (1024 x 1024 = 1,048,576 bytes)

             A value with no suffix  is  expressed  in  bytes;  a
             value  of  -1 denotes an unlimited message size. The
             default value is -1.

         maxTotalMsgBytes

             The maximum total memory, in bytes,  for  unconsumed
             messages. The default value is -1. The syntax is the
             same as for maxBytesPerMsg.  For  the  dead  message
             queue, the default value is 10m.

         limitBehavior
             The behavior of the MQ broker when the  memory-limit
             threshold is reached. Valid values are as follows.

Java EE 6           Last change: 22 Sep 2009                    2

asadmin Utility Subcommands                     create-jmsdest(1)

             REJECT_NEWEST          Reject  newest  messages  and
                                    notify  the  producing client
                                    with an exception only if the
                                    message  is  persistent. This
                                    is the default value.

             FLOW_CONTROL           Slow the rate at  which  mes-
                                    sage producers send messages.

             REMOVE_OLDEST          Throw  out  the  oldest  mes-
                                    sages.

             REMOVE_LOW_PRIORITY    Throw out the lowest-priority
                                    messages  according  to  age,
                                    with no notification  to  the
                                    producing client.

             If the value is REMOVE_OLDEST or REMOVE_LOW_PRIORITY
             and  the useDMQ property is set to true, excess mes-
             sages are moved to the dead message queue.  For  the
             dead   message   queue  itself,  the  default  limit
             behavior is REMOVE_OLDEST, and the value  cannot  be
             set to FLOW_CONTROL.

         maxNumProducers

             The maximum number of message producers for the des-
             tination. When this limit is reached, no new produc-
             ers can be created. A value of -1 denotes an  unlim-
             ited  number of producers. The default value is 100.
             This property does not apply  to  the  dead  message
             queue.

         consumerFlowLimit
             The maximum number of messages that can be delivered
             to  a  consumer  in  a  single  batch. A value of -1
             denotes an unlimited number of messages. The default
             value  is 1000. The client runtime can override this
             limit by specifying a lower value on the  connection
             factory object.

             In load-balanced queue delivery, this is the initial
             number of queued messages routed to active consumers
             before load balancing begins.

Java EE 6           Last change: 22 Sep 2009                    3

asadmin Utility Subcommands                     create-jmsdest(1)

         useDMQ

             If set to true, dead messages go to the dead message
             queue. If set to false, dead messages are discarded.
             The default value is true.

         validateXMLSchemaEnabled
             If set to true, XML schema validation is enabled for
             the destination. The default value is false.

             When XML validation is enabled,  the  Message  Queue
             client  runtime will attempt to validate an XML mes-
             sage against the specified XSDs (or against the DTD,
             if  no  XSD  is  specified) before sending it to the
             broker. If the specified schema cannot be located or
             the  message cannot be validated, the message is not
             sent, and an exception is thrown.

             This property should be set when  a  destination  is
             inactive:  that is, when it has no consumers or pro-
             ducers and when there are no messages in the  desti-
             nation. Otherwise the producer must reconnect.

         XMLSchemaURIList

             A space-separated list of XML schema document  (XSD)
             URI  strings.  The URIs point to the location of one
             or more XSDs to use for XML  schema  validation,  if
             validateXMLSchemaEnabled is set to true. The default
             value is null.

             Use double quotes around this value if multiple URIs
             are specified, as in the following example:

               "http://foo/flap.xsd http://test.com/test.xsd"

             If this property is not set or null and XML  valida-
             tion is enabled, XML validation is performed using a
             DTD specified in the XML  document.  If  an  XSD  is
             changed as a result of changing application require-
             ments, all client applications that produce XML mes-
             sages based on the changed XSD must reconnect to the
             broker.

         To modify the value of these properties, you can use the
         as-install/mq/bin/imqcmd command. See Chapter 18, Physi-
         cal Destination Property  Reference,  in  Sun  GlassFish
         Message Queue 4.4 Administration Guide for more informa-
         tion.

Java EE 6           Last change: 22 Sep 2009                    4

asadmin Utility Subcommands                     create-jmsdest(1)

OPERANDS
     dest_name

         A unique  identifier  for  the  JMS  destination  to  be
         created.

EXAMPLES
     Example 1 Creating a JMS physical destination

     The following subcommand creates a JMS physical queue  named
     PhysicalQueue with non-default property values.

       asadmin> create-jmsdest --desttype queue
       --property maxNumMsgs=1000:maxBytesPerMsg=5k PhysicalQueue
       Command create-jmsdest executed successfully.

EXIT STATUS
     0                           subcommand executed successfully

     1                           error in executing  the  subcom-
                                 mand

SEE ALSO
     create-jms-resource(1), delete-jmsdest(1),  list-jmsdest(1),
     flush-jmsdest(1)

     asadmin(1M)

Java EE 6           Last change: 22 Sep 2009                    5

