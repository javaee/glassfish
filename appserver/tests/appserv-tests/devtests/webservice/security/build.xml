<?xml version="1.0" encoding="ISO-8859-1"?>

<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 2017 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://oss.oracle.com/licenses/CDDL+GPL-1.1
    or LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->
<!DOCTYPE project [
<!ENTITY commonSetup SYSTEM "file:../../../config/properties.xml">
<!ENTITY commonBuild SYSTEM "file:../../../config/common.xml">
<!ENTITY reporting   SYSTEM "file:../report.xml">
]>

<project name="webservice_security" default="usage" basedir=".">

    &commonSetup;
    &commonBuild;
    &reporting;
    
    <target name="check-nss" depends="init-common">
        <!--
          Determine if we need to use the certutil or the keytool command to
          access the certificate truststore
        -->
        <property name="nss.db.dir" location="${admin.domain.dir}/${admin.domain}/config"/>
        <condition property="use.certutil">
            <and>
                <or>
                    <available file="${env.S1AS_HOME}/lib/certutil"/>
                    <available file="${env.S1AS_HOME}/lib/certutil.exe"/>
                </or>
                <available file="${nss.db.dir}/cert8.db"/>
                <available file="${nss.db.dir}/key3.db"/>
                <available file="${nss.db.dir}/secmod.db"/>
            </and>
        </condition>
    </target>
    
    
    <target name="setup" depends="init-common, check-nss">
        <echo message="Creating the valid certificate in kestore.jks"/>
        <exec executable="${java.home}/bin/keytool" failonerror="false">
            <arg value="-genkey"/>
            <arg value="-alias"/>
            <arg value="s1astester"/>
            <arg value="-keypass"/>
            <arg value="${ssl.password}"/>
            <arg value="-keystore"/>
            <arg value="keystore.jks"/>
            <arg value="-storepass"/>
            <arg value="${ssl.password}"/>
            <arg value="-dname"/>
            <arg value="cn=Duke Smith, ou=Purchasing, o=BlueSoft, c=US"/>
        </exec>
        <echo message="Creating the invalid certificate in invalid_kestore.jks"/>
        <exec executable="${java.home}/bin/keytool" failonerror="false">
            <arg value="-genkey"/>
            <arg value="-alias"/>
            <arg value="s1astester"/>
            <arg value="-keypass"/>
            <arg value="${ssl.password}"/>
            <arg value="-keystore"/>
            <arg value="invalid_keystore.jks"/>
            <arg value="-storepass"/>
            <arg value="${ssl.password}"/>
            <arg value="-dname"/>
            <arg value="cn=Unknown Duke, ou=Prog, o=HackSoft, c=US"/>
        </exec>           
        <antcall target="setup-pe"/>
        <antcall target="setup-ee"/>
    </target>
    
    
    <target name="setup-pe" depends="init-common" unless="use.certutil">
        <echo message="Exporting appserver public key from ${admin.domain}"/>
        <exec executable="${java.home}/bin/keytool" failonerror="true">
            <arg line="-export -alias s1as -keystore ${env.S1AS_HOME}/domains/${admin.domain}/config/keystore.jks -storepass ${ssl.password} -file appserver.cer"/>
        </exec>
        <echo message="Importing the Appserver certificate"/>
        <exec executable="${java.home}/bin/keytool" failonerror="true">
            <arg line="-import -noprompt -alias s1as -keystore cacerts.jks -storepass ${ssl.password} -file appserver.cer"/>
        </exec>
        <echo message="Extracting tester public key"/>
        <exec executable="${java.home}/bin/keytool" failonerror="true">
            <arg line="-export -alias s1astester -keystore keystore.jks -storepass ${ssl.password} -file client.cer"/>
        </exec>        
        <echo message="Importing tester public key in appserver trusted certificates"/>
        <exec executable="${java.home}/bin/keytool" failonerror="true">
            <arg line="-import -noprompt -alias s1astester -keystore ${env.S1AS_HOME}/domains/${admin.domain}/config/cacerts.jks -storepass ${ssl.password} -file client.cer"/>
        </exec>
        <antcall target="restart-pe-server"/>
    </target>
    
    <target name="setup-ee" depends="init-common" if="use.certutil">
        <echo message="Exporting appserver public key from ${admin.domain}"/>
        <exec executable ="${env.S1AS_HOME}/lib/certutil" failonerror="true">
            <env key="LD_LIBRARY_PATH" path="${env.S1AS_HOME}/lib"/>
            <arg line="-L -n s1as -d ${env.S1AS_HOME}/domains/${admin.domain}/config -a -o appserver.cer"/>            
        </exec>        

        <echo message="Importing the Appserver certificate on the client keystore"/>
        <exec executable="${java.home}/bin/keytool" failonerror="true">
            <arg line="-import -noprompt -alias s1as -keystore cacerts.jks -storepass ${ssl.password} -file appserver.cer"/>
        </exec>
        <echo message="Extracting tester public key"/>
        <exec executable="${java.home}/bin/keytool" failonerror="true">
            <arg line="-export -rfc -alias s1astester -keystore keystore.jks -storepass ${ssl.password} -file client.cer"/>
        </exec>        
        <echo message="Importing tester public key in appserver trusted certificates"/>
        <exec executable ="${env.S1AS_HOME}/lib/certutil" failonerror="true">
            <env key="LD_LIBRARY_PATH" path="${env.S1AS_HOME}/lib"/>
            <arg line="-A -a -n s1astester -t CTP,CTP,CTP -d ${env.S1AS_HOME}/domains/${admin.domain}/config -i client.cer"/>
        </exec>
        <antcall target="restart-ee-server"/>
    </target>
        
    <target name="restart-pe-server">
        <echo message="Restarting PE server..."/>
        <exec executable="${ASADMIN}" failonerror="false">
            <arg line="stop-domain"/>
        </exec>
        <exec executable="${ASADMIN}" failonerror="true">
            <arg line="start-domain"/>
        </exec>
    </target>

    <target name="restart-ee-server">
        <echo message="Restarting EE server..."/>
        <exec executable="${ASADMIN}" failonerror="false">
            <arg line="stop-domain"/>
        </exec>
        <exec executable="${ASADMIN}" failonerror="true">
            <arg line="start-domain --user ${admin.user} --passwordfile ${admin.password.file}"/>
        </exec>
    </target>

    <target name="unsetup" depends="init-common, check-nss">
        <delete file="cacerts.jks"/>
        <delete file="invalid_keystore.jks"/>
        <delete file="keystore.jks"/>
        <delete file="appserver.cer"/>
        <delete file="client.cer"/>        
        <antcall target="unsetup-pe"/>
        <antcall target="unsetup-ee"/>
    </target>
    
        
    <target name="unsetup-pe" depends="init-common" unless="use.certutil">
        <echo message="Removing tester public key from appserver trusted certificates"/>
        <exec executable="${java.home}/bin/keytool" failonerror="true">
            <arg line="-delete -alias s1astester -keystore ${env.S1AS_HOME}/domains/${admin.domain}/config/cacerts.jks -storepass ${ssl.password}"/>
        </exec>        
        <antcall target="restart-pe-server"/>
    </target>        
    
    <target name="unsetup-ee" depends="init-common" if="use.certutil">
        <echo message="Removing tester public key from appserver trusted certificates"/>
        <exec executable ="${env.S1AS_HOME}/lib/certutil" failonerror="true">
            <env key="LD_LIBRARY_PATH" path="${env.S1AS_HOME}/lib"/>
            <arg line="-D -n s1astester -d ${env.S1AS_HOME}/domains/${admin.domain}/config"/>
        </exec>
        <antcall target="restart-ee-server"/>
    </target>      

    <target name="all">
        <antcall target="setup"/>
        <ant dir="ejb_ssl_cacert" target="all"/>
        <ant dir="ejb3_ssl_cacert" target="all"/>        
        <antcall target="unsetup"/>
    </target>
    <target name="clean">
        <delete>
            <fileset dir="${basedir}" 
                     includes="**.output, count.txt"/>
        </delete>
        <ant dir="ejb_ssl_cacert" target="clean"/>
     </target>

    <target name="usage">
	<echo>
		Usage:
			ant all (Executes all the webservice security tests)

			ant ejb_ssl_cacert (Executes the client certificate ejb ssl endpoint test)
	</echo>
    </target>
</project>
