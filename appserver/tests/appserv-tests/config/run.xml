<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 2017 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://oss.oracle.com/licenses/CDDL+GPL-1.1
    or LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<property name="target-to-run" value="sqetests"/>

<target name="runtest" depends="init-common">
    <record name="runtest.output" action="start" />
    <parallel>
<!--
        <antcall target="startAS"/>
-->
        <sequential>
            <waitfor maxwait="5" maxwaitunit="minute" checkevery="500">
                <or>
                    <http url="http://localhost:80"/>
                    <http url="http://localhost:1024"/>
                    <http url="http://${http.host}:${http.port}"/>
                </or>
            </waitfor>
            <antcall target="${target-to-run}"/>
	    <antcall target="report"/>
	    <antcall target="mail"/>
<!--
	    <antcall target="stopAS"/>
-->
        </sequential>
    </parallel>
    <record name="runtest.output" action="stop" />
</target>

<!-- Setup and Restart the server instance-->
<target name="restart-server-instance-common">
    <antcall target="stopDomain"/>
    <sleep seconds="5" />
    <antcall target="startDomain"/>
</target>

<target name="startDomain" depends="startDomainUnix, startDomainWindows"/>

<target name="startDomainUnix" depends="init-common, attach-jacoco-agent" if="isUnix">
    <echo message="Starting DAS "/>
    <if>
        <istrue value="${coverage.code}" />
        <then>
            <echo message="Starting Code coverage with jvm arg :- ${jacocojvmarg}" />
        </then>
    </if>
    <exec executable="${ASADMIN}">
        <arg line="start-domain"/>
    </exec>
    <echo message="run.xml:doing wait for ${http.host}:${http.port}..."/>
    <waitfor timeoutproperty="unableToStart">
      <http url="http://${http.host}:${http.port}"/>
    </waitfor>
    <condition property="dumpStack">
        <and>
            <isset property="unableToStart"/>
            <available file="${env.JAVA_HOME}/bin/jps"/>
        </and>
    </condition>
    <echo message="run.xml:DONE doing wait for ${http.host}:${http.port}..."/>
    <antcall target="dumpThreadStack"/>
</target>

<target name="startDomainWindows" depends="init-common, attach-jacoco-agent" if="isWindows">
    <echo message="Starting DAS"/>
    <exec executable="${ASADMIN}" spawn="true">
        <arg line="start-domain"/>
    </exec>
    <waitfor timeoutproperty="unableToStart">
      <http url="http://${http.host}:${http.port}"/>
    </waitfor>
    <condition property="dumpStack">
        <and>
            <isset property="unableToStart"/>
            <available file="${env.JAVA_HOME}/bin/jps"/>
        </and>
    </condition>
    <antcall target="dumpThreadStack"/>
</target>

<target name="dumpThreadStack" if="dumpStack">
    <exec executable="${env.JAVA_HOME}/bin/jps" output="pid.out.file">
       <arg value="-v"/>
    </exec>
    <loadfile srcfile="pid.out.file" property="pid.out">
        <filterchain>
            <linecontains>
              <contains value="ASMain"/>
	      <contains value="${env.S1AS_HOME}"/>
            </linecontains>
            <tokenfilter>
                <replaceregex pattern="^(\d+) ASMain (.*)" replace="\1"/>
                <trim/>
                <ignoreblank/>
            </tokenfilter>
            <striplinebreaks/>
        </filterchain>
    </loadfile>
    <echo>Dumping the thread stack for Appserver instance with PID - "${pid.out}"</echo>
    <exec executable="${env.JAVA_HOME}/bin/jstack">
        <arg value="${pid.out}"/>
    </exec>
    <delete file="pid.out.file"/>
</target>

<target name="stopDomain" depends="init-common, de-attach-jacoco-agent">
    <echo message="run.xml:stopping domain..."/>
    <exec executable="${ASADMIN}" failonerror="true">
        <arg line="stop-domain"/>
    </exec>
</target>

<target name="delete-domain-common" depends="init-common">
    <exec executable="${ASADMIN}">
        <arg line="delete-domain"/>
        <arg line="--domaindir ${admin.domain.dir}"/>
        <arg line="${admin.domain}"/>
    </exec>
</target>

<target name="create-domain-common" depends="init-common">
    <exec executable="${ASADMIN}">
        <arg line="create-domain"/>
        <arg line="--domaindir ${admin.domain.dir}"/>
        <arg line="--adminport ${admin.port}"/>
        <arg line="--instanceport ${http.port}"/>
        <arg line="--user ${admin.user}"/>
        <arg line="--passwordfile ${admin.password.file}"/>
        <arg line="--domainproperties orb.listener.port=${orb.port}" />
        <arg line="${admin.domain}"/>
    </exec>
</target>

<target name="cleanAS">
    <echo message="run.xml:deleting domain: ${admin.domain}..."/>
    <antcall target="delete-domain-common"/>
    <echo message="run.xml:creating domain: ${admin.domain}..."/>
    <antcall target="create-domain-common"/>
</target>

<target name="start-clean-server">
    <antcall target="stopDomain"/>
    <antcall target="cleanAS"/>
    <antcall target="startDomain"/>
</target>


<target name="restart-instance-common">
<echo message="Restarting remote server instance,until this gets fixed"/>
	<exec executable="${ASADMIN}" failonerror="false">
	<arg line="stop-instance"/>
	<arg line="${as.props}"/>
	<arg line="${appserver.instance.name}"/>
</exec>

<sleep seconds="30"/>
	<exec executable="${ASADMIN}" failonerror="false">
	<arg line="start-instance"/>
	<arg line="${as.props}"/>
	<arg line="${appserver.instance.name}"/>
</exec>

</target>

<target name="jacoco-prerequisite" >
    <get src="http://central.maven.org/maven2/org/apache/maven/maven-ant-tasks/2.1.3/maven-ant-tasks-2.1.3.jar"
     dest="/tmp/maven-ant-tasks-2.1.3.jar"
     usetimestamp="true" />
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml"
         uri="antlib:org.apache.maven.artifact.ant">
        <classpath location="/tmp/maven-ant-tasks-2.1.3.jar" />
    </typedef>

    <!--   download ant-contrib and jacoco-ant jar  -->
    <property name="jacoco.ft.execution.data.file" value="${basedir}/target/coverage-reports/jacoco-ft.exec" />
    <property name="jacocoantjar.loc" value="/tmp/jacoco-dependencies/" />

    <artifact:dependencies pathId="dependency.classpath" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
        <dependency groupId="org.jacoco" artifactId="org.jacoco.ant" version="0.7.9" scope="test"/>
        <dependency groupId="ant-contrib" artifactId="ant-contrib" version="1.0b3" scope="test" />
    </artifact:dependencies>

    <!-- include jacoco-jar in classpath -->
    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
        <classpath refid="dependency.classpath" />
    </taskdef>
    <!-- include ant-contrib in classpath -->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath refid="dependency.classpath" />
    </taskdef>
</target>

<target name="get-jacoco-jvm-arg" depends="jacoco-prerequisite">
<if>
    <istrue value="${coverage.code}" />
    <then>
        <jacoco:agent property="jacocojvmarg" destfile="${jacoco.ft.execution.data.file}" classdumpdir="${basedir}/target/jacoco-classes/"
                  xmlns:jacoco="antlib:org.jacoco.ant"/>
    </then>
    <else>
        <property name="jacocojvmarg" value=" "/>
    </else>
</if>
</target>

<target name="attach-jacoco-agent" depends="jacoco-prerequisite">
<if>
    <istrue value="${coverage.code}" />
    <then>
         <jacoco:agent property="jacocojvmarg" destfile="${jacoco.ft.execution.data.file}" classdumpdir="${basedir}/target/jacoco-classes/"
                      xmlns:jacoco="antlib:org.jacoco.ant"/>
         <copy todir="${env.S1AS_HOME}/domains/domain1/lib/ext/" >
            <fileset dir="${org.jacoco:org.jacoco.ant:jar}/../" includes="**/*.jar"/>
         </copy>
         <copy file="${env.S1AS_HOME}/domains/domain1/config/domain.xml"
              tofile="${env.S1AS_HOME}/domains/domain1/config/domain.bak"
              overwrite="false"
              verbose="true" />
         <replaceregexp  file="${env.S1AS_HOME}/domains/domain1/config/domain.xml"
                         match="&lt;java-config (.*)&gt;"
                         replace="&lt;java-config \1&gt;${line.separator}
        &lt;jvm-options&gt;${jacocojvmarg}&lt;/jvm-options&gt;"
                                byline="true"/>
    </then>
    <else>
        <property name="jacocojvmarg" value=" "/>
    </else>
</if>
</target>

<target name="is-jacoco-enabled">
    <condition property="jacoco.enabled">
        <istrue value="${coverage.code}" />
    </condition>
</target>

<target name="de-attach-jacoco-agent" if="jacoco.enabled" depends="is-jacoco-enabled">
    <move file="${env.S1AS_HOME}/domains/domain1/config/domain.bak"
          tofile="${env.S1AS_HOME}/domains/domain1/config/domain.xml" />
</target>

<macrodef name="run-test">
    <attribute name="classname"/>
    <attribute name="classpath"/>
    <element name="arguments" optional="yes"/>
    <sequential>
        <java classname="@{classname}" classpath="@{classpath}" fork="true">
            <jvmarg value="-Das.props=${as.props}"/>
            <jvmarg value="-Dadmin.user=${admin.user}"/>
            <jvmarg value="-Dadmin.port=${admin.port}"/>
            <jvmarg value="-Dhttp.port=${http.port}"/>
            <jvmarg value="-Dhttps.port=${https.port}"/>
            <jvmarg value="-Dhttp.host=${http.host}"/>
            <arguments/>
        </java>
    </sequential>
</macrodef>

