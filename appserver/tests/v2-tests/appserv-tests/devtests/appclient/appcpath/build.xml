<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE project [
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://oss.oracle.com/licenses/CDDL+GPL-1.1
    or LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<!ENTITY commonSetup SYSTEM "file:./../../../config/properties.xml">
<!ENTITY commonBuild SYSTEM "file:./../../../config/common.xml">
<!ENTITY testproperties SYSTEM "file:./build.properties">
]>

<!--
    Makes sure that the setting of APPCPATH prior to running the appclient
    script behaves correctly.
    
    This script builds an app client and a separate library jar that is not 
    bundled with the app client.  The test does not deploy the app client but
    simply invokes the app client jar directly.  
    
-->
<project name="appcpath" default="usage" basedir=".">

    &commonSetup;
    &commonBuild;
    &testproperties;

    <import file="../appclient.xml"/>

    <target name="init" depends="init-common">
        <property name="lib.jar.file" value="${assemble.dir}/appcpathlib.jar"/>
    </target>

    <!--
        No need to deploy (or undeploy) because we can use an undeployed stand-alone app 
        client to test this feature.
    -->
    <target name="all" depends="build,run"/>

    <target name="clean" depends="init">
      <antcall  target="clean-common"/>
    </target>
 
    <target name="compile" depends="clean">
        <antcall target="compile-common">
            <param name="src" value="lib"/>
        </antcall>
        <antcall target="compile-common">
            <param name="src" value="client"/>
        </antcall>
        
        <antcall target="compile-common">
            <param name="src" value="${env.APS_HOME}/util/reporter"/>
        </antcall>
    </target>

    <target name="build" depends="compile">
        <mkdir dir="${assemble.dir}"/>
        <!-- Build the stand-alone app client. -->
        <antcall target="package-appclientjar-common">
            <param name="appclientjar.files" value="${build.classes.dir}"/> 
            <param name="appclientjar.classes" value="**/client/*.class **/reporter/*.class"/>
            <param name="appclient.jar" value="${assemble.dir}/${clientname}.jar"/>
        </antcall>

        <!-- Build the library jar. -->        
        <jar jarfile="${lib.jar.file}" 
            basedir="${build.classes.dir}" 
            update="true" includes ="**/lib/*.class" 
            />
    </target> 
    
    <target name="deploy">
        <echo>The "deploy" target is not used in this test.</echo>
    </target>

    <target name="undeploy">
        <echo>The "undeploy" target is not used in this test.</echo>
    </target>   

    <target name="run" depends="init">
        <echo>Testing stand-alone client...</echo>
        <!--
            Run the client with a nonsense setting for the APPCPATH env. var.
            This test should fail.
        -->
        <runclient appcpath-setting="no-where" resultproperty="expectFailure" expectedOutcome="fail"/>
        
        <!--
            Now run with the correct setting for APPCPATH - pointing to the
            previously-build library jar.  This test should pass.
        -->
        <runclient appcpath-setting="${lib.jar.file}" resultproperty="expectSuccess" expectedOutcome="pass"/>
        
        <condition property="result" value="passed" else="failed">
            <and>
                <equals arg1="${expectFailure}" arg2="1"/>
                <equals arg1="${expectSuccess}" arg2="0"/>
            </and>                
        </condition>
        <echo>Test result: ${result}</echo>
    </target>

    <!--
        The following macro executes the client with the APPCPATH set according
        to the macro argument appcpath-setting.
    -->
    <macrodef name="runclient">
        <attribute name="appcpath-setting"/>
        <attribute name="resultproperty"/>
        <attribute name="expectedOutcome" default="pass"/> <!-- either "pass" or "fail" -->
        <sequential>
            <property name="appclient.jar" value="${assemble.dir}/${appname}-client.jar"/>
            <property name="generated.appclient.jar" value="${assemble.dir}/${appname}-client.jar"/>
            <echo>With APPCPATH set to @{appcpath-setting} invoking...</echo>
            <echo>appclient -client ${generated.appclient.jar} ${appclient.application.args}</echo>
            <exec executable="${APPCLIENT}" failonerror="false" resultproperty="@{resultProperty}">
                <arg line="-client ${generated.appclient.jar}"/>
                <arg value="@{expectedOutcome}"/>
                <env key="APPCPATH" value="@{appcpath-setting}"/>
            </exec>
        </sequential>
    </macrodef>
        
        

    <target name="usage">
        <antcall target="usage-common"/>
    </target>

</project>
