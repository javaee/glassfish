<?xml version="1.0" encoding="UTF-8"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://oss.oracle.com/licenses/CDDL+GPL-1.1
    or LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<project name="javaws">
    <!--
        This project defines targets useful for integrating Java Web Start-based
        app client testing into both the SQE and the devtest test frameworks.

        The enclosing ant environment must define the property ${javaws.lib.jar}
        to point to the ant-extras.jar containing the JavaWSURLBuilder class.

        @Author: Tim Quinn
    -->

    <target name="javaws.init" >
        <prepare-javaws-security/>
    </target>

    <target name="javaws.cleanup" >
        <restore-javaws-security/>
    </target>

    <!--
        Security-related targets

        GlassFish signs the GlassFish system JARs needed by the ACC and the application
        JARs needed by the client.  By default it uses the self-signed cert
        that is generated when the domain is created (or during the GlassFish
        build in the case of the default domain, domain1.)  Java Web Start
        verifies signed JARs it downloads, and if the cert used to sign a JAR
        does not have a certificate chain to a trusted certificate authority
        then Java Web Start displays a dialog box, asking the user if s/he wants
        to trust the content.

        For automated testing we need to prevent Java Web Start from prompting
        the user.  We do this by telling Java Web Start to trust the self-signed
        cert which GlassFish used to sign the JARs.  And we do that by setting
        a property in the current user's deployment.properties config file so
        that Java Web Start will use the GlassFish domain's keystore (which
        contains the domain's self-signed cert) as the Java Web Start truststore.
        Because Java Web Start then sees that it should trust the self-signed
        cert, it will not prompt the user.

        To accomplish this, as part of initialization we make a safe copy of the existing
        deployment.properties file (if one exists), then we append a line to
        the deployment.properties file (creating it if it does not already
        exist).  Later, as part of clean-up, we restore the safe copy (if there
        was a pre-existing deployment.properties).
    -->
    <macrodef name="prepare-javaws-security">
        <sequential>
            <find-deployment-properties/>
            <choose-new-deployment-properties/>
            <!--
                Make the safe copy of any existing deployment.properties file.
            -->
            <property name="savedDeploymentPropertiesFilePath" value="${user.home}/deployment-saved.properties"/>
            <property name="trustedCertsPath" value="${admin.domain.dir}/${admin.domain}/config/keystore.jks"/>
            <copy file="${originalDeploymentPropertiesFilePath}"
                  tofile="${savedDeploymentPropertiesFilePath}"
                  overwrite="false"
                  failonerror="false"/>

            <!--
                Add the line to the existing file (or create a new one) pointing to
                the domain's keystore as the Java Web Start user-level truststore.
            -->
            <echo append="true"
                  file="${originalDeploymentPropertiesFilePath}">
    # Generated by GlassFish test framework for Java Web Start testing
    deployment.user.security.trusted.certs=${trustedCertsPath}
            </echo>
        </sequential>
    </macrodef>


    <macrodef name="restore-javaws-security">
        <sequential>
            <move
                  file="${savedDeploymentPropertiesFilePath}"
                  tofile="${originalDeploymentPropertiesFilePath}"
                  overwrite="true"
                  failonerror="false"/>
        </sequential>
    </macrodef>


    <!--
        The deployment.properties file - if it exists - could be in a number of
        different places depending on which OS this is.
    -->
    <macrodef name="find-deployment-properties">
        <sequential>
            <condition property="originalDeploymentPropertiesFilePath"
                       value="${user.home}/Application Data/Sun/Java/deployment.properties"
                       >
                <os family="windows"/>
            </condition>
            <condition property="originalDeploymentPropertiesFilePath"
                       value="${user.home}/Library/Caches/Java/deployment.properties"
                       >
                <os family="mac"/>
            </condition>
            <condition property="originalDeploymentPropertiesFilePath"
                       value="${user.home}/.java/deployment/deployment.properties">
                <os family="unix"/>
            </condition>
        </sequential>
    </macrodef>

    <macrodef name="choose-new-deployment-properties">
        <sequential>
            <property name="newDeploymentPropertiesFilePath" value="${user.home}/tempDeployment.properties"/>
        </sequential>
    </macrodef>

 
    
    <!--
        For the SQE framework, launches the app client using Java Web Start.
    -->
    <target name="launch-appclient-javaws" if="use.javaws">
        
        <echo message="Launching app client using Java Web Start"/>
        
        <tempfile property="clientOutputFile" prefix="appclient" suffix=".txt"/>
  
        <prepare-javaws-security/>
        <!--
            Choose the output file.
        -->
        <tempfile property="javaws.report.file" prefix="javaws" suffix=".txt"/>
        <property name="javaws.status.file" value="${javaws.report.file}.status"/>
        <property name="javaws.protocol" value="http"/>
        <property name="javaws.report.timeout" value="1500000"/>

        <!--
            Compose the URL to use for launching the app client via Java Web Start.
        -->
        <java classname="org.glassfish.ant.extras.JavaWSURLBuilder"
              classpath="${ant-extras.lib.jar}"
              outputproperty="jnlp.url"
              logError="true"
              fork="true">
              <arg line="-client" />
              <arg line="${assemble.dir}/${appname}AppClient.jar"/>
              <arg line="-name" />
              <arg line="${appname}Client"/>
              <arg line="-textauth"/>
              <arg line="-user ${acc.user}"/>
              <arg line="-password ${acc.password}"/>
              <arg line="-xml &quot;${admin.domain.dir}/${admin.domain}/config/glassfish-acc.xml&quot;"/>
              <arg line="${appclient.application.args}"/>
              <env key="APPCPATH" value="${appclient.classpath}"/>
              <env key="VMARGS" value="${appclient.vmargs}"/>

              <arg value="-testOutput"/>
              <arg value="${javaws.report.file}"/>

              <sysproperty key="javaws.protocol" value="${javaws.protocol}"/>
              <sysproperty key="http.host" value="${http.host}"/>
              <sysproperty key="http.port" value="${http.port}"/>
              <sysproperty key="appname" value="${appname}"/>
              <sysproperty key="clientname" value="${clientname}"/>
        </java>
        
        <!--
            Now launch the client.
        -->
        <echo>Launching with ${JAVAWS} -Xnosplash ${jnlp.url}</echo>
        <exec executable="${JAVAWS}"
            failonerror="false"
            timeout="${javaws.report.timeout}"
            >
            <arg value="-Xnosplash"/>
            <arg value="${jnlp.url}"/>
        </exec>

        <!--
            The Java Web Start launch runs outside this VM, so wait
            for the status file to appear
        -->
        <echo>Waiting for Java Web Start launch to complete....</echo>
        <waitfor maxwaitunit="second" maxwait="${javaws.report.timeout}">
            <available file="${javaws.status.file}"/>
        </waitfor>
        <echo>Java Web Start launch finished</echo>
        
        <!--
            Read the output file into a property, echo the output to the
            output so any human watching can see it, and then check the
            status for success or failure.
        -->
        <loadresource property="launchOutput">
            <file file="${javaws.report.file}"/>
        </loadresource>

        <echo file="${clientOutputFile}" message="${launchOutput}"/>
        
        <echo message="${launchOutput}"/>
        
        <antcall target="checkReporting-common">
            <param name="test.name" value="${appname}"/>
            <param name="test.description" value="${test.description}"/>
            <param name="test.count" value="${test.count}"/>
        </antcall>
    
        <delete file="${javaws.report.file}"/>
        <delete file="${javaws.status.file}"/>

        <restore-javaws-security/>
    </target>

</project>
