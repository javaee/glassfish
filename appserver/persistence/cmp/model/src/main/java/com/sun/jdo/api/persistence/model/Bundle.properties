#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright (c) 1997-2017 Oracle and/or its affiliates. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common Development
# and Distribution License("CDDL") (collectively, the "License").  You
# may not use this file except in compliance with the License.  You can
# obtain a copy of the License at
# https://oss.oracle.com/licenses/CDDL+GPL-1.1
# or LICENSE.txt.  See the License for the specific
# language governing permissions and limitations under the License.
#
# When distributing the software, include this License Header Notice in each
# file and include the License file at LICENSE.txt.
#
# GPL Classpath Exception:
# Oracle designates this particular file as subject to the "Classpath"
# exception as provided by Oracle in the GPL Version 2 section of the License
# file that accompanied this code.
#
# Modifications:
# If applicable, add the following below the License Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyright [year] [name of copyright owner]"
#
# Contributor(s):
# If you wish your version of this file to be governed by only the CDDL or
# only the GPL Version 2, indicate your decision by adding "[Contributor]
# elects to include this software in this distribution under the [CDDL or GPL
# Version 2] license."  If you don't indicate a single choice of license, a
# recipient has the option to distribute your version of this file under
# either the CDDL, the GPL Version 2 or to extend the choice of license to
# its licensees as provided above.  However, if you add GPL Version 2 code
# and therefore, elected the GPL Version 2 license, then the option applies
# only if the new code is made subject to such option by the copyright
# holder.
#


# ResourceBundle properties file for model messages
# key consists of: <subpackage>.<category>.<description>
# <subpackage> - is optional, package under model
# <category> - relationships, all elements, etc.
# <description> - short description (use _ to represent space)
# all keys should be in lowercase
#
# Some of the messages from this file are overridden in 
# mapping/ejb/src/com/sun/jdo/api/persistence/model/Bundle_ejb.properties
# and 
# support/ejb/src/com/sun/jdo/spi/persistence/support/ejb/model/Bundle.properties
#
# The message ID for a message in persistence is derived as follows:
# JDO<2_digit_bundle_prefix><1_digit_section_number><2_digit_serial_number>
#
# The 2 digit prefix for this bundle is 72.
#
# This file is divided into the following sections:
# 0. Top level model messages.
# 1. JDO model messages.
# 2. Mapping model messages.
# 3. Validation messages.
#
# IMPORTANT: When adding a new message in the validation section,
# realize that it is split into the following sub sections:
#     classes
#     fields
#     database elements
#     key class elements
# Since the messages should be grouped by sub section, the order of messageID's
# may not be sequential, so the last numbered message ID for the section 
# is stored in a comment at the end of the entire validation section.
#
# When adding a new message:
# 1. Please make sure that you add the message to the end of appropriate section.
# 2. Please add message ID to any user visible message.
# 3. The message ID for the new message = message ID for the last numbered 
#    message in a section + 1.
# 4. Please do not change the message ID for existing messages. These 
#    numbers are potentially mapped to more explanation about the message for 
#    the end user.
#


###############################################################################
# <Top level model messages>
# Message ID Range: JDO72000 - JDO72099
###############################################################################
# Model messages for loading/storing xml files
# {0}=class name
file.cannot_save=JDO72000:Cannot save file for class {0}
file.incompatible_version=JDO72001:Incompatible mapping file version; please remap \
class {0}
file.cannot_read=JDO72002:Cannot read mapping file for class {0}; exception is {1}

# RuntimeModel messages for class loader handling
# {0}=class name
classloader.multiple=JDO72003:class {0} loaded by multiple class loaders

# RuntimeModel message for dbschema loading
# {0}=schema name
# {1}=class name
dbschema.not_found=JDO72004:schema {0} for class {1} not found

###############################################################################
# <JDO model messages>
# Message ID Range: JDO72100 - JDO72199
###############################################################################
# JDO PersistenceClassElement messages
# {0}=key class name, {1}=class name
jdo.class.key_class_invalid=JDO72100:{0} is an invalid key class for class {1}.  \
Valid key class names are {1}.Oid and {1}Key.

# JDO RelationshipElement messages
# {0}=action value
jdo.relationship.update_action_invalid=JDO72101:{0} is an invalid update action
# {0}=action value
jdo.relationship.delete_action_invalid=JDO72102:{0} is an invalid delete action
jdo.relationship.lower_cardinality_invalid=JDO72103:Lower bound may not be negative or \
greater than upper bound
jdo.relationship.upper_cardinality_invalid=JDO72104:Upper bound may not be zero, \
negative, or less than lower bound

# JDO ConcurrencyGroupElement default name
jdo.concurrency_group.default=Default


###############################################################################
# <Mapping model messages>
# Message ID Range: JDO72200 - JDO72299
###############################################################################
# Mapping model generic messages for managing elements
mapping.element.null_argument=JDO72200:Cannot add/remove element: null argument supplied
# {0}=element name
mapping.element.element_not_removed=JDO72201:Element {0} not removed

# Mapping model messages for managing tables
# {0}=table name
mapping.table.foreign_key_not_found=JDO72202:Cannot add table {0}: foreign key not found
# {0}=table name
mapping.table.primary_table_defined=JDO72203:Cannot add primary table {0}: primary \
table already defined
# {0}=parent table name
mapping.table.parent_table_not_found=JDO72204:Cannot add table {0}: parent table not \
found in mapping
# {0}=secondary table name, {1}=parent table name
mapping.table.secondary_table_defined=JDO72205:Cannot add table {0}: secondary table \
{0} already defined for parent table {1}
# {0}=primary table name, {1}=schema name
mapping.table.schema_mismatch=JDO72206:Cannot add primary table {0}: primary \
table does not exist in schema {1}

# Mapping model messages for managing columns
# {0}=column name
mapping.column.column_defined=JDO72207:Cannot add column {0}: column already defined
# {0}=column name
mapping.column.associated_columns_defined=JDO72208:Cannot add column {0}: associated \
columns already defined
# {0}=column name
mapping.column.column_invalid=JDO72209:{0} is an invalid column - must be a column \
pair

# General validation messages
# Validation warning prefix (prepended to some of the messages below)
util.validation.warning=Warning: 

###############################################################################
# <Validation messages>
# Message ID Range: JDO72300 - JDO72399
###############################################################################
# Validation messages for classes
# Validation message for class not found
# {0}=class name
util.validation.class_not_found=JDO72300:Cannot find the class {0}.\n\
Restore the class.
# Validation message for related class not found
# {0}=class name
# {1}=field name
util.validation.class_not_found_related=JDO72301:Cannot find the related class {0} \
for the field {1}.\nRestore the class.
# Validation message for class not persistence-capable
# {0}=class name
util.validation.class_not_persistence_capable=JDO72302:The class {0} is not \
persistence-capable.\nConvert the class to persistence-capable.
# Validation message for related class not persistence-capable
# {0}=class name
# {1}=field name
util.validation.class_not_persistence_capable_related=JDO72303:The related class {0} \
for the field {1} is not persistence-capable.\nConvert the class to \
persistence-capable.
# Validation message for class not allowed to be persistence-capable
# {0}=class name
util.validation.class_not_allowed=JDO72304:The class {0} is not allowed to \
be persistence-capable.\nRevert it from persistence-capable or review the \
rules and update the class.
# Validation message for related class not allowed to be persistence-capable
# {0}=class name
# {1}=field name
util.validation.class_not_allowed_related=JDO72305:The related class {0} for the \
field {1} is not allowed to be persistence-capable.\nRevert it from \
persistence-capable or review the rules and update the class.
# Validation message for a missing definition of readObject
# {0}=pc class name
util.validation.class_readobject=JDO72306:The class {0} implements java.io.Serializable \
so it must also define the method readObject (see java.io.Serializable) to \
ensure proper enhancement.\nAdd the readObject method to the class.
# Validation message for a missing definition of writeObject
# {0}=pc class name
util.validation.class_writeobject=JDO72307:The class {0} implements \
java.io.Serializable so it must also define the method writeObject \
(see java.io.Serializable) to ensure proper enhancement.\nAdd the \
writeObject method to the class.
# Validation message for class which has no persistent fields
# {0}=class name
util.validation.class_no_fields=JDO72308:The class {0} must have at least one \
persistent field.\nSet the persistent property to true for an existing field \
or add a field and set its persistent property to true.
# Validation message for class which is not mapped
# {0}=class name
util.validation.class_not_mapped=JDO72309:The class {0} is not mapped.\n\
Set the primary table for the class.
# Validation message for a class missing key column mappings
# {0}=class name
# {1}=table name
# {2}=list of column names
util.validation.class_key_column_missing=JDO72310:All primary key columns in primary \
table {1} of class {0} must be mapped to key fields.\nMap the following \
primary key columns to key fields: {2}.  If you already have fields mapped to \
these columns, verify that they are key fields.

# Validation messages for fields
# Validation message for field not found
# {0}=field name
util.validation.field_not_found=JDO72311:The field {0} was specified as persistent, \
but it is not in the .java file.\nAdd the field to the .java file and make \
sure it is persistent.
# Validation message for field not allowed to be persistent
# {0}=field name
util.validation.field_persistent_not_allowed=JDO72312:The field {0} is not allowed to \
be persistent.\nChange the persistent field property to false.
# Validation message for field inconsistent (whether field or relationship)
# {0}=field name
util.validation.field_type_inconsistent=JDO72313:The field {0} is inconsistent.\n\
Toggle the persistent field property to false, then back to true.
# Validation message for field inconsistent (missing in one of the models)
# {0}=field name
util.validation.field_model_inconsistent=JDO72314:The field {0} is inconsistent.\n\
Make sure the field is persistent.
# Validation message for field not allowed to be relationship
# {0}=field name
util.validation.field_relationship_not_allowed=JDO72315:The field {0} is not allowed \
to be a relationship.\nChange the field''s type to be a wrapper or primitive \
type.\nIf the type is correct, toggle the persistent field property to false, \
then back to true.
# Validation message for field must be relationship
# {0}=field name
util.validation.field_type_not_allowed=JDO72316:The field {0} must be a relationship.\n\
Change the field''s type to be a collection or other persistence-capable class.\
\nIf the type is correct, toggle the persistent field property to false, \
then back to true.
# Validation message for managed (multiple fields to same column) field which
# has a default fetch group
# {0}=field name
util.validation.field_fetch_group_invalid=JDO72317:The field {0} has an invalid fetch \
group.  Default is not a valid fetch group for managed fields.\nSelect a \
different fetch group.
# Validation message for field which is not mapped
# {0}=field name
util.validation.field_not_mapped=JDO72318:The field {0} is not mapped.\n\
Set the column mapping for the field.
# Validation message for key field which is mapped to a blob or clob column
# {0}=field name
util.validation.field_key_field_not_allowed=JDO72319:The field {0} is not allowed to be \
a key field since its mapping contains a large object (e.g. BLOB/CLOB) \
column.\nUpdate the column mapping or set the key field property to false.
# Validation message for field in the default fetch group which is mapped to a 
# blob or clob column
# {0}=field name
util.validation.field_fetch_group_not_allowed=JDO72320:The field {0} has an invalid \
fetch group.  Default is not a valid fetch group for fields mapped to large \
object (e.g. BLOB/CLOB) columns.\nSelect a different fetch group or update the \
column mapping.
# Validation message for managed (multiple fields to same column) field which
# has a non exact column match
# {0}=field name
# {1}=other field name
util.validation.field_mapping_invalid=JDO72321:The field {0} has an invalid mapping. \
Its mapping partially overlaps the mapping of field {1}. The mappings must \
be identical or contain no overlaps. \nUpdate the column mapping for one or \
both fields.
# Validation message for invalid combination of upper and lower bounds
# {0}=(relationship) field name
util.validation.cardinality_invalid=JDO72322:The field {0} does not have valid upper \
and lower bounds.\nUpdate the bounds so that the upper bound is greater than \
0 and greater than or equal to the lower bound and the lower bound is \
non-negative.
# Validation message for a relationship field with lower bound 0 mapped to 
# at least one non-nullable column
# {0}=(relationship) field name
util.validation.lower_bound_invalid=JDO72323:The field {0} does not have a valid lower \
bound.  A relationship mapped to a foreign key having one or more non-nullable \
columns must have a lower bound of 1.\nUpdate the lower bound to 1.
# Validation message for invalid collection class
# {0}=(relationship) field name
# NOTE: This commented out version should be used after we expose collection
# class to the user
# util.validation.collection_class_invalid=JDO72324:The field {0} has an invalid \
# collection class.\nUpdate the relationship''s collection class.
util.validation.collection_class_invalid=JDO72324:The field {0} has an invalid \
collection class.\nUpdate the relationship''s type to be a set or generic \
collection, or set the persistent property to false.
# Validation message for missing element class
# {0}=(relationship) field name
util.validation.element_class_not_found=JDO72325:The field {0} does not have a related \
class set, but it is mapped to columns.\nUpdate the related class or unmap the \
relationship.
# Validation message for inverse field which is only set on one side
# {0}=(relationship) field name
# {1}=inverse field name
util.validation.inverse_field_invalid=JDO72326:The field {0} has an invalid related \
field {1}.  Related fields must be set for both relationship fields.\nUnset \
the related field property for this field or set the related field property \
for the related field.
# Validation message for inverse field which does not exist in the related class
# {0}=(relationship) field name
# {1}=inverse field name
# {2}=related class name
util.validation.related_class_mismatch=JDO72327:The field {0} has a related field {1} \
which does not exist in the related class {2}.\nUpdate the related class and \
update the related field if necessary.
# Validation message for inverse field set and no related class set
# {0}=(relationship) field name
# {1}=inverse field name
util.validation.related_class_not_found=JDO72328:The field {0} does not have a related \
class set, but it has related field {1}.\nUpdate the related class or set the \
related field to None.
# Validation message for field & inverse field which have non-inverse mappings 
# {0}=(relationship) field name
# {1}=inverse field name
util.validation.inverse_mapping_mismatch=JDO72329:The field {0} has a mapping which is \
not the exact inverse of its related field {1}''s mapping.\nSet the related \
field for both relationship fields to None, unmap one of the fields, then \
reset the related field.

# Validation messages for database elements
# Validation message for schema not found
# {0}=schema name
# {1}=class name
util.validation.schema_not_found=JDO72331:Cannot find the schema {0} for the class {1}.\
\nRestore the schema file.
# Validation message for related schema not found
# {0}=schema name
# {1}=related class name
# {2}=field name
util.validation.schema_not_found_related=JDO72332:Cannot find the schema {0} for the \
related class {1} of the field {2}.\nRestore the schema file.
# Validation message for schema not set but primary table set
# {0}=class name
util.validation.schema_not_set=JDO72333:The class {0} does not have a schema set, but \
it is mapped to tables.\nUpdate the mapped schema property for the class or \
unmap the primary table.
# Validation message for schemas don't match
# {0}=class name
# {1}=related class name
# {2}=field name
util.validation.schema_mismatch=JDO72334:The schemas for class {0} and its related \
class {1} of the field {2} must match.\nUpdate the mapped schema property of \
one of the classes.
# Validation message for primary table which has no primary key
# {0}=table name
# {1}=class name
util.validation.table_no_primarykey=JDO72335:If the table {0} for class {1} is mapped \
as the primary table, it must have a primary key.\nChoose a different primary \
table or verify that the contents of the schema file are correct. 
# Validation message for table not found
# {0}=table name
# {1}=class name
util.validation.table_not_found=JDO72336:Cannot find the table {0} for the class {1}.\n\
Verify that the schema file exists and that its contents are correct.
# Validation message for related table not found
# {0}=table name
# {1}=field name
util.validation.table_not_found_related=JDO72337:Cannot find the table {0} for the \
related class of the field {1}.\nVerify that the schema file exists and that \
its contents are correct.
# Validation message for tables don't match
# {0}=column name
# {1}=field name
# {2}=class name
util.validation.table_mismatch=JDO72355:Relationship {1} is mapped to column \
{0} which is not one of the mapped primary or secondary tables for \
class {2}. \nUpdate the table mapping or the relationship mapping.
# Validation message for related tables don't match
# {0}=column name
# {1}=field name
# {2}=related class name
util.validation.table_mismatch_related=JDO72338:Relationship {1} is mapped \
to column {0} which is not one of the mapped primary or secondary tables \
for related class {2}. \
\nUpdate the table mapping or the relationship mapping.
# Validation message for column in reference key pair not found
# {0}=column pair name
# {1}=class name
util.validation.column_not_found=JDO72339:Cannot find the columns in reference key \
pair {0} for the secondary table setup of the class {1}.\nVerify that the \
schema file exists and that its contents are correct.
# Validation message for related column not found
# {0}=column name
# {1}=field name
# {2}=related class name
util.validation.column_not_found_related=JDO72340:Cannot find the column {0} for \
mapping the field {1} in the class {2}.\nVerify that the schema file exists \
and that its contents are correct.
# Validation message for invalid column pair (in relationship setup)
# {0}=column name
# {1}=field name
# {2}=related class name
util.validation.column_invalid=JDO72341:Cannot find the columns in key pair {0} for the \
relationship {1} in class {2}.\nVerify that the schema file exists and that \
its contents are correct.

# Validation messages for key class elements

# Validation message for a wrong key class name
# {0}=key class name
# {1}=pc class name
util.validation.key_class_invalid=JDO72342:{0} is an invalid key class name. Rename \
the class {1}.Oid for an inner class or {1}Key for a separate class.
# Validation message for key class name not set
# {0}=pc class name
util.validation.key_class_unset=JDO72343:The key class property for class {0} is not \
set.\nSet the key class property.
# Validation message for key class missing
# {0}=key class name
# {1}=pc class name
util.validation.key_class_missing=JDO72344:The key class {0} for class {1} does not \
exist.\nDefine the key class.
# Validation message for key class must be public
# {0}=key class name
# {1}=pc class name
util.validation.key_class_public=JDO72345:The key class {0} for class {1} must be \
public.\nUpdate the modifiers of the key class.
# Validation message for key class must implement Serializable
# {0}=key class name
# {1}=pc class name
util.validation.key_class_serializable=JDO72346:The key class {0} for class {1} must \
implement java.io.Serializable.\nUpdate the interfaces of the key class.
# Validation message for inner key class must be static 
# {0}=key class name
# {1}=pc class name
util.validation.key_class_static=JDO72347:If the key class {0} for class {1} is \
defined as inner class, it must be static.\nUpdate the modifiers of the key \
class.
# Validation message for key class field must have a valid type 
# {0}=key class field name
# {1}=key class name
util.validation.key_field_type_invalid=JDO72348:The type of non-static field {0} of \
the key class {1} must be primitive, String, a Number type, or a Date type.\n\
Update the type of the key class field.
# Validation message for key class field must be public
# {0}=key class field name
# {1}=key class name
util.validation.key_field_public=JDO72349:The non-static field {0} of the key class {1} \
must be public.\nUpdate the modifiers of the key class field.
# Validation message for key class field must have the same type as the pc 
# class key field
# {0}=key class field name
# {1}=key class name
# {2}=pc class name
util.validation.key_field_type_mismatch=JDO72350:The field {0} of the key class {1} \
must have the same type as the corresponding field in the persistence-capable \
class {2}.\nUpdate the type of the key class field.
# Validation message for a missing key field in the key class
# {0}=pc class name
# {1}=key class name
# {2}=list of field names
util.validation.key_field_missing=JDO72351:All key fields of class {0} must be present \
in the key class {1}.\nAdd the following key fields to the key class: {2}.
# Validation message for a missing key class constructor
# {0}=key class name
# {1}=pc class name
util.validation.key_class_constructor=JDO72352:The key class {0} for class {1} must \
define a public constructor which might be the default constructor or a no-arg \
constructor.\nAdd a no-arg constructor to the key class. 
# Validation message for a missing equals redefinition
# {0}=key class name
# {1}=pc class name
util.validation.key_class_equals=JDO72353:The key class {0} for class {1} must override \
the equals method from java.lang.Object.\nImplement the equals method in the \
key class.
# Validation message for a missing hashCode redefinition
# {0}=key class name
# {1}=pc class name
util.validation.key_class_hashcode=JDO72354:The key class {0} for class {1} must \
override the hashCode method from java.lang.Object.\nImplement the hashCode \
method in the key class.

# Validation messages for version field elements

# Validation message for missing or too many version fields
# {0}=class name
util.validation.version_field_cardinality=JDO72356:The class {0} must have \
exactly one version field.\nSet the version field property to an existing field.
# Validation message for version field not allowed to be relationship
# {0}=(relationship) field name
util.validation.version_field_relationship_not_allowed=JDO72357:The \
relationship field {0} is not allowed to be a version field.\nChoose a \
non-relationship field to be the version field.
# Validation message for version field which does not use the 
# default fetch group
# {0}=field name
util.validation.version_field_fetch_group_invalid=JDO72358:The version field \
{0} has an invalid fetch group.  Version fields must belong to the default \
fetch group.\nSet the fetch group to ''Default'' or select a different \
version field.
# Validation message for version field which is a key field
# {0}=field name
util.validation.version_field_key_field_not_allowed=JDO72359:The field {0} is \
not allowed to be a key field since it is defined as a version field.\n\
Choose a different version field or set the key field property to false.
# Validation message for version field must be of type long
# {0}=field name
util.validation.version_field_type_not_allowed=JDO72360:The version field {0} \
must be of type ''long''.\n\
Change the field''s type to ''long'' or choose a different version field.
# Validation message for version field which is not mapped to exactly one 
# column
# {0}=field name
util.validation.version_field_not_mapped=JDO72361:The version field {0} must \
be mapped to exactly one column.\n\Update the column mapping for the field.
# Validation message for version field mapped to a non-primary table column
# {0}=column name
# {1}=field name
# {2}=class name
util.validation.version_field_table_mismatch=JDO72362:The version field {1} is \
mapped to column {0} which is not in the primary table for class {2}.\n\
Update the column mapping or choose a different version field.
# Validation message for version field mapped to a nullable or 
# non-numeric column
# {0}=column name
# {1}=field name
# {2}=class name
util.validation.version_field_column_type_invalid=JDO72363:The version field \
{1} in class {2} is mapped to column {0} which may not be nullable or \
non-numeric.\n\
Update the schema or choose a different version field.
# Validation message for version field mapped to a primary key column
# {0}=column name
# {1}=field name
# {2}=class name
util.validation.version_field_column_pk_invalid=JDO72364:The version field {1} \
in class {2} is mapped to column {0} which may not be part of the primary \
key.\nUpdate the schema or choose a different version field.
# Validation message for version field mapped to a foreign key column
# {0}=column name
# {1}=field name
# {2}=class name
util.validation.version_field_column_fk_invalid=JDO72364:The version field {1} \
in class {2} is mapped to column {0} which may not be part of a foreign key.\n\
Update the schema or choose a different version field.
# Validation message for a version field which is also a managed 
# (multiple fields to same column) field and, by definition of a version field,
# has a default fetch group
# {0}=field name
util.validation.version_field_column_invalid=JDO72365:The version field {0} \
has an invalid column mapping.  Version fields may not be managed fields.\n\
Update the column mapping or choose a different version field.

# IMPORTANT: The highest message ID for the validation section is
#
#                                JDO72365
#
#    Please update this as necessary.

# logging messages - not brandable for ejb context at this time
model.parse_error=Errors during persistence validation
