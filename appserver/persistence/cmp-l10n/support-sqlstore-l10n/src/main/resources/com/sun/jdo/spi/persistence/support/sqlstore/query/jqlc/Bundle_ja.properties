#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright (c) 1997-2017 Oracle and/or its affiliates. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common Development
# and Distribution License("CDDL") (collectively, the "License").  You
# may not use this file except in compliance with the License.  You can
# obtain a copy of the License at
# https://oss.oracle.com/licenses/CDDL+GPL-1.1
# or LICENSE.txt.  See the License for the specific
# language governing permissions and limitations under the License.
#
# When distributing the software, include this License Header Notice in each
# file and include the License file at LICENSE.txt.
#
# GPL Classpath Exception:
# Oracle designates this particular file as subject to the "Classpath"
# exception as provided by Oracle in the GPL Version 2 section of the License
# file that accompanied this code.
#
# Modifications:
# If applicable, add the following below the License Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyright [year] [name of copyright owner]"
#
# Contributor(s):
# If you wish your version of this file to be governed by only the CDDL or
# only the GPL Version 2, indicate your decision by adding "[Contributor]
# elects to include this software in this distribution under the [CDDL or GPL
# Version 2] license."  If you don't indicate a single choice of license, a
# recipient has the option to distribute your version of this file under
# either the CDDL, the GPL Version 2 or to extend the choice of license to
# its licensees as provided above.  However, if you add GPL Version 2 code
# and therefore, elected the GPL Version 2 license, then the option applies
# only if the new code is made subject to such option by the copyright
# holder.
#


# resource bundle for runtime messages
# key consists of: <subpackage>.<class>.<method>.<description>
# <subpackage> - is optional, package under runtime
# <class> - class name
# <method> - method name
# <description> - short description (use _ to represent space)
# all keys should be in lowercase
#
# The message ID for a message in persistence is derived as follows:
# JDO<2_digit_bundle_prefix><1_digit_section_number><2_digit_serial_number>
#
# The 2 digit prefix for this bundle is 79.
# 
# This file is divided into following sections. 
# 1. main compiler class
# 2. error message helper class
# 3. syntax error messages
# 4. semantic error messages
# 5. optimizer
# 6. code generation
# 7. Miscellaneous
#
# When adding a new message:
# 1. Please make sure that you add the message to the end of appropriate section.
# 2. Please add message ID to any user visible message.
# 3. The message ID for the new message = message ID for the last numbered 
#    message in a section + 1.
# 4. Please do not change the message ID for existing messages. These 
#    numbers are potentially mapped to more explanation about the message for 
#    the end user.
#

##############################################################################
#<main compiler class>
# Message ID Range: JDO79000 - JDO79099
#############################################################################

jqlc.jqlc.generic.nocandidateclass=JDO79000: \u5019\u88DC\u30AF\u30E9\u30B9\u306E\u6307\u5B9A\u304C\u3042\u308A\u307E\u305B\u3093\u3002
jqlc.jqlc.checkcandidates.memorycollection=JDO79001: \u7BC4\u56F2\u306E\u306A\u3044\u30B3\u30EC\u30AF\u30B7\u30E7\u30F3\u3078\u306E\u554F\u5408\u305B\u306F\u30B5\u30DD\u30FC\u30C8\u3055\u308C\u307E\u305B\u3093\u3002
jqlc.jqlc.checkcandidates.mismatch=JDO79002: \u5019\u88DC\u30B3\u30EC\u30AF\u30B7\u30E7\u30F3\u304C\u5019\u88DC\u30AF\u30E9\u30B9''{0}''\u3068\u4E00\u81F4\u3057\u307E\u305B\u3093\u3002
# {0} - name of the compiler pass
LOG_JQLCStartPass=JDO79003: JQLC\u306F{0}\u3092\u958B\u59CB\u3057\u307E\u3059
# {0} - name of the compiler pass
LOG_JQLCDumpTree=JDO79004: JQLC\u306F\u30C4\u30EA\u30FC{0}\u3092\u30C0\u30F3\u30D7\u3057\u307E\u3059
LOG_JQLCReuseRetrieveDesc=JDO79005: JQLC\u306F\u30AD\u30E3\u30C3\u30B7\u30E5\u3055\u308C\u305FRetrieveDesc\u3092\u518D\u5229\u7528\u3057\u307E\u3059

#############################################################################
#<error message helper class>
#                  it is the last arg for each of them that contains the 
#                  actual message.
#############################################################################
jqlc.errormsg.generic.msg={0}: {1}
jqlc.errormsg.generic.msgcolumn={0}\u5217({1}): {2}
jqlc.errormsg.generic.msglinecolumn={0}\u884C({1})\u5217({2}): {3}

#############################################################################
#<syntax error messages>
# Message ID Range: JDO79100 - JDO79199
#############################################################################

jqlc.parser.syntaxerror=JDO79100: \u69CB\u6587\u30A8\u30E9\u30FC\u304C\u3042\u308A\u307E\u3059\u3002
jqlc.parser.syntaxerrorattoken=JDO79101: ''{0}''\u306B\u69CB\u6587\u30A8\u30E9\u30FC\u304C\u3042\u308A\u307E\u3059\u3002
jqlc.parser.unexpectedtoken=JDO79102: \u69CB\u6587\u30A8\u30E9\u30FC\u3002\u4E88\u671F\u305B\u306C\u30C8\u30FC\u30AF\u30F3{0}\u304C\u3042\u308A\u307E\u3059\u3002
jqlc.parser.unexpectedchar=JDO79103: \u69CB\u6587\u30A8\u30E9\u30FC\u3002\u4E88\u671F\u305B\u306Cchar ''{0}''\u304C\u3042\u308A\u307E\u3059\u3002
jqlc.parser.expectedfoundchar=JDO79104: \u69CB\u6587\u30A8\u30E9\u30FC\u3002''{1}''\u3067\u4E88\u671F\u305B\u306Cchar ''{0}''\u304C\u898B\u3064\u304B\u308A\u307E\u3057\u305F\u3002
jqlc.parser.unexpectedEOF=JDO79105: \u69CB\u6587\u30A8\u30E9\u30FC\u3002\u30C6\u30AD\u30B9\u30C8\u306E\u4E88\u671F\u305B\u306C\u7D42\u4E86\u3067\u3059\u3002

#############################################################################
#<semantic error messages>
# Message ID Range: JDO7109200 - JDO79399
#############################################################################

# semantic error messages (unsupported operations)

jqlc.semantic.analysebitwiseexpr.exclusiveorop=JDO79200: \u6392\u4ED6\u7684\u3067\u3042\u308B\u304B\u3001\u6F14\u7B97\u5B50^\u304C\u30B5\u30DD\u30FC\u30C8\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002
jqlc.semantic.analysebitwiseexpr.integerbitwiseop=JDO79201: \u6574\u6570\u30D3\u30C3\u30C8\u5358\u4F4D\u6F14\u7B97\u5B50{0}\u306F\u30B5\u30DD\u30FC\u30C8\u3055\u308C\u307E\u305B\u3093\u3002
jqlc.semantic.analysecollectioncall.unsupportedcollectionexpr=JDO79202: \u30B3\u30EC\u30AF\u30B7\u30E7\u30F3\u5F0F''{0}''\u306F\u30B5\u30DD\u30FC\u30C8\u3055\u308C\u307E\u305B\u3093\u3002
jqlc.semantic.analysecollectioncall.nonvariable=JDO79203: \u5909\u6570\u304C\u4E88\u671F\u3055\u308C\u307E\u3057\u305F - \u5909\u6570\u4EE5\u5916\u306B\u30B5\u30DD\u30FC\u30C8\u3055\u308C\u3066\u3044\u306A\u3044\u5F15\u6570\u304C\u542B\u307E\u308C\u3066\u3044\u307E\u3059\u3002
jqlc.semantic.generic.unsupportedconstraintop=JDO79204: \u5909\u6570\u5236\u7D04\u53E5\u3067\u306F\u6F14\u7B97''{0}''\u306F\u30B5\u30DD\u30FC\u30C8\u3055\u308C\u307E\u305B\u3093\u3002
jqlc.semantic.candidateclass.nonpc=JDO79205: \u30AF\u30E9\u30B9''{0}''\u306F\u6C38\u7D9A\u53EF\u80FD\u3067\u306F\u3042\u308A\u307E\u305B\u3093\u3002\u554F\u5408\u305B\u3067\u306F\u3001\u6C38\u7D9A\u4E0D\u53EF\u5019\u88DC\u30AF\u30E9\u30B9\u306F\u30B5\u30DD\u30FC\u30C8\u3055\u308C\u307E\u305B\u3093\u3002
jqlc.semantic.checkvalidorderingexpr.invalidordering=JDO79206: \u9806\u5E8F\u306E\u6307\u5B9A\u306B\u30B5\u30DD\u30FC\u30C8\u3055\u308C\u306A\u3044\u5F0F''{0}''\u304C\u3042\u308A\u307E\u3059\u3002
jqlc.semantic.checkvalidresultexpr.invalidresult=JDO79207: \u7D50\u679C\u306E\u6307\u5B9A\u306B\u30B5\u30DD\u30FC\u30C8\u3055\u308C\u306A\u3044\u5F0F''{0}''\u304C\u3042\u308A\u307E\u3059\u3002

# semantic error messages (user errors)

jqlc.semantic.analysecollectioncall.typemismatch=JDO79208: \u30B3\u30EC\u30AF\u30B7\u30E7\u30F3\u8981\u7D20\u578B''{0}''\u3068\u5909\u6570\u578B''{1}''\u306E\u9593\u306B\u306F\u4E92\u63DB\u6027\u304C\u3042\u308A\u307E\u305B\u3093\u3002
jqlc.semantic.analysecollectioncall.relationshipexpected=JDO79209: \u60F3\u5B9A\u3055\u308C\u308B\u74B0\u5883\u30D5\u30A3\u30FC\u30EB\u30C9\u306F''{0}''\u3067\u3059\u3002
jqlc.semantic.analysedotexpr.classexprexpected=JDO79210: \u30AF\u30E9\u30B9\u30FB\u30BF\u30A4\u30D7\u306E\u5F0F\u304C\u4E88\u671F\u3055\u308C\u307E\u3057\u305F\u3002
jqlc.semantic.analysefieldaccess.nonperistentfield=JDO79211: \u6C38\u7D9A\u53EF\u80FD\u30AF\u30E9\u30B9''{1}''\u306E\u975E\u6C38\u7D9A\u30D5\u30A3\u30FC\u30EB\u30C9''{0}''\u306B\u30A2\u30AF\u30BB\u30B9\u3067\u304D\u307E\u305B\u3093\u3002
jqlc.semantic.analysefieldaccess.nonpublicfield=JDO79212: \u975E\u6C38\u7D9A\u53EF\u80FD\u30AF\u30E9\u30B9''{1}''\u306Epublic\u4EE5\u5916\u306E\u30D5\u30A3\u30FC\u30EB\u30C9''{0}''\u306B\u30A2\u30AF\u30BB\u30B9\u3067\u304D\u307E\u305B\u3093\u3002
jqlc.semantic.analysestaticfieldaccess.staticreference=JDO79213: \u30AF\u30E9\u30B9''{1}''\u306E\u9759\u7684\u3067\u306A\u3044\u5909\u6570''{0}''\u306B\u5BFE\u3057\u3066\u9759\u7684\u306A\u53C2\u7167\u3092\u4F5C\u6210\u3059\u308B\u3053\u3068\u306F\u3067\u304D\u307E\u305B\u3093\u3002
jqlc.semantic.analysestaticfieldaccess.nonpublicfield=JDO79214: \u30AF\u30E9\u30B9''{1}''\u306Epublic\u4EE5\u5916\u306E\u9759\u7684\u306A\u30D5\u30A3\u30FC\u30EB\u30C9''{0}''\u306B\u30A2\u30AF\u30BB\u30B9\u3067\u304D\u307E\u305B\u3093\u3002
jqlc.semantic.analyserelationalexpr.notorderable=JDO79215: {1}\u306E\u30AA\u30DA\u30E9\u30F3\u30C9\u578B''{0}''\u3092\u30BD\u30FC\u30C8\u3059\u308B\u3053\u3068\u306F\u3067\u304D\u307E\u305B\u3093\u3002
jqlc.semantic.expression.undefined=JDO79216: \u5F0F''{0}''\u306F\u5B9A\u7FA9\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002
jqlc.semantic.filter.booleanexpected=JDO79217: \u30D6\u30FC\u30EB\u5F0F\u304C\u60F3\u5B9A\u3055\u308C\u307E\u3059\u3002\u30D5\u30A3\u30EB\u30BF\u5F0F\u306E\u578B\u306F''{0}''\u3067\u3059\u3002
jqlc.semantic.generic.alreadydeclared=JDO79218: ''{0}''\u306F\u3059\u3067\u306B{1}\u3068\u3057\u3066\u5BA3\u8A00\u3055\u308C\u3066\u3044\u307E\u3059\u3002
jqlc.semantic.generic.arguments.numbermismatch=JDO79219: \u5F15\u6570\u306E\u6570\u304C\u6B63\u3057\u304F\u3042\u308A\u307E\u305B\u3093\u3002
jqlc.semantic.generic.arguments.typemismatch=JDO79220: \u5B9F\u969B\u306E\u30D1\u30E9\u30E1\u30FC\u30BF\u306E\u578B\u306B\u4E92\u63DB\u6027\u304C\u3042\u308A\u307E\u305B\u3093\u3002''{0}''\u3092''{1}''\u306B\u5909\u63DB\u3059\u308B\u3053\u3068\u306F\u3067\u304D\u307E\u305B\u3093\u3002
jqlc.semantic.generic.arguments.invalid=JDO79221: ''{0}''\u3067\u306F\u7121\u52B9\u306A\u5F15\u6570\u3067\u3059\u3002
jqlc.semantic.generic.invalidmethodcall=JDO79222: \u30E1\u30BD\u30C3\u30C9\u547C\u51FA\u3057\u304C\u7121\u52B9\u3067\u3059\u3002
jqlc.semantic.generic.unknownfield=JDO79223: \u30AF\u30E9\u30B9''{1}''\u306B\u306F\u30D5\u30A3\u30FC\u30EB\u30C9''{0}''\u306F\u5B9A\u7FA9\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002
jqlc.semantic.generic.unknowntype=JDO79224: \u4E0D\u660E\u306A\u578B''{0}''\u3002
jqlc.semantic.identifier.undefined=JDO79225: \u672A\u5B9A\u7FA9\u306E\u8B58\u5225\u5B50''{0}''\u3002
jqlc.semantic.primary.invalidcast=JDO79226: \u578B''{0}''\u306E\u5F0F\u3092\u578B''{1}''\u306B\u30AD\u30E3\u30B9\u30C8\u3059\u308B\u3053\u3068\u306F\u3067\u304D\u307E\u305B\u3093\u3002
jqlc.semantic.type.notype=JDO79227: \u578B\u304C\u60F3\u5B9A\u3055\u308C\u307E\u3059\u3002''{0}''\u306F{1}\u3068\u3057\u3066\u5B9A\u7FA9\u3055\u308C\u3066\u3044\u307E\u3059\u3002
jqlc.semantic.analyseorderingexpression.notorderable=JDO79228: \u9806\u5E8F\u5F0F\u306E\u578B''{0}''\u3092\u30BD\u30FC\u30C8\u3059\u308B\u3053\u3068\u306F\u3067\u304D\u307E\u305B\u3093\u3002
jqlc.semantic.checkvalidresultexpr.invalidavgsumexpr=JDO79229: ''{1}''\u53CE\u96C6\u5F0F\u306E\u578B''{0}''\u304Cnumber\u578B\u307E\u305F\u306Fchar\u578B\u3067\u306F\u3042\u308A\u307E\u305B\u3093\u3002
jqlc.semantic.checkvalidresultexpr.invalidminmaxexpr=JDO79230: \u53CE\u96C6\u5F0F''{1}''\u306E\u578B''{0}''\u3092\u30BD\u30FC\u30C8\u3059\u308B\u3053\u3068\u306F\u3067\u304D\u307E\u305B\u3093\u3002
jqlc.semantic.checkresultordering.invalidorderingfordistinctresultfield=JDO79231: distinct\u7D50\u679C\u30D5\u30A3\u30FC\u30EB\u30C9\u5F0F''{0}''\u3068\u9806\u5E8F\u5F0F''{1}''\u306B\u306F\u4E92\u63DB\u6027\u304C\u3042\u308A\u307E\u305B\u3093\u3002\u4E21\u8005\u306F\u540C\u3058\u30D5\u30A3\u30FC\u30EB\u30C9\u3067\u3042\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059\u3002
jqlc.semantic.checkresultordering.invalidorderingfordistinctresult=JDO79232: \u7D50\u679C\u5F0F''distinct {0}''\u3068\u9806\u5E8F\u5F0F''{1}''\u306B\u306F\u4E92\u63DB\u6027\u304C\u3042\u308A\u307E\u305B\u3093\u3002\u4E21\u8005\u306F\u3001\u30AF\u30E9\u30B9\u3078\u306E\u540C\u3058\u30CA\u30D3\u30B2\u30FC\u30B7\u30E7\u30F3\u5F0F\u3092\u4F7F\u7528\u3059\u308B\u540C\u3058\u30AF\u30E9\u30B9\u306E\u30D5\u30A3\u30FC\u30EB\u30C9\u3067\u3042\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059\u3002

# query parameter table

jqlc.parametertable.checkunboundparams.unboundparam=JDO79233: \u554F\u5408\u305B\u30D1\u30E9\u30E1\u30FC\u30BF''{0}''\u306F\u30D0\u30A4\u30F3\u30C9\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002
jqlc.parametertable.definevaluebyname.undefinedparam=JDO79234: \u554F\u5408\u305B\u30D1\u30E9\u30E1\u30FC\u30BF''{0}''\u306F\u5B9A\u7FA9\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002
jqlc.parametertable.definevaluebyindex.wrongnumberofargs=JDO79235: \u5F15\u6570\u306E\u6570\u304C\u6B63\u3057\u304F\u3042\u308A\u307E\u305B\u3093\u3002
jqlc.parametertable.definevaluebyindex.typemismatch=JDO79236: \u5B9F\u969B\u306E\u30D1\u30E9\u30E1\u30FC\u30BF\u3068\u4E92\u63DB\u6027\u304C\u3042\u308A\u307E\u305B\u3093\u3002''{0}''\u3092''{1}''\u306B\u5909\u63DB\u3059\u308B\u3053\u3068\u306F\u3067\u304D\u307E\u305B\u3093\u3002

#############################################################################
#<optimizer>
# Message ID Range: JDO79400 - JDO79499
#############################################################################

jqlc.optimizer.staticfieldaccess.illegal=JDO79400: \u30AF\u30E9\u30B9''{1}''\u306E\u9759\u7684\u306A\u30D5\u30A3\u30FC\u30EB\u30C9''{0}''\u306B\u30A2\u30AF\u30BB\u30B9\u3067\u304D\u307E\u305B\u3093\u3002
jqlc.optimizer.literal.invalid=JDO79401: \u7121\u52B9\u306A''{0}''\u30EA\u30C6\u30E9\u30EB''{1}''\u3002

#############################################################################
#<code generation>
# Message ID Range: JDO79500 - JDO79599
#############################################################################

jqlc.codegeneration.fieldaccess.illegal=JDO79500: \u30AA\u30D6\u30B8\u30A7\u30AF\u30C8''{1}''\u306E\u30D5\u30A3\u30FC\u30EB\u30C9''{0}''\u306B\u30A2\u30AF\u30BB\u30B9\u3067\u304D\u307E\u305B\u3093\u3002
jqlc.codegeneration.collectioncomparison.nonnull=JDO79501: \u30B3\u30EC\u30AF\u30B7\u30E7\u30F3\u3068null\u4EE5\u5916\u306E\u5024\u306E\u6BD4\u8F03\u306F\u30B5\u30DD\u30FC\u30C8\u3055\u308C\u307E\u305B\u3093\u3002
jqlc.codegeneration.generic.unsupportedop=JDO79502: \u64CD\u4F5C''{0}''\u306F\u30B5\u30DD\u30FC\u30C8\u3055\u308C\u3066\u3044\u307E\u305B\u3093
jqlc.codegeneration.substring.beginnegative=JDO79503: substring\u30E1\u30BD\u30C3\u30C9\u306E\u958B\u59CB\u7D22\u5F15''{0}''\u304C\u8CA0\u3067\u3059\u3002
jqlc.codegeneration.substring.beginlargerend=JDO79504: substring\u30E1\u30BD\u30C3\u30C9\u306E\u958B\u59CB\u7D22\u5F15''{0}''\u304C\u7D42\u4E86\u7D22\u5F15''{1}''\u3088\u308A\u5927\u304D\u304F\u8A2D\u5B9A\u3055\u308C\u3066\u3044\u307E\u3059\u3002
jqlc.codegeneration.resultExpr.missingpkfields=JDO79505: \u30B5\u30DD\u30FC\u30C8\u3055\u308C\u306A\u3044COUNT\u5F0F\u3067\u3059\u3002\u5F0F\u306E\u578B''{0}''\u306F\u4E3B\u30AD\u30FC\u30FB\u30D5\u30A3\u30FC\u30EB\u30C9\u3092\u6301\u305F\u306A\u3044\u6C38\u7D9A\u53EF\u80FD\u30AF\u30E9\u30B9\u3067\u3059\u3002

#############################################################################
#<Miscellaneous>
# Message ID Range: JDO79600 - JDO79699
#############################################################################
# {0} - RetrieveDesc info
LOG_JQLCDumpRD=JDO79600: JQLC dump RetrieveDesc {0}

# variable table

jqlc.variabletable.markconstraint.multiple=JDO79601: \u5909\u6570''{0}''\u306B\u8907\u6570\u306E\u5236\u7D04\u304C\u3042\u308A\u307E\u3059\u3002
jqlc.variabletable.checkconstraint.unused=JDO79602: \u5909\u6570''{0}''\u306F\u5B9A\u7FA9\u3055\u308C\u3066\u3044\u307E\u3059\u304C\u3001\u4F7F\u7528\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002
jqlc.variabletable.checkconstraint.cycle=JDO79603: \u5909\u6570''{0}''\u306E\u5FAA\u74B0\u5236\u7D04\u5B9A\u7FA9\u306F\u30B5\u30DD\u30FC\u30C8\u3055\u308C\u307E\u305B\u3093\u3002
jqlc.variabletable.merge.different=JDO79604: \u540C\u3058\u5909\u6570''{0}''\u306E\u5236\u7D04\u304C\u7570\u306A\u308A\u307E\u3059\u3002


###############################################################################
# <NOI18N: These messages are used for JDOFatalInternalException. These are not
# for end user. There is no message ID.>
###############################################################################
#
# <NOI18N>
#
jqlc.jqlc.checkcandidates.nullpc=Persistence capable class of extent collection is null.

jqlc.parser.invalidunicodestr=JQLLexer.UNICODE_STR 

jqlc.parametertable.getvaluebyname.undefined=ParameterTable.getValueByName: undefined parameter {0}.
jqlc.parametertable.getvaluebyindex.wrongindex=ParameterTable.getValueByIndex: wrong index {0}.
jqlc.parametertable.definevaluebyindex.wrongindex=ParameterTable.defineValueByIndex: wrong index {0}.

jqlc.semantic.checkcandidateclass.unknowntype=Semantic.checkCandidateClass: unknown type {0}.
jqlc.semantic.analysedefinedidentifier.illegalident=Semantic.analyseDefinedIdentifier: illegal identifier definition {0}.
jqlc.semantic.getcollectionfield.missingchildren=Semantic.getCollectionField: invalid node structure children missing.

jqlc.optimizer.checkbinaryplusop.invalidtype=Optimizer.checkBinaryPlusOp: invalid type {0}.
jqlc.optimizer.checkbinaryminusop.invalidtype=Optimizer.checkBinaryMinusOp: invalid type {0}.
jqlc.optimizer.checkmultiplicationop.invalidtype=Optimizer.checkMultiplicationOp: invalid type {0}.
jqlc.optimizer.checkdivisionop.invalidtype=Optimizer.checkDivisionOp: invalid type {0}.
jqlc.optimizer.checkmodop.invalidtype=Optimizer.checkModOp: invalid type {0}.
jqlc.optimizer.checkunaryminusop.invalidtype=Optimizer.checkUnaryMinusOp: invalid type {0}.
jqlc.optimizer.getbigdecimalvalue.notnumber=Optimizer.getBigDecimalValue: expected number value {0}.
jqlc.optimizer.getbigintegervalue.notnumber=Optimizer.getBigIntegerValue: expected number value {0}.
jqlc.optimizer.isempty.requirecollection=Optimizer.isEmpty: requires collection value.

jqlc.codegeneration.generatesimplefieldvaluecomparison.invalidvalue=CodeGeneration.generateSimpleFieldValueComparison: invalid null value in relational operation.
jqlc.codegeneration.generateparametervaluecomparison.invalidvalue=CodeGeneration.generateParameterValueComparison: invalid null value in relational operation.
jqlc.codegeneration.getkeyfieldscomparisonbooleanop.invalidobj=CodeGeneration.getKeyFieldsComparisonBooleanOp: invalid object comparison operation {0}.
jqlc.codegeneration.filter.nonbooleanvalue=CodeGeneration.filter: invalid non boolean value {0}.
jqlc.codegeneration.primary.null=CodeGeneration.primary: invalid null value.

jqlc.variabletable.markused.varnotfound=VariableTable.markUsed variable {0} not found.
jqlc.variabletable.markused.multidep=VariableTable.markUsed multiple dependencies for variable {0} old: {1}, new: {2}.
jqlc.variabletable.markconstraint.varnotfound=VariableTable.markConstraint variable {0} not found.

jqlc.jdoqlparameterdeclarationparser.next.wrongtoken=ParameterDeclarationHelper.ParameterTypeIterator.next: wrong token type {0} expected PARAMETER_DEF node.

jqlc.queryvaluefetcher.getvalue.invalidparam=Invalid parameter index {0} parameter array has length {1}.
