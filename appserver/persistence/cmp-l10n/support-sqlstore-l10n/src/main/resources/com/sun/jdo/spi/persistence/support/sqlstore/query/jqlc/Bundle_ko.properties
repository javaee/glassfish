#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright (c) 1997-2017 Oracle and/or its affiliates. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common Development
# and Distribution License("CDDL") (collectively, the "License").  You
# may not use this file except in compliance with the License.  You can
# obtain a copy of the License at
# https://oss.oracle.com/licenses/CDDL+GPL-1.1
# or LICENSE.txt.  See the License for the specific
# language governing permissions and limitations under the License.
#
# When distributing the software, include this License Header Notice in each
# file and include the License file at LICENSE.txt.
#
# GPL Classpath Exception:
# Oracle designates this particular file as subject to the "Classpath"
# exception as provided by Oracle in the GPL Version 2 section of the License
# file that accompanied this code.
#
# Modifications:
# If applicable, add the following below the License Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyright [year] [name of copyright owner]"
#
# Contributor(s):
# If you wish your version of this file to be governed by only the CDDL or
# only the GPL Version 2, indicate your decision by adding "[Contributor]
# elects to include this software in this distribution under the [CDDL or GPL
# Version 2] license."  If you don't indicate a single choice of license, a
# recipient has the option to distribute your version of this file under
# either the CDDL, the GPL Version 2 or to extend the choice of license to
# its licensees as provided above.  However, if you add GPL Version 2 code
# and therefore, elected the GPL Version 2 license, then the option applies
# only if the new code is made subject to such option by the copyright
# holder.
#


# resource bundle for runtime messages
# key consists of: <subpackage>.<class>.<method>.<description>
# <subpackage> - is optional, package under runtime
# <class> - class name
# <method> - method name
# <description> - short description (use _ to represent space)
# all keys should be in lowercase
#
# The message ID for a message in persistence is derived as follows:
# JDO<2_digit_bundle_prefix><1_digit_section_number><2_digit_serial_number>
#
# The 2 digit prefix for this bundle is 79.
# 
# This file is divided into following sections. 
# 1. main compiler class
# 2. error message helper class
# 3. syntax error messages
# 4. semantic error messages
# 5. optimizer
# 6. code generation
# 7. Miscellaneous
#
# When adding a new message:
# 1. Please make sure that you add the message to the end of appropriate section.
# 2. Please add message ID to any user visible message.
# 3. The message ID for the new message = message ID for the last numbered 
#    message in a section + 1.
# 4. Please do not change the message ID for existing messages. These 
#    numbers are potentially mapped to more explanation about the message for 
#    the end user.
#

##############################################################################
#<main compiler class>
# Message ID Range: JDO79000 - JDO79099
#############################################################################

jqlc.jqlc.generic.nocandidateclass=JDO79000: \uD6C4\uBCF4 \uD074\uB798\uC2A4 \uC0AC\uC591\uC774 \uB204\uB77D\uB418\uC5C8\uC2B5\uB2C8\uB2E4.
jqlc.jqlc.checkcandidates.memorycollection=JDO79001: \uBE44\uBC94\uC704 \uBAA8\uC74C\uC758 \uC9C8\uC758\uAC00 \uC9C0\uC6D0\uB418\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.
jqlc.jqlc.checkcandidates.mismatch=JDO79002: \uD6C4\uBCF4 \uBAA8\uC74C\uC774 \uD6C4\uBCF4 \uD074\uB798\uC2A4 ''{0}''\uACFC(\uC640) \uC77C\uCE58\uD558\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.
# {0} - name of the compiler pass
LOG_JQLCStartPass=JDO79003: JQLC \uC2DC\uC791 {0}
# {0} - name of the compiler pass
LOG_JQLCDumpTree=JDO79004: JQLC\uC5D0\uC11C \uD2B8\uB9AC {0}\uC744(\uB97C) \uB364\uD504\uD569\uB2C8\uB2E4.
LOG_JQLCReuseRetrieveDesc=JDO79005: JQLC\uC5D0\uC11C \uCE90\uC2DC\uB41C RetrieveDesc\uB97C \uB2E4\uC2DC \uC0AC\uC6A9\uD569\uB2C8\uB2E4.

#############################################################################
#<error message helper class>
#                  it is the last arg for each of them that contains the 
#                  actual message.
#############################################################################
jqlc.errormsg.generic.msg={0}: {1}
jqlc.errormsg.generic.msgcolumn={0} \uC5F4({1}): {2}
jqlc.errormsg.generic.msglinecolumn={0} \uD589({1}) \uC5F4({2}): {3}

#############################################################################
#<syntax error messages>
# Message ID Range: JDO79100 - JDO79199
#############################################################################

jqlc.parser.syntaxerror=JDO79100: \uAD6C\uBB38 \uC624\uB958\uC785\uB2C8\uB2E4.
jqlc.parser.syntaxerrorattoken=JDO79101: ''{0}''\uC5D0 \uAD6C\uBB38 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.
jqlc.parser.unexpectedtoken=JDO79102: \uAD6C\uBB38 \uC624\uB958. \uC608\uAE30\uCE58 \uC54A\uC740 \uD1A0\uD070 ''{0}''.
jqlc.parser.unexpectedchar=JDO79103: \uAD6C\uBB38 \uC624\uB958. \uC608\uAE30\uCE58 \uC54A\uC740 \uBB38\uC790 ''{0}''.
jqlc.parser.expectedfoundchar=JDO79104: \uAD6C\uBB38 \uC624\uB958. \uC608\uC0C1 \uBB38\uC790 ''{0}'', \uCC3E\uC740 \uBB38\uC790 ''{1}''.
jqlc.parser.unexpectedEOF=JDO79105: \uC608\uAE30\uCE58 \uC54A\uC740 \uD14D\uC2A4\uD2B8 \uC885\uB8CC \uAD6C\uBB38 \uC624\uB958

#############################################################################
#<semantic error messages>
# Message ID Range: JDO7109200 - JDO79399
#############################################################################

# semantic error messages (unsupported operations)

jqlc.semantic.analysebitwiseexpr.exclusiveorop=JDO79200: Exclusive \uB610\uB294 \uC5F0\uC0B0\uC790 ^\uB294 \uC9C0\uC6D0\uB418\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.
jqlc.semantic.analysebitwiseexpr.integerbitwiseop=JDO79201: \uC815\uC218 \uBE44\uD2B8 \uC5F0\uC0B0\uC790 {0}\uC740(\uB294) \uC9C0\uC6D0\uB418\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.
jqlc.semantic.analysecollectioncall.unsupportedcollectionexpr=JDO79202: \uBAA8\uC74C \uD45C\uD604\uC2DD ''{0}''\uC740(\uB294) \uC9C0\uC6D0\uB418\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.
jqlc.semantic.analysecollectioncall.nonvariable=JDO79203: \uBCC0\uC218\uAC00 \uC608\uC0C1\uB418\uC5C8\uC2B5\uB2C8\uB2E4. non \uBCC0\uC218\uC5D0 \uC9C0\uC6D0\uB418\uC9C0 \uC54A\uB294 \uC778\uC218\uAC00 \uC788\uC2B5\uB2C8\uB2E4.
jqlc.semantic.generic.unsupportedconstraintop=JDO79204: \uBCC0\uC218 \uC81C\uC57D \uC870\uAC74 \uC808\uC5D0 \uC791\uC5C5 ''{0}''\uC774(\uAC00) \uC9C0\uC6D0\uB418\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.
jqlc.semantic.candidateclass.nonpc=JDO79205: ''{0}'' \uD074\uB798\uC2A4\uB294 \uC9C0\uC18D\uC131\uC774 \uC5C6\uC2B5\uB2C8\uB2E4. \uBE44\uC9C0\uC18D\uC131 \uD6C4\uBCF4 \uD074\uB798\uC2A4\uB294 \uC9C8\uC758\uC5D0\uC11C \uC9C0\uC6D0\uB418\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.
jqlc.semantic.checkvalidorderingexpr.invalidordering=JDO79206: \uC21C\uC11C \uC0AC\uC591\uC5D0 \uC9C0\uC6D0\uB418\uC9C0 \uC54A\uB294 \uD45C\uD604\uC2DD ''{0}''\uC774(\uAC00) \uC788\uC2B5\uB2C8\uB2E4.
jqlc.semantic.checkvalidresultexpr.invalidresult=JDO79207: \uACB0\uACFC \uC0AC\uC591\uC5D0 \uC9C0\uC6D0\uB418\uC9C0 \uC54A\uB294 \uD45C\uD604\uC2DD ''{0}''\uC774(\uAC00) \uC788\uC2B5\uB2C8\uB2E4.

# semantic error messages (user errors)

jqlc.semantic.analysecollectioncall.typemismatch=JDO79208: \uBAA8\uC74C \uC694\uC18C \uC720\uD615 ''{0}''\uACFC(\uC640) \uBCC0\uC218 \uC720\uD615 ''{1}''\uC740(\uB294) \uD638\uD658\uB418\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.
jqlc.semantic.analysecollectioncall.relationshipexpected=JDO79209: \uAD00\uACC4 \uD544\uB4DC\uC5D0 ''{0}''\uC774(\uAC00) \uC608\uC0C1\uB429\uB2C8\uB2E4.
jqlc.semantic.analysedotexpr.classexprexpected=JDO79210: \uD074\uB798\uC2A4 \uC720\uD615\uC758 \uD45C\uD604\uC2DD\uC774 \uC608\uC0C1\uB429\uB2C8\uB2E4.
jqlc.semantic.analysefieldaccess.nonperistentfield=JDO79211: \uC9C0\uC18D\uC131\uC774 \uC788\uB294 \uD074\uB798\uC2A4 ''{1}''\uC758 \uBE44\uC9C0\uC18D\uC131 \uD544\uB4DC ''{0}''\uC5D0 \uC561\uC138\uC2A4\uD560 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.
jqlc.semantic.analysefieldaccess.nonpublicfield=JDO79212: \uC9C0\uC18D\uC131\uC774 \uC5C6\uB294 \uD074\uB798\uC2A4 ''{1}''\uC758 \uBE44\uACF5\uC6A9 \uD544\uB4DC ''{0}''\uC5D0 \uC561\uC138\uC2A4\uD560 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.
jqlc.semantic.analysestaticfieldaccess.staticreference=JDO79213: ''{1}'' \uD074\uB798\uC2A4\uC758 \uBE44\uC815\uC801 \uBCC0\uC218 ''{0}''\uC5D0 \uB300\uD55C \uC815\uC801 \uCC38\uC870\uB97C \uB9CC\uB4E4 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.
jqlc.semantic.analysestaticfieldaccess.nonpublicfield=JDO79214: ''{1}'' \uD074\uB798\uC2A4\uC758 \uBE44\uACF5\uC6A9 \uC815\uC801 \uD544\uB4DC ''{0}''\uC5D0 \uC561\uC138\uC2A4\uD560 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.
jqlc.semantic.analyserelationalexpr.notorderable=JDO79215: {1}\uC758 \uD53C\uC5F0\uC0B0\uC790 \uC720\uD615 ''{0}''\uC740(\uB294) \uC815\uB82C\uD560 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.
jqlc.semantic.expression.undefined=JDO79216: ''{0}'' \uD45C\uD604\uC2DD\uC740 \uC815\uC758\uB418\uC9C0 \uC54A\uC558\uC2B5\uB2C8\uB2E4.
jqlc.semantic.filter.booleanexpected=JDO79217: \uBD80\uC6B8 \uD45C\uD604\uC2DD\uC774 \uC608\uC0C1\uB418\uC5C8\uC2B5\uB2C8\uB2E4. \uD544\uD130 \uD45C\uD604\uC2DD\uC758 \uC720\uD615\uC740 ''{0}''\uC785\uB2C8\uB2E4.
jqlc.semantic.generic.alreadydeclared=JDO79218: ''{0}''\uC774(\uAC00) \uC774\uBBF8 {1}(\uC73C)\uB85C \uC120\uC5B8\uB418\uC5C8\uC2B5\uB2C8\uB2E4.
jqlc.semantic.generic.arguments.numbermismatch=JDO79219: \uC778\uC218\uC758 \uC218\uAC00 \uC798\uBABB\uB418\uC5C8\uC2B5\uB2C8\uB2E4.
jqlc.semantic.generic.arguments.typemismatch=JDO79220: \uD638\uD658\uB418\uC9C0 \uC54A\uB294 \uC720\uD615\uC758 \uC2E4\uC81C \uB9E4\uAC1C\uBCC0\uC218\uC785\uB2C8\uB2E4. ''{0}''\uC744(\uB97C) ''{1}''(\uC73C)\uB85C \uBCC0\uD658\uD560 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.
jqlc.semantic.generic.arguments.invalid=JDO79221: ''{0}''\uC758 \uC778\uC218\uAC00 \uBD80\uC801\uD569\uD569\uB2C8\uB2E4.
jqlc.semantic.generic.invalidmethodcall=JDO79222: \uBD80\uC801\uD569\uD55C \uBA54\uC18C\uB4DC \uD638\uCD9C\uC785\uB2C8\uB2E4.
jqlc.semantic.generic.unknownfield=JDO79223: ''{1}'' \uD074\uB798\uC2A4\uC5D0 ''{0}'' \uD544\uB4DC\uAC00 \uC815\uC758\uB418\uC9C0 \uC54A\uC558\uC2B5\uB2C8\uB2E4.
jqlc.semantic.generic.unknowntype=JDO79224: ''{0}'' \uC720\uD615\uC744 \uC54C \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.
jqlc.semantic.identifier.undefined=JDO79225: ''{0}'' \uC2DD\uBCC4\uC790\uAC00 \uC815\uC758\uB418\uC9C0 \uC54A\uC558\uC2B5\uB2C8\uB2E4.
jqlc.semantic.primary.invalidcast=JDO79226: ''{0}'' \uC720\uD615\uC758 \uD45C\uD604\uC2DD\uC744 ''{1}'' \uC720\uD615\uC73C\uB85C \uCE90\uC2A4\uD2B8\uD560 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.
jqlc.semantic.type.notype=JDO79227: \uC608\uC0C1\uB41C \uC720\uD615 ''{0}''\uC740(\uB294) {1}(\uC73C)\uB85C \uC815\uC758\uB418\uC5C8\uC2B5\uB2C8\uB2E4.
jqlc.semantic.analyseorderingexpression.notorderable=JDO79228: \uC21C\uC11C \uD45C\uD604\uC2DD\uC758 ''{0}'' \uC720\uD615\uC740 \uC815\uB82C\uD560 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.
jqlc.semantic.checkvalidresultexpr.invalidavgsumexpr=JDO79229: \uD569\uACC4\uC2DD ''{1}''\uC758 ''{0}'' \uC720\uD615\uC740 \uC22B\uC790 \uB610\uB294 \uBB38\uC790 \uC720\uD615\uC774 \uC544\uB2D9\uB2C8\uB2E4.
jqlc.semantic.checkvalidresultexpr.invalidminmaxexpr=JDO79230: \uD569\uACC4\uC2DD ''{1}''\uC758 ''{0}'' \uC720\uD615\uC740 \uC815\uB82C\uD560 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.
jqlc.semantic.checkresultordering.invalidorderingfordistinctresultfield=JDO79231: distinct \uACB0\uACFC \uD544\uB4DC \uD45C\uD604\uC2DD ''{0}''\uACFC(\uC640) \uC21C\uC11C \uD45C\uD604\uC2DD ''{1}''\uC740(\uB294) \uD638\uD658\uB418\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4. \uAC19\uC740 \uD544\uB4DC\uC5EC\uC57C \uD569\uB2C8\uB2E4.
jqlc.semantic.checkresultordering.invalidorderingfordistinctresult=JDO79232: \uACB0\uACFC \uD45C\uD604\uC2DD ''distinct {0}''\uC640(\uACFC) ''{1}''\uC740(\uB294) \uD638\uD658\uB418\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4. \uD074\uB798\uC2A4\uC5D0 \uB300\uD55C \uAC19\uC740 \uD0D0\uC0C9 \uD45C\uD604\uC2DD\uC744 \uC0AC\uC6A9\uD558\uB294 \uAC19\uC740 \uD074\uB798\uC2A4\uC758 \uD544\uB4DC\uC5EC\uC57C \uD569\uB2C8\uB2E4.

# query parameter table

jqlc.parametertable.checkunboundparams.unboundparam=JDO79233: \uBC14\uC778\uB4DC\uB418\uC9C0 \uC54A\uC740 \uC9C8\uC758 \uB9E4\uAC1C\uBCC0\uC218 ''{0}''\uC785\uB2C8\uB2E4.
jqlc.parametertable.definevaluebyname.undefinedparam=JDO79234: \uC815\uC758\uB418\uC9C0 \uC54A\uC740 \uC9C8\uC758 \uB9E4\uAC1C\uBCC0\uC218 ''{0}''\uC785\uB2C8\uB2E4.
jqlc.parametertable.definevaluebyindex.wrongnumberofargs=JDO79235: \uC778\uC218\uC758 \uC218\uAC00 \uC798\uBABB\uB418\uC5C8\uC2B5\uB2C8\uB2E4.
jqlc.parametertable.definevaluebyindex.typemismatch=JDO79236: \uD638\uD658\uB418\uC9C0 \uC54A\uB294 \uC720\uD615\uC758 \uC2E4\uC81C \uB9E4\uAC1C\uBCC0\uC218\uC785\uB2C8\uB2E4. ''{0}''\uC744(\uB97C) ''{1}''(\uC73C)\uB85C \uBCC0\uD658\uD560 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.

#############################################################################
#<optimizer>
# Message ID Range: JDO79400 - JDO79499
#############################################################################

jqlc.optimizer.staticfieldaccess.illegal=JDO79400: ''{1}'' \uD074\uB798\uC2A4\uC758 \uC815\uC801 \uD544\uB4DC ''{0}''\uC5D0 \uC561\uC138\uC2A4\uD560 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.
jqlc.optimizer.literal.invalid=JDO79401: {0} \uB9AC\uD130\uB7F4 ''{1}''\uC774(\uAC00) \uBD80\uC801\uD569\uD569\uB2C8\uB2E4.

#############################################################################
#<code generation>
# Message ID Range: JDO79500 - JDO79599
#############################################################################

jqlc.codegeneration.fieldaccess.illegal=JDO79500: ''{1}'' \uAC1D\uCCB4\uC758 ''{0}'' \uD544\uB4DC\uC5D0 \uC561\uC138\uC2A4\uD560 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.
jqlc.codegeneration.collectioncomparison.nonnull=JDO79501: \uBAA8\uC74C\uACFC \uB110\uC774 \uC544\uB2CC \uAC12\uC758 \uBE44\uAD50\uB294 \uC9C0\uC6D0\uB418\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.
jqlc.codegeneration.generic.unsupportedop=JDO79502: ''{0}'' \uC791\uC5C5\uC740 \uC9C0\uC6D0\uB418\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.
jqlc.codegeneration.substring.beginnegative=JDO79503: \uD558\uC704 \uBB38\uC790\uC5F4 \uBA54\uC18C\uB4DC\uC758 \uC2DC\uC791 \uC0C9\uC778 ''{0}''\uC774(\uAC00) \uC74C\uC218\uC785\uB2C8\uB2E4.
jqlc.codegeneration.substring.beginlargerend=JDO79504: \uD558\uC704 \uBB38\uC790\uC5F4 \uBA54\uC18C\uB4DC\uC758 \uC2DC\uC791 \uC0C9\uC778 ''{0}''\uC774(\uAC00) \uC885\uB8CC \uC0C9\uC778 ''{1}''\uBCF4\uB2E4 \uD07D\uB2C8\uB2E4.
jqlc.codegeneration.resultExpr.missingpkfields=JDO79505: COUNT \uD45C\uD604\uC2DD\uC740 \uC9C0\uC6D0\uB418\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4. \uD45C\uD604\uC2DD \uC720\uD615 ''{0}''\uC740(\uB294) \uAE30\uBCF8 \uD0A4 \uD544\uB4DC\uAC00 \uC5C6\uB294 \uC9C0\uC18D\uC131\uC774 \uC788\uB294 \uD074\uB798\uC2A4\uC785\uB2C8\uB2E4.

#############################################################################
#<Miscellaneous>
# Message ID Range: JDO79600 - JDO79699
#############################################################################
# {0} - RetrieveDesc info
LOG_JQLCDumpRD=JDO79600: JQLC\uC5D0\uC11C RetrieveDesc {0}\uC744(\uB97C) \uB364\uD504\uD569\uB2C8\uB2E4.

# variable table

jqlc.variabletable.markconstraint.multiple=JDO79601: \uBCC0\uC218 ''{0}''\uC758 \uBCF5\uC218 \uC81C\uC57D \uC870\uAC74\uC785\uB2C8\uB2E4.
jqlc.variabletable.checkconstraint.unused=JDO79602: \uBCC0\uC218 ''{0}''\uC774(\uAC00) \uC815\uC758\uB418\uC5C8\uC9C0\uB9CC \uC0AC\uC6A9\uB418\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.
jqlc.variabletable.checkconstraint.cycle=JDO79603: \uBCC0\uC218 ''{0}''\uC5D0 \uC9C0\uC6D0\uB418\uC9C0 \uC54A\uB294 \uC21C\uD658 \uC81C\uC57D \uC870\uAC74 \uC815\uC758\uAC00 \uC788\uC2B5\uB2C8\uB2E4.
jqlc.variabletable.merge.different=JDO79604: \uAC19\uC740 \uBCC0\uC218 ''{0}''\uC5D0 \uB2E4\uB978 \uC81C\uC57D \uC870\uAC74\uC774 \uC788\uC2B5\uB2C8\uB2E4.


###############################################################################
# <NOI18N: These messages are used for JDOFatalInternalException. These are not
# for end user. There is no message ID.>
###############################################################################
#
# <NOI18N>
#
jqlc.jqlc.checkcandidates.nullpc=\uBC94\uC704 \uBAA8\uC74C\uC758 \uC9C0\uC18D\uC131\uC774 \uC788\uB294 \uD074\uB798\uC2A4\uAC00 \uB110\uC785\uB2C8\uB2E4.

jqlc.parser.invalidunicodestr=JQLLexer.UNICODE_STR 

jqlc.parametertable.getvaluebyname.undefined=ParameterTable.getValueByName: \uC815\uC758\uB418\uC9C0 \uC54A\uC740 \uB9E4\uAC1C\uBCC0\uC218 {0}.
jqlc.parametertable.getvaluebyindex.wrongindex=ParameterTable.getValueByIndex: \uC798\uBABB\uB41C \uC778\uB371\uC2A4 {0}.
jqlc.parametertable.definevaluebyindex.wrongindex=ParameterTable.defineValueByIndex: \uC798\uBABB\uB41C \uC778\uB371\uC2A4 {0}.

jqlc.semantic.checkcandidateclass.unknowntype=Semantic.checkCandidateClass: \uC54C \uC218 \uC5C6\uB294 \uC720\uD615 {0}.
jqlc.semantic.analysedefinedidentifier.illegalident=Semantic.analyseDefinedIdentifier: \uC798\uBABB\uB41C \uC2DD\uBCC4\uC790 \uC815\uC758 {0}.
jqlc.semantic.getcollectionfield.missingchildren=Semantic.getCollectionField: \uBD80\uC801\uD569\uD55C \uB178\uB4DC \uAD6C\uC870 \uD558\uC704 \uD56D\uBAA9 \uB204\uB77D.

jqlc.optimizer.checkbinaryplusop.invalidtype=Optimizer.checkBinaryPlusOp: \uBD80\uC801\uD569\uD55C \uC720\uD615 {0}.
jqlc.optimizer.checkbinaryminusop.invalidtype=Optimizer.checkBinaryMinusOp: \uBD80\uC801\uD569\uD55C \uC720\uD615 {0}.
jqlc.optimizer.checkmultiplicationop.invalidtype=Optimizer.checkMultiplicationOp: \uBD80\uC801\uD569\uD55C \uC720\uD615 {0}.
jqlc.optimizer.checkdivisionop.invalidtype=Optimizer.checkDivisionOp: \uBD80\uC801\uD569\uD55C \uC720\uD615 {0}.
jqlc.optimizer.checkmodop.invalidtype=Optimizer.checkModOp: \uBD80\uC801\uD569\uD55C \uC720\uD615 {0}.
jqlc.optimizer.checkunaryminusop.invalidtype=Optimizer.checkUnaryMinusOp: \uBD80\uC801\uD569\uD55C \uC720\uD615 {0}.
jqlc.optimizer.getbigdecimalvalue.notnumber=Optimizer.getBigDecimalValue: \uD544\uC694\uD55C \uC22B\uC790 \uAC12 {0}.
jqlc.optimizer.getbigintegervalue.notnumber=Optimizer.getBigIntegerValue: \uD544\uC694\uD55C \uC22B\uC790 \uAC12 {0}.
jqlc.optimizer.isempty.requirecollection=Optimizer.isEmpty: \uBAA8\uC74C \uAC12\uC774 \uD544\uC694\uD569\uB2C8\uB2E4.

jqlc.codegeneration.generatesimplefieldvaluecomparison.invalidvalue=CodeGeneration.generateSimpleFieldValueComparison: \uAD00\uACC4 \uC5F0\uC0B0\uC758 \uBD80\uC801\uD569\uD55C \uB110 \uAC12.
jqlc.codegeneration.generateparametervaluecomparison.invalidvalue=CodeGeneration.generateParameterValueComparison: \uAD00\uACC4 \uC5F0\uC0B0\uC758 \uBD80\uC801\uD569\uD55C \uB110 \uAC12.
jqlc.codegeneration.getkeyfieldscomparisonbooleanop.invalidobj=CodeGeneration.getKeyFieldsComparisonBooleanOp: \uBD80\uC801\uD569\uD55C \uAC1D\uCCB4 \uBE44\uAD50 \uC5F0\uC0B0 {0}.
jqlc.codegeneration.filter.nonbooleanvalue=CodeGeneration.filter: \uBD80\uC801\uD569\uD55C \uBE44\uBD80\uC6B8 \uAC12 {0}.
jqlc.codegeneration.primary.null=CodeGeneration.primary: \uBD80\uC801\uD569\uD55C \uB110 \uAC12.

jqlc.variabletable.markused.varnotfound=VariableTable.markUsed \uBCC0\uC218 {0}\uC744(\uB97C) \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.
jqlc.variabletable.markused.multidep=VariableTable.markUsed \uBCC0\uC218 {0}\uC5D0 \uB300\uD55C \uC5EC\uB7EC \uC885\uC18D\uC131 - \uC774\uC804: {1}, \uC2E0\uADDC: {2}.
jqlc.variabletable.markconstraint.varnotfound=VariableTable.markConstraint \uBCC0\uC218 {0}\uC744(\uB97C) \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.

jqlc.jdoqlparameterdeclarationparser.next.wrongtoken=ParameterDeclarationHelper.ParameterTypeIterator.next: \uC798\uBABB\uB41C \uD1A0\uD070 \uC720\uD615 {0} - PARAMETER_DEF \uB178\uB4DC\uAC00 \uD544\uC694\uD569\uB2C8\uB2E4.

jqlc.queryvaluefetcher.getvalue.invalidparam=\uBD80\uC801\uD569\uD55C \uB9E4\uAC1C\uBCC0\uC218 \uC778\uB371\uC2A4 {0} - \uB9E4\uAC1C\uBCC0\uC218 \uBC30\uC5F4\uC758 \uAE38\uC774\uAC00 {1}\uC785\uB2C8\uB2E4.
