#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright (c) 1997-2017 Oracle and/or its affiliates. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common Development
# and Distribution License("CDDL") (collectively, the "License").  You
# may not use this file except in compliance with the License.  You can
# obtain a copy of the License at
# https://oss.oracle.com/licenses/CDDL+GPL-1.1
# or LICENSE.txt.  See the License for the specific
# language governing permissions and limitations under the License.
#
# When distributing the software, include this License Header Notice in each
# file and include the License file at LICENSE.txt.
#
# GPL Classpath Exception:
# Oracle designates this particular file as subject to the "Classpath"
# exception as provided by Oracle in the GPL Version 2 section of the License
# file that accompanied this code.
#
# Modifications:
# If applicable, add the following below the License Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyright [year] [name of copyright owner]"
#
# Contributor(s):
# If you wish your version of this file to be governed by only the CDDL or
# only the GPL Version 2, indicate your decision by adding "[Contributor]
# elects to include this software in this distribution under the [CDDL or GPL
# Version 2] license."  If you don't indicate a single choice of license, a
# recipient has the option to distribute your version of this file under
# either the CDDL, the GPL Version 2 or to extend the choice of license to
# its licensees as provided above.  However, if you add GPL Version 2 code
# and therefore, elected the GPL Version 2 license, then the option applies
# only if the new code is made subject to such option by the copyright
# holder.
#


# resource bundle for runtime messages
# key consists of: <subpackage>.<class>.<method>.<description>
# <subpackage> - is optional, package under runtime
# <class> - class name
# <method> - method name
# <description> - short description (use _ to represent space)
# all keys should be in lowercase
#
# The message ID for a message in persistence is derived as follows:
# JDO<2_digit_bundle_prefix><1_digit_section_number><2_digit_serial_number>
#
# The 2 digit prefix for this bundle is 79.
# 
# This file is divided into following sections. 
# 1. main compiler class
# 2. error message helper class
# 3. syntax error messages
# 4. semantic error messages
# 5. optimizer
# 6. code generation
# 7. Miscellaneous
#
# When adding a new message:
# 1. Please make sure that you add the message to the end of appropriate section.
# 2. Please add message ID to any user visible message.
# 3. The message ID for the new message = message ID for the last numbered 
#    message in a section + 1.
# 4. Please do not change the message ID for existing messages. These 
#    numbers are potentially mapped to more explanation about the message for 
#    the end user.
#

##############################################################################
#<main compiler class>
# Message ID Range: JDO79000 - JDO79099
#############################################################################

jqlc.jqlc.generic.nocandidateclass=JDO79000: \u7F3A\u5C11\u5019\u9009\u7C7B\u89C4\u8303\u3002
jqlc.jqlc.checkcandidates.memorycollection=JDO79001: \u4E0D\u652F\u6301\u5BF9\u975E\u533A\u96C6\u5408\u7684\u67E5\u8BE2\u3002
jqlc.jqlc.checkcandidates.mismatch=JDO79002: \u5019\u9009\u96C6\u5408\u4E0E\u5019\u9009\u7C7B ''{0}'' \u4E0D\u5339\u914D\u3002
# {0} - name of the compiler pass
LOG_JQLCStartPass=JDO79003: JQLC \u542F\u52A8{0}
# {0} - name of the compiler pass
LOG_JQLCDumpTree=JDO79004: JQLC \u8F6C\u50A8\u6811{0}
LOG_JQLCReuseRetrieveDesc=JDO79005: JQLC \u91CD\u590D\u4F7F\u7528\u9AD8\u901F\u7F13\u5B58\u7684 RetrieveDesc

#############################################################################
#<error message helper class>
#                  it is the last arg for each of them that contains the 
#                  actual message.
#############################################################################
jqlc.errormsg.generic.msg={0}: {1}
jqlc.errormsg.generic.msgcolumn={0} \u5217({1}): {2}
jqlc.errormsg.generic.msglinecolumn={0} \u884C({1}) \u5217({2}): {3}

#############################################################################
#<syntax error messages>
# Message ID Range: JDO79100 - JDO79199
#############################################################################

jqlc.parser.syntaxerror=JDO79100: \u8BED\u6CD5\u9519\u8BEF\u3002
jqlc.parser.syntaxerrorattoken=JDO79101: \u5728 ''{0}'' \u5904\u6709\u8BED\u6CD5\u9519\u8BEF\u3002
jqlc.parser.unexpectedtoken=JDO79102: \u8BED\u6CD5\u9519\u8BEF: \u610F\u5916\u6807\u8BB0 ''{0}''\u3002
jqlc.parser.unexpectedchar=JDO79103: \u8BED\u6CD5\u9519\u8BEF: \u610F\u5916\u5B57\u7B26 ''{0}''\u3002
jqlc.parser.expectedfoundchar=JDO79104: \u8BED\u6CD5\u9519\u8BEF: \u9700\u8981\u5B57\u7B26 ''{0}'', \u5374\u627E\u5230 ''{1}''\u3002
jqlc.parser.unexpectedEOF=JDO79105: \u8BED\u6CD5\u9519\u8BEF\u5BFC\u81F4\u6587\u672C\u610F\u5916\u7ED3\u675F\u3002

#############################################################################
#<semantic error messages>
# Message ID Range: JDO7109200 - JDO79399
#############################################################################

# semantic error messages (unsupported operations)

jqlc.semantic.analysebitwiseexpr.exclusiveorop=JDO79200: \u4E0D\u652F\u6301\u4E92\u65A5\u6216\u8FD0\u7B97\u7B26 ^\u3002
jqlc.semantic.analysebitwiseexpr.integerbitwiseop=JDO79201: \u4E0D\u652F\u6301\u6574\u6570\u6309\u4F4D\u8FD0\u7B97\u7B26 {0}\u3002
jqlc.semantic.analysecollectioncall.unsupportedcollectionexpr=JDO79202: \u4E0D\u652F\u6301\u96C6\u5408\u8868\u8FBE\u5F0F ''{0}''\u3002
jqlc.semantic.analysecollectioncall.nonvariable=JDO79203: \u9700\u8981\u53D8\u91CF - \u4E0D\u652F\u6301\u975E\u53D8\u91CF (\u5305\u542B\u53C2\u6570)\u3002
jqlc.semantic.generic.unsupportedconstraintop=JDO79204: \u53D8\u91CF\u7EA6\u675F\u6761\u4EF6\u5B50\u53E5\u4E0D\u652F\u6301\u64CD\u4F5C ''{0}''\u3002
jqlc.semantic.candidateclass.nonpc=JDO79205: \u7C7B ''{0}'' \u4E0D\u5177\u6709\u6301\u4E45\u6027\u3002\u67E5\u8BE2\u4E0D\u652F\u6301\u4E0D\u5177\u6709\u6301\u4E45\u6027\u7684\u5019\u9009\u7C7B\u3002
jqlc.semantic.checkvalidorderingexpr.invalidordering=JDO79206: \u6392\u5E8F\u89C4\u8303\u4E2D\u4E0D\u652F\u6301\u8868\u8FBE\u5F0F ''{0}''\u3002
jqlc.semantic.checkvalidresultexpr.invalidresult=JDO79207: \u7ED3\u679C\u89C4\u8303\u4E2D\u4E0D\u652F\u6301\u8868\u8FBE\u5F0F ''{0}''\u3002

# semantic error messages (user errors)

jqlc.semantic.analysecollectioncall.typemismatch=JDO79208: \u96C6\u5408\u5143\u7D20\u7C7B\u578B ''{0}'' \u4E0E\u53D8\u91CF\u7C7B\u578B ''{1}'' \u4E0D\u517C\u5BB9\u3002
jqlc.semantic.analysecollectioncall.relationshipexpected=JDO79209: \u5173\u7CFB\u5B57\u6BB5\u9700\u8981 ''{0}''\u3002
jqlc.semantic.analysedotexpr.classexprexpected=JDO79210: \u9700\u8981\u7C7B\u7C7B\u578B\u7684\u8868\u8FBE\u5F0F\u3002
jqlc.semantic.analysefieldaccess.nonperistentfield=JDO79211: \u65E0\u6CD5\u8BBF\u95EE\u5177\u6709\u6301\u4E45\u6027\u7684\u7C7B ''{1}'' \u7684\u975E\u6301\u4E45\u6027\u5B57\u6BB5 ''{0}''\u3002
jqlc.semantic.analysefieldaccess.nonpublicfield=JDO79212: \u65E0\u6CD5\u8BBF\u95EE\u4E0D\u5177\u6709\u6301\u4E45\u6027\u7684\u7C7B ''{1}'' \u7684\u975E\u516C\u5171\u5B57\u6BB5 ''{0}''\u3002
jqlc.semantic.analysestaticfieldaccess.staticreference=JDO79213: \u65E0\u6CD5\u5BF9\u7C7B ''{1}'' \u7684\u975E\u9759\u6001\u53D8\u91CF ''{0}'' \u8FDB\u884C\u9759\u6001\u5F15\u7528\u3002
jqlc.semantic.analysestaticfieldaccess.nonpublicfield=JDO79214: \u65E0\u6CD5\u8BBF\u95EE\u7C7B ''{1}'' \u7684\u975E\u516C\u5171\u9759\u6001\u5B57\u6BB5 ''{0}''\u3002
jqlc.semantic.analyserelationalexpr.notorderable=JDO79215: {1} \u7684\u64CD\u4F5C\u6570\u7C7B\u578B ''{0}'' \u4E0D\u53EF\u6392\u5E8F\u3002
jqlc.semantic.expression.undefined=JDO79216: \u672A\u5B9A\u4E49\u8868\u8FBE\u5F0F ''{0}''\u3002
jqlc.semantic.filter.booleanexpected=JDO79217: \u9700\u8981\u5E03\u5C14\u8868\u8FBE\u5F0F, \u8FC7\u6EE4\u5668\u8868\u8FBE\u5F0F\u5177\u6709\u7C7B\u578B ''{0}''\u3002
jqlc.semantic.generic.alreadydeclared=JDO79218: ''{0}'' \u5DF2\u58F0\u660E\u4E3A {1}\u3002
jqlc.semantic.generic.arguments.numbermismatch=JDO79219: \u53C2\u6570\u6570\u91CF\u9519\u8BEF\u3002
jqlc.semantic.generic.arguments.typemismatch=JDO79220: \u5B9E\u9645\u53C2\u6570\u7C7B\u578B\u4E0D\u517C\u5BB9\u3002\u65E0\u6CD5\u5C06 ''{0}'' \u8F6C\u6362\u4E3A ''{1}''\u3002
jqlc.semantic.generic.arguments.invalid=JDO79221: ''{0}'' \u7684\u53C2\u6570\u65E0\u6548\u3002
jqlc.semantic.generic.invalidmethodcall=JDO79222: \u65B9\u6CD5\u8C03\u7528\u65E0\u6548\u3002
jqlc.semantic.generic.unknownfield=JDO79223: \u672A\u5B9A\u4E49\u7C7B ''{1}'' \u7684\u5B57\u6BB5 ''{0}''\u3002
jqlc.semantic.generic.unknowntype=JDO79224: \u672A\u77E5\u7C7B\u578B ''{0}''\u3002
jqlc.semantic.identifier.undefined=JDO79225: \u672A\u5B9A\u4E49\u6807\u8BC6\u7B26 ''{0}''\u3002
jqlc.semantic.primary.invalidcast=JDO79226: \u65E0\u6CD5\u5C06\u8868\u8FBE\u5F0F\u4ECE\u7C7B\u578B ''{0}'' \u5F3A\u5236\u8F6C\u6362\u4E3A\u7C7B\u578B ''{1}''\u3002
jqlc.semantic.type.notype=JDO79227: \u9700\u8981\u7C7B\u578B, ''{0}'' \u88AB\u5B9A\u4E49\u4E3A {1}\u3002
jqlc.semantic.analyseorderingexpression.notorderable=JDO79228: \u6392\u5E8F\u8868\u8FBE\u5F0F\u7684\u7C7B\u578B ''{0}'' \u4E0D\u53EF\u6392\u5E8F\u3002
jqlc.semantic.checkvalidresultexpr.invalidavgsumexpr=JDO79229: ''{1}'' \u805A\u96C6\u8868\u8FBE\u5F0F\u7684\u7C7B\u578B ''{0}'' \u4E0D\u662F\u6570\u5B57\u6216\u5B57\u7B26\u7C7B\u578B\u3002
jqlc.semantic.checkvalidresultexpr.invalidminmaxexpr=JDO79230: ''{1}'' \u805A\u96C6\u8868\u8FBE\u5F0F\u7684\u7C7B\u578B ''{0}'' \u4E0D\u53EF\u6392\u5E8F\u3002
jqlc.semantic.checkresultordering.invalidorderingfordistinctresultfield=JDO79231: distinct \u7ED3\u679C\u5B57\u6BB5\u8868\u8FBE\u5F0F ''{0}'' \u4E0E\u6392\u5E8F\u8868\u8FBE\u5F0F ''{1}'' \u4E0D\u517C\u5BB9\u3002\u5B83\u4EEC\u5FC5\u987B\u4E3A\u76F8\u540C\u5B57\u6BB5\u3002
jqlc.semantic.checkresultordering.invalidorderingfordistinctresult=JDO79232: \u7ED3\u679C\u8868\u8FBE\u5F0F ''distinct {0}'' \u4E0E\u6392\u5E8F\u8868\u8FBE\u5F0F ''{1}'' \u4E0D\u517C\u5BB9\u3002\u5B83\u4EEC\u5FC5\u987B\u4E3A\u540C\u4E00\u7C7B\u4E2D\u7684\u5B57\u6BB5, \u5BF9\u8BE5\u7C7B\u4F7F\u7528\u76F8\u540C\u7684\u5BFC\u822A\u8868\u8FBE\u5F0F\u3002

# query parameter table

jqlc.parametertable.checkunboundparams.unboundparam=JDO79233: \u67E5\u8BE2\u53C2\u6570 ''{0}'' \u65E0\u754C\u9650\u3002
jqlc.parametertable.definevaluebyname.undefinedparam=JDO79234: \u672A\u5B9A\u4E49\u67E5\u8BE2\u53C2\u6570 ''{0}''\u3002
jqlc.parametertable.definevaluebyindex.wrongnumberofargs=JDO79235: \u53C2\u6570\u6570\u91CF\u9519\u8BEF\u3002
jqlc.parametertable.definevaluebyindex.typemismatch=JDO79236: \u5B9E\u9645\u53C2\u6570\u7C7B\u578B\u4E0D\u517C\u5BB9\u3002\u65E0\u6CD5\u5C06 ''{0}'' \u8F6C\u6362\u4E3A ''{1}''\u3002

#############################################################################
#<optimizer>
# Message ID Range: JDO79400 - JDO79499
#############################################################################

jqlc.optimizer.staticfieldaccess.illegal=JDO79400: \u65E0\u6CD5\u8BBF\u95EE\u7C7B ''{1}'' \u7684\u9759\u6001\u5B57\u6BB5 ''{0}''\u3002
jqlc.optimizer.literal.invalid=JDO79401: {0} \u7684\u6587\u5B57\u503C ''{1}'' \u65E0\u6548\u3002

#############################################################################
#<code generation>
# Message ID Range: JDO79500 - JDO79599
#############################################################################

jqlc.codegeneration.fieldaccess.illegal=JDO79500: \u65E0\u6CD5\u8BBF\u95EE\u5BF9\u8C61 ''{1}'' \u7684\u5B57\u6BB5 ''{0}''\u3002
jqlc.codegeneration.collectioncomparison.nonnull=JDO79501: \u4E0D\u652F\u6301\u96C6\u5408\u4E0E\u975E\u7A7A\u503C\u8FDB\u884C\u6BD4\u8F83\u3002
jqlc.codegeneration.generic.unsupportedop=JDO79502: \u4E0D\u652F\u6301\u64CD\u4F5C ''{0}''
jqlc.codegeneration.substring.beginnegative=JDO79503: substring \u65B9\u6CD5\u7684\u5F00\u59CB\u7D22\u5F15 ''{0}'' \u4E3A\u8D1F\u503C\u3002
jqlc.codegeneration.substring.beginlargerend=JDO79504: substring \u65B9\u6CD5\u7684\u5F00\u59CB\u7D22\u5F15 ''{0}'' \u5927\u4E8E\u7ED3\u675F\u7D22\u5F15 ''{1}''\u3002
jqlc.codegeneration.resultExpr.missingpkfields=JDO79505: \u4E0D\u652F\u6301\u7684 COUNT \u8868\u8FBE\u5F0F\u3002\u8868\u8FBE\u5F0F\u7C7B\u578B ''{0}'' \u4E3A\u5177\u6709\u6301\u4E45\u6027\u7684\u4E0D\u5E26\u4E3B\u952E\u5B57\u6BB5\u7684\u7C7B\u3002

#############################################################################
#<Miscellaneous>
# Message ID Range: JDO79600 - JDO79699
#############################################################################
# {0} - RetrieveDesc info
LOG_JQLCDumpRD=JDO79600: JQLC \u8F6C\u50A8 RetrieveDesc {0}

# variable table

jqlc.variabletable.markconstraint.multiple=JDO79601: \u53D8\u91CF ''{0}'' \u7684\u591A\u4E2A\u7EA6\u675F\u6761\u4EF6\u3002
jqlc.variabletable.checkconstraint.unused=JDO79602: \u53D8\u91CF ''{0}'' \u5DF2\u5B9A\u4E49, \u4F46\u672A\u4F7F\u7528\u3002
jqlc.variabletable.checkconstraint.cycle=JDO79603: \u4E0D\u652F\u6301\u7528\u4E8E\u53D8\u91CF ''{0}'' \u7684\u5FAA\u73AF\u7EA6\u675F\u6761\u4EF6\u5B9A\u4E49\u3002
jqlc.variabletable.merge.different=JDO79604: \u4E0D\u540C\u7EA6\u675F\u6761\u4EF6\u7528\u4E8E\u540C\u4E00\u53D8\u91CF ''{0}''\u3002


###############################################################################
# <NOI18N: These messages are used for JDOFatalInternalException. These are not
# for end user. There is no message ID.>
###############################################################################
#
# <NOI18N>
#
jqlc.jqlc.checkcandidates.nullpc=\u533A\u96C6\u5408\u5177\u6709\u6301\u4E45\u6027\u7684\u7C7B\u4E3A\u7A7A\u503C\u3002

jqlc.parser.invalidunicodestr=JQLLexer.UNICODE_STR 

jqlc.parametertable.getvaluebyname.undefined=ParameterTable.getValueByName: \u672A\u5B9A\u4E49\u7684\u53C2\u6570 {0}\u3002
jqlc.parametertable.getvaluebyindex.wrongindex=ParameterTable.getValueByIndex: \u9519\u8BEF\u7684\u7D22\u5F15 {0}\u3002
jqlc.parametertable.definevaluebyindex.wrongindex=ParameterTable.defineValueByIndex: \u9519\u8BEF\u7684\u7D22\u5F15 {0}\u3002

jqlc.semantic.checkcandidateclass.unknowntype=Semantic.checkCandidateClass: \u672A\u77E5\u7C7B\u578B {0}\u3002
jqlc.semantic.analysedefinedidentifier.illegalident=Semantic.analyseDefinedIdentifier: \u975E\u6CD5\u7684\u6807\u8BC6\u7B26\u5B9A\u4E49 {0}\u3002
jqlc.semantic.getcollectionfield.missingchildren=Semantic.getCollectionField: \u8282\u70B9\u7ED3\u6784\u65E0\u6548, \u7F3A\u5C11\u5B50\u9879\u3002

jqlc.optimizer.checkbinaryplusop.invalidtype=Optimizer.checkBinaryPlusOp: \u7C7B\u578B {0} \u65E0\u6548\u3002
jqlc.optimizer.checkbinaryminusop.invalidtype=Optimizer.checkBinaryMinusOp: \u7C7B\u578B {0} \u65E0\u6548\u3002
jqlc.optimizer.checkmultiplicationop.invalidtype=Optimizer.checkMultiplicationOp: \u7C7B\u578B {0} \u65E0\u6548\u3002
jqlc.optimizer.checkdivisionop.invalidtype=Optimizer.checkDivisionOp: \u7C7B\u578B {0} \u65E0\u6548\u3002
jqlc.optimizer.checkmodop.invalidtype=Optimizer.checkModOp: \u7C7B\u578B {0} \u65E0\u6548\u3002
jqlc.optimizer.checkunaryminusop.invalidtype=Optimizer.checkUnaryMinusOp: \u7C7B\u578B {0} \u65E0\u6548\u3002
jqlc.optimizer.getbigdecimalvalue.notnumber=Optimizer.getBigDecimalValue: \u6240\u9700\u7684\u6570\u503C {0}\u3002
jqlc.optimizer.getbigintegervalue.notnumber=Optimizer.getBigIntegerValue: \u6240\u9700\u7684\u6570\u503C\u4E3A {0}\u3002
jqlc.optimizer.isempty.requirecollection=Optimizer.isEmpty: \u9700\u8981\u96C6\u5408\u503C\u3002

jqlc.codegeneration.generatesimplefieldvaluecomparison.invalidvalue=CodeGeneration.generateSimpleFieldValueComparison: \u5173\u7CFB\u64CD\u4F5C\u4E2D\u7684\u65E0\u6548\u7A7A\u503C\u3002
jqlc.codegeneration.generateparametervaluecomparison.invalidvalue=CodeGeneration.generateParameterValueComparison: \u5173\u7CFB\u64CD\u4F5C\u4E2D\u7684\u65E0\u6548\u7A7A\u503C\u3002
jqlc.codegeneration.getkeyfieldscomparisonbooleanop.invalidobj=CodeGeneration.getKeyFieldsComparisonBooleanOp: \u5BF9\u8C61\u6BD4\u8F83\u64CD\u4F5C {0} \u65E0\u6548\u3002
jqlc.codegeneration.filter.nonbooleanvalue=CodeGeneration.filter: \u975E\u5E03\u5C14\u503C {0} \u65E0\u6548\u3002
jqlc.codegeneration.primary.null=CodeGeneration.primary: \u7A7A\u503C\u65E0\u6548\u3002

jqlc.variabletable.markused.varnotfound=\u627E\u4E0D\u5230 VariableTable.markUsed \u53D8\u91CF {0}\u3002
jqlc.variabletable.markused.multidep=\u53D8\u91CF {0} \u7684 VariableTable.markUsed \u591A\u76F8\u5173\u6027, \u65E7\u503C: {1}, \u65B0\u503C: {2}\u3002
jqlc.variabletable.markconstraint.varnotfound=\u627E\u4E0D\u5230 VariableTable.markConstraint \u53D8\u91CF {0}\u3002

jqlc.jdoqlparameterdeclarationparser.next.wrongtoken=ParameterDeclarationHelper.ParameterTypeIterator.next: \u9519\u8BEF\u7684\u6807\u8BB0\u7C7B\u578B {0}, \u9700\u8981 PARAMETER_DEF \u8282\u70B9\u3002

jqlc.queryvaluefetcher.getvalue.invalidparam=\u53C2\u6570\u7D22\u5F15{0}\u65E0\u6548, \u53C2\u6570\u6570\u7EC4\u957F\u5EA6\u4E3A {1}\u3002
