#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright (c) 1997-2017 Oracle and/or its affiliates. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common Development
# and Distribution License("CDDL") (collectively, the "License").  You
# may not use this file except in compliance with the License.  You can
# obtain a copy of the License at
# https://oss.oracle.com/licenses/CDDL+GPL-1.1
# or LICENSE.txt.  See the License for the specific
# language governing permissions and limitations under the License.
#
# When distributing the software, include this License Header Notice in each
# file and include the License file at LICENSE.txt.
#
# GPL Classpath Exception:
# Oracle designates this particular file as subject to the "Classpath"
# exception as provided by Oracle in the GPL Version 2 section of the License
# file that accompanied this code.
#
# Modifications:
# If applicable, add the following below the License Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyright [year] [name of copyright owner]"
#
# Contributor(s):
# If you wish your version of this file to be governed by only the CDDL or
# only the GPL Version 2, indicate your decision by adding "[Contributor]
# elects to include this software in this distribution under the [CDDL or GPL
# Version 2] license."  If you don't indicate a single choice of license, a
# recipient has the option to distribute your version of this file under
# either the CDDL, the GPL Version 2 or to extend the choice of license to
# its licensees as provided above.  However, if you add GPL Version 2 code
# and therefore, elected the GPL Version 2 license, then the option applies
# only if the new code is made subject to such option by the copyright
# holder.
#


# resource bundle for runtime messages
# key consists of: <subpackage>.<class>.<method>.<description>
# <subpackage> - is optional, package under runtime
# <class> - class name
# <method> - method name
# <description> - short description (use _ to represent space)
# all keys should be in lowercase
#
# The message ID for a message in persistence is derived as follows:
# JDO<2_digit_bundle_prefix><1_digit_section_number><2_digit_serial_number>
#
# The 2 digit prefix for this bundle is 79.
# 
# This file is divided into following sections. 
# 1. main compiler class
# 2. error message helper class
# 3. syntax error messages
# 4. semantic error messages
# 5. optimizer
# 6. code generation
# 7. Miscellaneous
#
# When adding a new message:
# 1. Please make sure that you add the message to the end of appropriate section.
# 2. Please add message ID to any user visible message.
# 3. The message ID for the new message = message ID for the last numbered 
#    message in a section + 1.
# 4. Please do not change the message ID for existing messages. These 
#    numbers are potentially mapped to more explanation about the message for 
#    the end user.
#

##############################################################################
#<main compiler class>
# Message ID Range: JDO79000 - JDO79099
#############################################################################

jqlc.jqlc.generic.nocandidateclass=JDO79000\uFF1A\u7F3A\u5C11\u5019\u9078\u985E\u5225\u898F\u683C\u3002
jqlc.jqlc.checkcandidates.memorycollection=JDO79001\uFF1A\u4E0D\u652F\u63F4\u67E5\u8A62\u975E\u5EF6\u4F38\u96C6\u5408\u3002
jqlc.jqlc.checkcandidates.mismatch=JDO79002\uFF1A\u5019\u9078\u96C6\u5408\u8207\u5019\u9078\u985E\u5225 ''{0}'' \u4E0D\u76F8\u7B26\u3002
# {0} - name of the compiler pass
LOG_JQLCStartPass=JDO79003\uFF1AJQLC \u555F\u52D5 {0}
# {0} - name of the compiler pass
LOG_JQLCDumpTree=JDO79004\uFF1AJQLC \u50BE\u5370\u6A39 {0}
LOG_JQLCReuseRetrieveDesc=JDO79005\uFF1AJQLC \u91CD\u8907\u4F7F\u7528\u5FEB\u53D6\u7684 RetrieveDesc

#############################################################################
#<error message helper class>
#                  it is the last arg for each of them that contains the 
#                  actual message.
#############################################################################
jqlc.errormsg.generic.msg={0}: {1}
jqlc.errormsg.generic.msgcolumn={0} \u6B04({1})\uFF1A{2}
jqlc.errormsg.generic.msglinecolumn={0} \u884C({1}) \u6B04({2})\uFF1A{3}

#############################################################################
#<syntax error messages>
# Message ID Range: JDO79100 - JDO79199
#############################################################################

jqlc.parser.syntaxerror=JDO79100\uFF1A\u8A9E\u6CD5\u932F\u8AA4\u3002
jqlc.parser.syntaxerrorattoken=JDO79101\uFF1A\u5728 ''{0}'' \u8655\u767C\u751F\u8A9E\u6CD5\u932F\u8AA4\u3002
jqlc.parser.unexpectedtoken=JDO79102\uFF1A\u672A\u9810\u671F\u7684\u8A9E\u6CD5\u932F\u8AA4\u8A18\u865F ''{0}''\u3002
jqlc.parser.unexpectedchar=JDO79103\uFF1A\u672A\u9810\u671F\u7684\u8A9E\u6CD5\u932F\u8AA4\u5B57\u5143 ''{0}''\u3002
jqlc.parser.expectedfoundchar=JDO79104\uFF1A\u9810\u671F\u7684\u8A9E\u6CD5\u932F\u8AA4\u5B57\u5143 ''{0}''\uFF0C\u627E\u5230 ''{1}''\u3002
jqlc.parser.unexpectedEOF=JDO79105\uFF1A\u672A\u9810\u671F\u7D50\u675F\u6587\u672C\u6642\u767C\u751F\u8A9E\u6CD5\u932F\u8AA4\u3002

#############################################################################
#<semantic error messages>
# Message ID Range: JDO7109200 - JDO79399
#############################################################################

# semantic error messages (unsupported operations)

jqlc.semantic.analysebitwiseexpr.exclusiveorop=JDO79200\uFF1A\u4E0D\u652F\u63F4\u5C08\u7528\u6216\u904B\u7B97\u5B50 ^\u3002
jqlc.semantic.analysebitwiseexpr.integerbitwiseop=JDO79201\uFF1A\u4E0D\u652F\u63F4\u6574\u6578\u4F4D\u5143\u904B\u7B97\u5B50 {0}\u3002
jqlc.semantic.analysecollectioncall.unsupportedcollectionexpr=JDO79202\uFF1A\u4E0D\u652F\u63F4\u96C6\u5408\u8868\u793A\u5F0F ''{0}''\u3002
jqlc.semantic.analysecollectioncall.nonvariable=JDO79203\uFF1A\u9810\u671F\u7684\u8B8A\u6578 \uFF0D \u975E\u8B8A\u6578\u5305\u542B\u4E0D\u53D7\u652F\u63F4\u7684\u5F15\u6578\u3002
jqlc.semantic.generic.unsupportedconstraintop=JDO79204\uFF1A\u4E0D\u652F\u63F4 variable constraint \u5B50\u53E5\u7684\u4F5C\u696D ''{0}''\u3002
jqlc.semantic.candidateclass.nonpc=JDO79205\uFF1A\u985E\u5225 ''{0}'' \u4E0D\u5177\u6709\u6301\u7E8C\u6027\u3002\u67E5\u8A62\u4E0D\u652F\u63F4 Non-persistence-capable \u5019\u9078\u985E\u5225\u3002
jqlc.semantic.checkvalidorderingexpr.invalidordering=JDO79206\uFF1A\u6392\u5E8F\u898F\u683C\u4E2D\u4E0D\u652F\u63F4\u8868\u793A\u5F0F ''{0}''\u3002
jqlc.semantic.checkvalidresultexpr.invalidresult=JDO79207\uFF1A\u7D50\u679C\u898F\u683C\u4E2D\u4E0D\u652F\u63F4\u8868\u793A\u5F0F ''{0}''\u3002

# semantic error messages (user errors)

jqlc.semantic.analysecollectioncall.typemismatch=JDO79208\uFF1A\u96C6\u5408\u5143\u7D20\u985E\u578B ''{0}'' \u8207\u8B8A\u6578\u985E\u578B ''{1}'' \u4E0D\u76F8\u5BB9\u3002
jqlc.semantic.analysecollectioncall.relationshipexpected=JDO79209\uFF1A\u9810\u671F\u7684\u95DC\u4FC2\u6B04\u4F4D ''{0}''\u3002
jqlc.semantic.analysedotexpr.classexprexpected=JDO79210\uFF1A\u9810\u671F\u7684\u985E\u5225\u985E\u578B\u8868\u793A\u5F0F\u3002
jqlc.semantic.analysefieldaccess.nonperistentfield=JDO79211\uFF1A\u7121\u6CD5\u5B58\u53D6\u5177\u6709\u6301\u7E8C\u6027\u985E\u5225 ''{1}'' \u7684\u975E\u6301\u7E8C\u6027\u6B04\u4F4D ''{0}''\u3002
jqlc.semantic.analysefieldaccess.nonpublicfield=JDO79212\uFF1A\u7121\u6CD5\u5B58\u53D6\u975E\u6301\u7E8C\u6027\u985E\u5225 ''{1}'' \u7684\u975E\u516C\u7528\u6B04\u4F4D ''{0}''\u3002
jqlc.semantic.analysestaticfieldaccess.staticreference=JDO79213\uFF1A\u7121\u6CD5\u5C0D\u985E\u5225 ''{1}'' \u7684\u975E\u975C\u614B\u8B8A\u6578 ''{0}'' \u9032\u884C\u975C\u614B\u53C3\u7167\u3002
jqlc.semantic.analysestaticfieldaccess.nonpublicfield=JDO79214\uFF1A\u7121\u6CD5\u5B58\u53D6\u985E\u5225 ''{1}'' \u7684\u975E\u516C\u7528\u975C\u614B\u6B04\u4F4D ''{0}''\u3002
jqlc.semantic.analyserelationalexpr.notorderable=JDO79215\uFF1A{1} \u7684\u904B\u7B97\u5143\u985E\u578B ''{0}'' \u662F\u4E0D\u53EF\u6392\u5E8F\u7684\u3002
jqlc.semantic.expression.undefined=JDO79216\uFF1A\u672A\u5B9A\u7FA9\u8868\u793A\u5F0F ''{0}''\u3002
jqlc.semantic.filter.booleanexpected=JDO79217\uFF1A\u9810\u671F\u5E03\u6797\u8868\u793A\u5F0F\uFF0C\u7BE9\u9078\u8868\u793A\u5F0F\u7684\u985E\u578B\u70BA ''{0}''\u3002
jqlc.semantic.generic.alreadydeclared=JDO79218\uFF1A''{0}'' \u5DF2\u5BA3\u544A\u70BA {1}\u3002
jqlc.semantic.generic.arguments.numbermismatch=JDO79219\uFF1A\u5F15\u6578\u6578\u76EE\u932F\u8AA4\u3002
jqlc.semantic.generic.arguments.typemismatch=JDO79220\uFF1A\u5BE6\u969B\u53C3\u6578\u7684\u985E\u578B\u4E0D\u76F8\u5BB9\u3002\u7121\u6CD5\u5C07 ''{0}'' \u8F49\u63DB\u70BA ''{1}''\u3002
jqlc.semantic.generic.arguments.invalid=JDO79221\uFF1A''{0}'' \u7684\u5F15\u6578\u7121\u6548\u3002
jqlc.semantic.generic.invalidmethodcall=JDO79222\uFF1A\u65B9\u6CD5\u547C\u53EB\u7121\u6548\u3002
jqlc.semantic.generic.unknownfield=JDO79223\uFF1A\u6C92\u6709\u70BA\u985E\u5225 ''{1}'' \u5B9A\u7FA9\u6B04\u4F4D ''{0}''\u3002
jqlc.semantic.generic.unknowntype=JDO79224\uFF1A\u985E\u578B ''{0}'' \u672A\u77E5\u3002
jqlc.semantic.identifier.undefined=JDO79225\uFF1A\u672A\u5B9A\u7FA9\u8B58\u5225\u78BC ''{0}''\u3002
jqlc.semantic.primary.invalidcast=JDO79226\uFF1A\u7121\u6CD5\u5C07\u8868\u793A\u5F0F\u985E\u578B ''{0}'' \u8F49\u63DB\u70BA\u985E\u578B ''{1}''\u3002
jqlc.semantic.type.notype=JDO79227\uFF1A\u9810\u671F\u985E\u578B\uFF0C''{0}'' \u5DF2\u5B9A\u7FA9\u70BA {1}\u3002
jqlc.semantic.analyseorderingexpression.notorderable=JDO79228\uFF1A\u6392\u5E8F\u8868\u793A\u5F0F\u7684\u985E\u578B ''{0}'' \u662F\u4E0D\u53EF\u6392\u5E8F\u7684\u3002
jqlc.semantic.checkvalidresultexpr.invalidavgsumexpr=JDO79229\uFF1A''{1}'' \u5408\u4F75\u8868\u793A\u5F0F\u7684\u985E\u578B ''{0}'' \u4E0D\u662F\u6578\u5B57\u6216\u5B57\u5143\u985E\u578B\u3002
jqlc.semantic.checkvalidresultexpr.invalidminmaxexpr=JDO79230\uFF1A''{1}'' \u5408\u4F75\u8868\u793A\u5F0F\u7684\u985E\u578B ''{0}'' \u662F\u4E0D\u53EF\u6392\u5E8F\u7684\u3002
jqlc.semantic.checkresultordering.invalidorderingfordistinctresultfield=JDO79231\uFF1A\u660E\u78BA\u7D50\u679C\u6B04\u4F4D\u8868\u793A\u5F0F ''{0}'' \u548C\u6392\u5E8F\u8868\u793A\u5F0F ''{1}'' \u4E0D\u76F8\u5BB9\u3002\u5B83\u5011\u5FC5\u9808\u70BA\u540C\u4E00\u6B04\u4F4D\u3002
jqlc.semantic.checkresultordering.invalidorderingfordistinctresult=JDO79232\uFF1A\u7D50\u679C\u8868\u793A\u5F0F ''distinct {0}'' \u548C\u6392\u5E8F\u8868\u793A\u5F0F ''{1}'' \u4E0D\u76F8\u5BB9\u3002\u5B83\u5011\u5FC5\u9808\u662F\u5728\u540C\u4E00\u985E\u5225\u4E2D\u4F7F\u7528\u8A72\u985E\u5225\u4E4B\u5C0E\u89BD\u8868\u793A\u5F0F\u7684\u6B04\u4F4D\u3002

# query parameter table

jqlc.parametertable.checkunboundparams.unboundparam=JDO79233\uFF1A\u7121\u754C\u9650\u67E5\u8A62\u53C3\u6578 ''{0}''\u3002
jqlc.parametertable.definevaluebyname.undefinedparam=JDO79234\uFF1A\u672A\u5B9A\u7FA9\u67E5\u8A62\u53C3\u6578 ''{0}''\u3002
jqlc.parametertable.definevaluebyindex.wrongnumberofargs=JDO79235\uFF1A\u5F15\u6578\u6578\u76EE\u932F\u8AA4\u3002
jqlc.parametertable.definevaluebyindex.typemismatch=JDO79236\uFF1A\u5BE6\u969B\u53C3\u6578\u7684\u985E\u578B\u4E0D\u76F8\u5BB9\u3002\u7121\u6CD5\u5C07 ''{0}'' \u8F49\u63DB\u70BA ''{1}''\u3002

#############################################################################
#<optimizer>
# Message ID Range: JDO79400 - JDO79499
#############################################################################

jqlc.optimizer.staticfieldaccess.illegal=JDO79400\uFF1A\u7121\u6CD5\u5B58\u53D6\u985E\u5225 ''{1}'' \u7684\u975C\u614B\u6B04\u4F4D ''{0}''\u3002
jqlc.optimizer.literal.invalid=JDO79401\uFF1A{0} \u6587\u5B57 ''{1}'' \u7121\u6548\u3002

#############################################################################
#<code generation>
# Message ID Range: JDO79500 - JDO79599
#############################################################################

jqlc.codegeneration.fieldaccess.illegal=JDO79500\uFF1A\u7121\u6CD5\u5B58\u53D6\u7269\u4EF6 ''{1}'' \u7684\u6B04\u4F4D ''{0}''\u3002
jqlc.codegeneration.collectioncomparison.nonnull=JDO79501\uFF1A\u4E0D\u652F\u63F4\u96C6\u5408\u8207\u975E\u7A7A\u503C\u7684\u6BD4\u8F03\u3002
jqlc.codegeneration.generic.unsupportedop=JDO79502\uFF1A\u4E0D\u652F\u63F4\u4F5C\u696D ''{0}''
jqlc.codegeneration.substring.beginnegative=JDO79503\uFF1A\u5B50\u5B57\u4E32\u65B9\u6CD5\u7684\u958B\u59CB\u7D22\u5F15 ''{0}'' \u662F\u8CA0\u503C\u3002
jqlc.codegeneration.substring.beginlargerend=JDO79504\uFF1A\u5B50\u5B57\u4E32\u65B9\u6CD5\u7684\u958B\u59CB\u7D22\u5F15 ''{0}'' \u5927\u65BC\u7D50\u675F\u7D22\u5F15 ''{1}''\u3002
jqlc.codegeneration.resultExpr.missingpkfields=JDO79505\uFF1A\u4E0D\u652F\u63F4\u8A08\u6578\u8868\u793A\u5F0F\u3002\u8868\u793A\u5F0F\u985E\u578B ''{0}'' \u70BA\u6C92\u6709\u4E3B\u9375\u6B04\u4F4D\u7684\u6301\u7E8C\u6027\u985E\u5225\u3002

#############################################################################
#<Miscellaneous>
# Message ID Range: JDO79600 - JDO79699
#############################################################################
# {0} - RetrieveDesc info
LOG_JQLCDumpRD=JDO79600\uFF1AJQLC \u50BE\u5370 RetrieveDesc {0}

# variable table

jqlc.variabletable.markconstraint.multiple=JDO79601\uFF1A\u8B8A\u6578 ''{0}'' \u7684\u591A\u91CD\u9650\u5236\u3002
jqlc.variabletable.checkconstraint.unused=JDO79602\uFF1A\u5DF2\u5B9A\u7FA9\u8B8A\u6578 ''{0}''\uFF0C\u4F46\u672A\u4F7F\u7528\u3002
jqlc.variabletable.checkconstraint.cycle=JDO79603\uFF1A\u4E0D\u652F\u63F4\u8B8A\u6578 ''{0}'' \u7684\u5FAA\u74B0\u9650\u5236\u5B9A\u7FA9\u3002
jqlc.variabletable.merge.different=JDO79604\uFF1A\u540C\u4E00\u8B8A\u6578 ''{0}'' \u7684\u4E0D\u540C\u9650\u5236\u3002


###############################################################################
# <NOI18N: These messages are used for JDOFatalInternalException. These are not
# for end user. There is no message ID.>
###############################################################################
#
# <NOI18N>
#
jqlc.jqlc.checkcandidates.nullpc=\u5EF6\u4F38\u96C6\u5408\u7684\u5177\u6709\u6301\u7E8C\u6027\u985E\u5225\u70BA\u7A7A\u503C\u3002

jqlc.parser.invalidunicodestr=JQLLexer.UNICODE_STR 

jqlc.parametertable.getvaluebyname.undefined=ParameterTable.getValueByName\uFF1A\u672A\u5B9A\u7FA9\u7684\u53C3\u6578 {0}\u3002
jqlc.parametertable.getvaluebyindex.wrongindex=ParameterTable.getValueByIndex\uFF1A\u932F\u8AA4\u7684\u7D22\u5F15 {0}\u3002
jqlc.parametertable.definevaluebyindex.wrongindex=ParameterTable.defineValueByIndex\uFF1A\u932F\u8AA4\u7684\u7D22\u5F15 {0}\u3002

jqlc.semantic.checkcandidateclass.unknowntype=Semantic.checkCandidateClass\uFF1A\u4E0D\u660E\u7684\u985E\u578B {0}\u3002
jqlc.semantic.analysedefinedidentifier.illegalident=Semantic.analyseDefinedIdentifier\uFF1A\u975E\u6CD5\u7684\u8B58\u5225\u78BC\u5B9A\u7FA9 {0}\u3002
jqlc.semantic.getcollectionfield.missingchildren=Semantic.getCollectionField\uFF1A\u7121\u6548\u7684\u7BC0\u9EDE\u7D50\u69CB\uFF0C\u907A\u6F0F\u5B50\u7CFB\u3002

jqlc.optimizer.checkbinaryplusop.invalidtype=Optimizer.checkBinaryPlusOp\uFF1A\u7121\u6548\u7684\u985E\u578B {0}\u3002
jqlc.optimizer.checkbinaryminusop.invalidtype=Optimizer.checkBinaryMinusOp\uFF1A\u7121\u6548\u7684\u985E\u578B {0}\u3002
jqlc.optimizer.checkmultiplicationop.invalidtype=Optimizer.checkMultiplicationOp\uFF1A\u7121\u6548\u7684\u985E\u578B {0}\u3002
jqlc.optimizer.checkdivisionop.invalidtype=Optimizer.checkDivisionOp\uFF1A\u7121\u6548\u7684\u985E\u578B {0}\u3002
jqlc.optimizer.checkmodop.invalidtype=Optimizer.checkModOp\uFF1A\u7121\u6548\u7684\u985E\u578B {0}\u3002
jqlc.optimizer.checkunaryminusop.invalidtype=Optimizer.checkUnaryMinusOp\uFF1A\u7121\u6548\u7684\u985E\u578B {0}\u3002
jqlc.optimizer.getbigdecimalvalue.notnumber=Optimizer.getBigDecimalValue\uFF1A\u9810\u671F\u7684\u6578\u5B57\u503C {0}\u3002
jqlc.optimizer.getbigintegervalue.notnumber=Optimizer.getBigIntegerValue\uFF1A\u9810\u671F\u7684\u6578\u5B57\u503C {0}\u3002
jqlc.optimizer.isempty.requirecollection=Optimizer.isEmpty\uFF1A\u9700\u8981\u96C6\u5408\u503C\u3002

jqlc.codegeneration.generatesimplefieldvaluecomparison.invalidvalue=CodeGeneration.generateSimpleFieldValueComparison\uFF1A\u95DC\u806F\u5F0F\u4F5C\u696D\u4E2D\u7684\u7A7A\u503C\u7121\u6548
jqlc.codegeneration.generateparametervaluecomparison.invalidvalue=CodeGeneration.generateParameterValueComparison\uFF1A\u95DC\u806F\u5F0F\u4F5C\u696D\u4E2D\u7684\u7A7A\u503C\u7121\u6548
jqlc.codegeneration.getkeyfieldscomparisonbooleanop.invalidobj=CodeGeneration.getKeyFieldsComparisonBooleanOp\uFF1A\u7121\u6548\u7684\u7269\u4EF6\u6BD4\u8F03\u4F5C\u696D {0}\u3002
jqlc.codegeneration.filter.nonbooleanvalue=CodeGeneration.filter\uFF1A\u7121\u6548\u7684\u975E\u5E03\u6797\u503C {0}\u3002
jqlc.codegeneration.primary.null=CodeGeneration.primary\uFF1A\u7121\u6548\u7684\u7A7A\u503C\u3002

jqlc.variabletable.markused.varnotfound=\u627E\u4E0D\u5230 VariableTable.markUsed \u8B8A\u6578 {0}\u3002
jqlc.variabletable.markused.multidep=\u8B8A\u6578 {0} (\u820A\uFF1A{1}\uFF0C\u65B0\uFF1A{2}) \u7684 VariableTable.markUsed \u591A\u91CD\u76F8\u4F9D\u6027\u3002
jqlc.variabletable.markconstraint.varnotfound=\u627E\u4E0D\u5230 VariableTable.markConstraint \u8B8A\u6578 {0}\u3002

jqlc.jdoqlparameterdeclarationparser.next.wrongtoken=ParameterDeclarationHelper.ParameterTypeIterator.next\uFF1A\u932F\u8AA4\u7684\u8A18\u865F\u985E\u578B {0}\uFF0C\u9810\u671F PARAMETER_DEF \u7BC0\u9EDE\u3002

jqlc.queryvaluefetcher.getvalue.invalidparam=\u7121\u6548\u7684\u53C3\u6578\u7D22\u5F15 {0} \u53C3\u6578\u9663\u5217\u9577\u5EA6\u70BA {1}\u3002
