#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright (c) 1997-2017 Oracle and/or its affiliates. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common Development
# and Distribution License("CDDL") (collectively, the "License").  You
# may not use this file except in compliance with the License.  You can
# obtain a copy of the License at
# https://oss.oracle.com/licenses/CDDL+GPL-1.1
# or LICENSE.txt.  See the License for the specific
# language governing permissions and limitations under the License.
#
# When distributing the software, include this License Header Notice in each
# file and include the License file at LICENSE.txt.
#
# GPL Classpath Exception:
# Oracle designates this particular file as subject to the "Classpath"
# exception as provided by Oracle in the GPL Version 2 section of the License
# file that accompanied this code.
#
# Modifications:
# If applicable, add the following below the License Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyright [year] [name of copyright owner]"
#
# Contributor(s):
# If you wish your version of this file to be governed by only the CDDL or
# only the GPL Version 2, indicate your decision by adding "[Contributor]
# elects to include this software in this distribution under the [CDDL or GPL
# Version 2] license."  If you don't indicate a single choice of license, a
# recipient has the option to distribute your version of this file under
# either the CDDL, the GPL Version 2 or to extend the choice of license to
# its licensees as provided above.  However, if you add GPL Version 2 code
# and therefore, elected the GPL Version 2 license, then the option applies
# only if the new code is made subject to such option by the copyright
# holder.
#

# Resource bundle for sqlstore runtime messages
# key consists of: <subpackage>.<class>.<method>.<description>
# <subpackage> - is optional, package under runtime
# <class> - class name
# <method> - method name
# <description> - short description (use _ to represent space)
# all keys should be in lowercase
#
# Please note that many package names and classnames have changed over time.
# Unfortunately, this file was not maintained to follow above convention.
# Please ignore if the package/class name does not match actual names as today.
#
#
# The message ID for a message in persistence is derived as follows:
# JDO<2_digit_bundle_prefix><1_digit_section_number><2_digit_serial_number>
#
# The 2 digit prefix for this bundle is 76.
#
# This file is divided into the following sections:
# Under each section, messages that need not be I18Ned are separated under NOI18N. All other messages
# need to be numbered.
# 1. JDO:  PersistenceManagerFactory/PersistenceManager/ExtentCollection/LifeCycle
# 2. Model
# 3. StateManager
# 4. sql generator components: RetrieveDesc, ResultDesc plus all the files under generator subdir
# 5. SQLStoreManager
# 6. Connection/Connectionpool/Transaction/DBVendorType
# 7. EJB integration.
# 8. Generic messages.
#
# When adding a new message:
# 1. Please make sure that you add the message to the end of appropriate section.
# 2. Please add message ID to any user visible message.
# 3. The message ID for the new message = message ID for the last numbered
#    message in a section + 1.
# 4. Please do not change the message ID for existing messages. These
#    numbers are potentially mapped to more explanation about the message for
#    the end user.
#

####################################################################################################
# <All the source files under subdir impl (PersistenceManagerFactory/PersistenceManager etc.) >
# Message ID Range: JDO76000 - JDO76099
####################################################################################################
jdo.persistencemanagerfactoryimpl.getpersistencemanager.error=JDO76000: \u4E0D\u80FD\u5728\u540C\u4E00\u4E8B\u52A1\u5904\u7406\u4E2D\u4F7F\u7528\u591A\u4E2A\u7528\u6237\u540D/\u53E3\u4EE4\u7EC4\u5408\u3002
jdo.persistencemanagerfactoryimpl.getpersistencemanager.notconfigured=JDO76001: \u672A\u914D\u7F6E PersistenceManagerFactory\u3002
jdo.persistencemanagerfactoryimpl.notsupported=JDO76002: \u5185\u90E8 PersistenceManagerFactoryImpl \u4E0D\u652F\u6301\u64CD\u4F5C\u3002
jdo.persistencemanagerimpl.acquireexclusivelock.interrupted=JDO76003: \u7531\u4E8E\u4E2D\u65AD\u5F02\u5E38\u9519\u8BEF\u800C\u65E0\u6CD5\u83B7\u5F97\u4E92\u65A5\u9501\u5B9A
jdo.persistencemanagerimpl.acquiresharelock.failed=JDO76004: \u7531\u4E8E _readWriteCount \u5C0F\u4E8E\u96F6\u800C\u65E0\u6CD5\u83B7\u5F97\u5171\u4EAB\u9501\u5B9A
jdo.persistencemanagerimpl.acquiresharelock.interrupted=JDO76005: \u7531\u4E8E\u4E2D\u65AD\u5F02\u5E38\u9519\u8BEF\u800C\u65E0\u6CD5\u83B7\u5F97\u5171\u4EAB\u9501\u5B9A
jdo.persistencemanagerimpl.another_pm=JDO76006: \u5BF9\u8C61\u4E0E\u53E6\u4E00\u4E2A PersistenceManager \u5173\u8054\u3002
jdo.persistencemanagerimpl.assertactivetransaction.error=JDO76007: \u4E0E\u6B64\u6301\u4E45\u6027\u7BA1\u7406\u5668\u5173\u8054\u7684\u4E8B\u52A1\u5904\u7406\u672A\u5904\u4E8E\u6D3B\u52A8\u72B6\u6001\u3002
jdo.persistencemanagerimpl.assertclosed.closed=JDO76008: PersistenceManager \u5DF2\u5173\u95ED\u3002
jdo.persistencemanagerimpl.assertpersistencecapable.error=JDO76009: \u7C7B {0} \u5C1A\u672A\u589E\u5F3A\u4E3A\u5177\u6709\u900F\u660E\u6301\u4E45\u6027\u3002\u8FD0\u884C\u524D\u8BF7\u4F7F\u7528 IDE \u7684 JAR \u6216 WAR \u6253\u5305\u7A0B\u5E8F\u5C06\u5177\u6709\u6301\u4E45\u6027\u7684\u7C7B\u6253\u5305\u3002\u6216\u8005, \u5C06\u4E3B\u7C7B\u4E2D\u7684\u201C\u6267\u884C\u8005\u201D\u5C5E\u6027\u8BBE\u7F6E\u4E3A\u6301\u4E45\u6027\u6267\u884C\u8005, \u4EE5\u4FBF\u4ECE IDE \u8FD0\u884C\u3002
jdo.persistencemanagerimpl.close.activetransaction=JDO76010: \u4E0E\u6B64\u6301\u4E45\u6027\u7BA1\u7406\u5668\u5173\u8054\u7684\u4E00\u4E2A\u4E8B\u52A1\u5904\u7406\u5904\u4E8E\u6253\u5F00\u72B6\u6001\u3002
jdo.persistencemanagerimpl.fetchinstance.none=JDO76012: \u627E\u4E0D\u5230\u6B64\u5BF9\u8C61 ID \u7684\u5BF9\u8C61\u3002
jdo.persistencemanagerimpl.internaldeletepersistent.transient=JDO76014: \u65E0\u6CD5\u5220\u9664\u975E\u6301\u4E45\u6027\u5BF9\u8C61\u3002
jdo.persistencemanagerimpl.internalmakepersistent.dups=JDO76015: \u6B64 PersistenceManager \u9AD8\u901F\u7F13\u5B58\u4E2D\u5DF2\u5B58\u5728\u5177\u6709\u76F8\u540C\u4E3B\u952E\u7684\u5B9E\u4F8B\u3002
jdo.persistencemanagerimpl.loadclassforoid.wrongoidclass=JDO76016: \u4ECE OID \u68C0\u7D22\u5BF9\u8C61\u7C7B\u65F6\u51FA\u73B0\u9519\u8BEF\u3002
jdo.persistencemanagerimpl.newscoinstance.wrongclass=JDO76017: \u65E0\u6CD5\u521B\u5EFA\u7C7B {0} \u7684 SCO \u5B9E\u4F8B, \u8BE5\u5B9E\u4F8B\u7684\u7C7B\u578B\u65E0\u6548\u3002
jdo.persistencemanagerimpl.notprocessed=JDO76018: \u7531\u4E8E\u5FAA\u73AF\u76F8\u5173\u800C\u65E0\u6CD5\u5237\u65B0\u6301\u4E45\u6027\u5B9E\u4F8B\u3002
jdo.persistencemanagerimpl.releaseexclusivelock.failed=JDO76019: \u7531\u4E8E _readWriteCount \u5927\u4E8E\u96F6\u800C\u65E0\u6CD5\u91CA\u653E\u4E92\u65A5\u9501\u5B9A
jdo.persistencemanagerimpl.releasesharelock.failed=JDO76020: \u7531\u4E8E _readWriteCount \u4E3A\u96F6\u800C\u65E0\u6CD5\u91CA\u653E\u5171\u4EAB\u9501\u5B9A
jdo.persistencemanagerwrapper.invalidpm=JDO76021: PersistenceManagerWrapper \u5DF2\u5173\u95ED\u3002
jdo.extentcollection.constructor.invalidclass=JDO76022: \u533A\u96C6\u5408\u7684\u7C7B ''{0}'' \u65E0\u6548\u3002
jdo.extentcollection.constructor.nonpc=JDO76023: \u7C7B ''{0}'' \u4E0D\u5177\u6709\u6301\u4E45\u6027\u3002
jdo.extentcollection.constructor.subclasses=JDO76024: \u533A\u96C6\u5408\u4E0D\u652F\u6301\u9009\u9879\u5B50\u7C7B\u201C\u771F\u201D\u3002
jdo.extentcollection.illegalmodification=JDO76025: \u5BF9\u7C7B ''{0}'' \u7684\u533A\u96C6\u5408\u7684\u4FEE\u6539\u4E0D\u5408\u6CD5\u3002
jdo.extentcollection.methodnotsupported=JDO76026: \u4E0D\u652F\u6301\u533A\u96C6\u5408\u65B9\u6CD5 {0}\u3002
jdo.lifecycle.xactnotactive=JDO76027: \u6267\u884C\u6B64\u64CD\u4F5C\u9700\u8981\u5904\u4E8E\u6D3B\u52A8\u72B6\u6001\u7684\u4E8B\u52A1\u5904\u7406\u3002
jdo.persistencemanagerimpl.newinstance.badsm=JDO76028: StateManager \u672A\u914D\u7F6E\u5B8C\u5168!
jdo.persistencemanagerimpl.setjtatransaction.notnulljta=JDO76029: \u5C1D\u8BD5\u7528 {1} \u66FF\u6362\u975E\u7A7A javax.transaction.Transaction: {0}\u3002
jdo.persistencemanagerfactoryimpl.getpersistencemgr.closed=JDO76030: javax.transaction.Transaction {0} \u7684 PersistenceManager \u5DF2\u5173\u95ED\u6216\u6B63\u5728\u63D0\u4EA4\u3002
jdo.persistencemanagerfactoryimpl.registerpm.registered=JDO76031: \u8BE5 javax.transaction.Transaction {0} \u7684\u5B9E\u4F8B\u5DF2\u6CE8\u518C\u53E6\u4E00\u4E2A PersistenceManager: {1}\u3002
jdo.persistencemanagerimpl.verificationfailed=JDO76032: \u7248\u672C\u4E00\u81F4\u7684\u5B9E\u4F8B\u672A\u80FD\u901A\u8FC7\u6570\u636E\u5B58\u50A8\u7684\u9A8C\u8BC1\u3002
jdo.persistencemanagerfactoryimpl.getversionconsistencycache.nullstore=JDO76033: \u672A\u914D\u7F6E StoreManager\u3002

#
# <NOI18N: LifeCycle>
#
sqlstore.state.lifecyclestate.changestate=LifeCycleState.changeState(), \u65E7\u72B6\u6001 = {0}, \u65B0\u72B6\u6001 = {1}\u3002
sqlstore.state.lifecyclestate.initial=LifeCycleState.getLifeCycleState(), \u521D\u59CB\u72B6\u6001 = {0}\u3002

#
# <NOI18N: PersistenceManager>
#
sqlstore.persistencemgr.acquireexclusivelock.count=acquireExclusiveLock(), \u7EBF\u7A0B {0} \u7684 _readWriteCount = {1}\u3002
sqlstore.persistencemgr.acquireexclusivelock=acquireExclusiveock(), \u7EBF\u7A0B {0} \u5C06\u8981\u7B49\u5F85\u3002
sqlstore.persistencemgr.acquiresharedlock.rdwrcount=acquireShareLock(), \u7EBF\u7A0B {0} \u83B7\u53D6\u5171\u4EAB\u9501\u7684 _readWriteCount ={1}\u3002
sqlstore.persistencemgr.acquiresharedlock=acquireShareLock(), \u7EBF\u7A0B {0} \u5C06\u8981\u7B49\u5F85\u3002
sqlstore.persistencemgr.aftercompletion.process=---PersistenceManagerImpl.afterCompletion() \u8FDB\u7A0B: {0}\u3002
sqlstore.persistencemgr.aftercompletion=---PersistenceManagerImpl.afterCompletion() \u4E2D\u6B62: {0}\u3002
sqlstore.persistencemgr.assertactivetx.closed=--- PersistenceManagerImpl.assertActiveTransaction: Closed for  {0}.
sqlstore.persistencemgr.assertactivetx=--- PersistenceManagerImpl.assertActiveTransaction: {0}\u3002
sqlstore.persistencemgr.assertisopen=--- PersistenceManagerImpl.assertIsOpen: \u5DF2\u9488\u5BF9{0}\u5173\u95ED\u3002
sqlstore.persistencemgr.beforecompletion=---PersistenceManagerImpl.beforeCompletion()\u3002
sqlstore.persistencemgr.cacheproperties=PersistenceManagerImpl \u9AD8\u901F\u7F13\u5B58\u5C5E\u6027: _txCacheInitialCapacity={0}, _flushedCacheInitialCapacity={1}, _flushedCacheLoadFactor={2}, _weakCacheInitialCapacity={3}, _weakCacheLoadFactor={4}\u3002
sqlstore.persistencemgr.deregisterinstance.verified=---PersistenceManagerImpl.deregisterInstance() - \u4F7F\u7528\u9A8C\u8BC1\u53D6\u6D88\u6CE8\u518C\u3002
sqlstore.persistencemgr.deregisterinstance.verify=---PersistenceManagerImpl.deregisterInstance() with verify SM -- oid: {0}  for PersistenceManager: {1}  and JTA: {2}.
sqlstore.persistencemgr.deregisterinstance=---PersistenceManagerImpl.deregisterInstance() oid: {0} \u9488\u5BF9 PersistenceManager: {1} \u548C JTA: {2}\u3002
sqlstore.persistencemgr.getbyobjid=---PersistenceManagerImpl.getObjectById() OID:{0} \u9488\u5BF9 PersistenceManager: {1} \u548C JTA: {2}\u3002
sqlstore.persistencemgr.getcurrentwrapper=---PersistenceManagerImpl.getCurrentWrapper() > \u5F53\u524D\u503C: {0}\u3002
sqlstore.persistencemgr.getobjid.notpc=---PersistenceManagerImpl.getObjectId() NOT PC: {0}  for PersistenceManager: {1}.
sqlstore.persistencemgr.getobjid.notpm=---PersistenceManagerImpl.getObjectId() NOT PM: {0} for PersistenceManager: {1}  and JTA: {2}.
sqlstore.persistencemgr.getobjid= :{0} ---PersistenceManagerImpl.getObjectId() PC: {1} \u9488\u5BF9 PersistenceManager: {2} \u548C JTA: {3}\u3002
sqlstore.persistencemgr.internalcloneoid.old=---PersistenceManagerImpl.internalCloneOid(): old: {0}  new: {1} same: {2}.
sqlstore.persistencemgr.internalcloneoid=---PersistenceManagerImpl.internalCloneOid() \u9519\u8BEF: {0}\u3002
sqlstore.persistencemgr.isactivetx=---PersistenceManagerImpl.isActiveTransaction(): {0}\u3002
sqlstore.persistencemgr.isnontxread=---PersistenceManagerImpl.isNontransactionalRead(): {0}\u3002
sqlstore.persistencemgr.isoptimistic=---PersistenceManagerImpl.isOptimisticTransaction() : {0}\u3002
sqlstore.persistencemgr.loadingclass=\u6B63\u5728\u52A0\u8F7D... ClassName: {0}\u3002
sqlstore.persistencemgr.loadingfile=\u6B63\u5728\u52A0\u8F7D... FileName: {0} {1} {2}\u3002
sqlstore.persistencemgr.makepersistent.done=---PersistenceManagerImpl.makePersistent() {0} \u9488\u5BF9 {1} \u548C JTA: {2} \u5DF2\u5B8C\u6210\u3002
sqlstore.persistencemgr.makepersistent= {0} ---PersistenceManagerImpl.makePersistent() PC: {1} \u9488\u5BF9 PersistenceManager: {2} \u548C JTA: {3}\u3002
sqlstore.persistencemgr.newcollection=---PersistenceManagerImpl.newCollectionInstanceInternal() \u7C7B\u578B: {0}\u3002
sqlstore.persistencemgr.popcurrentwrapper=---PersistenceManagerImpl.popCurrentWrapper() > current: {0}  prev: {1}.
sqlstore.persistencemgr.pushcurrentwrapper=---PersistenceManagerImpl.pushCurrentWrapper() > \u5F53\u524D\u503C: {0} \u65B0\u503C: {1}\u3002
sqlstore.persistencemgr.registerinstance= {0} ---PersistenceManagerImpl.registerInstance() oid/sm: {1}/{2} \u9488\u5BF9 PersistenceManager: {3} \u548C JTA: {4}\u3002
sqlstore.persistencemgr.registerinstancein_txc=registerInstance in TXC :{0} / {1} for PersistenceManager: {2} and JTA: {3}.
sqlstore.persistencemgr.registerinstancein_wkc=registerInstance in WKC.
sqlstore.persistencemgr.releaseexclusivelock=releaseExclusiveock(), \u7EBF\u7A0B {0} \u7684 _readWriteCount = {1}\u3002
sqlstore.persistencemgr.releasesharedlock=releaseShareLock(), \u7EBF\u7A0B {0} \u7684 _readWriteCount = {1}\u3002
sqlstore.persistencemgr.replacingdeletedinstance=\u6B63\u5728\u4F7F\u7528\u65B0\u5B9E\u4F8B\u4E3A\u5BF9\u8C61 ID {0} \u66FF\u6362\u5220\u9664\u7684\u5B9E\u4F8B\u3002
sqlstore.persistencemgr.setkeyfields=---PersistenceManagerImpl.setKeyFields() \u9519\u8BEF: {0}\u3002
#
# <NOI18N: PersistenceManagerFactory>
#
sqlstore.sqlpersistencemgrfactory.getfrompool.pmt=<--SQLPersistenceManagerFactory.getFromPool() PM: {0} \u9488\u5BF9 JTA {1}\u3002
sqlstore.sqlpersistencemgrfactory.getfrompool=<--SQLPersistenceManagerFactory.getFromPool()\u3002
sqlstore.sqlpersistencemgrfactory.getpersistencemgr.found= {0} <->SQLPersistenceManagerFactory.getPersistenceManager() \u627E\u5230 javax.transaction.Transaction: {1}\u3002
sqlstore.sqlpersistencemgrfactory.getpersistencemgr.jdotx.notfound=<->SQLPersistenceManagerFactory.getPersistenceManager() \u672A\u627E\u5230 JDO \u4E8B\u52A1\u5904\u7406\u3002
sqlstore.sqlpersistencemgrfactory.getpersistencemgr.jdotx=<->SQLPersistenceManagerFactory.getPersistenceManager() JDO \u4E8B\u52A1\u5904\u7406: {0}\u3002
sqlstore.sqlpersistencemgrfactory.getpersistencemgr.pmclosedfor= {0} <->SQLPersistenceManagerFactory.getPersistenceManager() PM \u5DF2\u9488\u5BF9{1}\u5173\u95ED\u3002
sqlstore.sqlpersistencemgrfactory.getpersistencemgr.pmt= {0} <->SQLPersistenceManagerFactory.getPersistenceManager() : {1} \u9488\u5BF9 JTA: {2}\u3002
sqlstore.sqlpersistencemgrfactory.getpersistencemgr=:{0} -->SQLPersistenceManagerFactory.getPersistenceManager()\u3002
sqlstore.sqlpersistencemgrfactory.init=---SQLPersistenceManagerFactory.initialize()\u3002
sqlstore.sqlpersistencemgrfactory.pmCacheBucketSize=---SQLPersistenceManagerFactory pmCacheBucketSize = {0}\u3002
sqlstore.sqlpersistencemgrfactory.pmCacheInitialCapacity=---SQLPersistenceManagerFactory pmCacheInitialCapacity = {0}\u3002
sqlstore.sqlpersistencemgrfactory.registerpersistencemgr.pmt=<->SQLPersistenceManagerFactory.registerPersistenceManager() PM: {0} for JTA Tx: {1}.
sqlstore.sqlpersistencemgrfactory.releasepm.pmt=---SQLPersistenceManagerFactory.releasePersistenceManager() PM:{0} \u9488\u5BF9 JTA Tx: {1}\u3002
sqlstore.sqlpersistencemgrfactory.returnToPool=<--SQLPersistenceManagerFactory.returnToPool()\u3002


###############################################################################
# <Model>
# Message ID Range: JDO76100 - JDO76199
###############################################################################
core.configuration.columnnotable=JDO76100: \u5217\u63CF\u8FF0\u7B26\u6CA1\u6709\u6709\u6548\u7684\u8868\u63CF\u8FF0\u7B26\u3002
core.configuration.fieldnotable=JDO76101: \u5B57\u6BB5 {0} \u4E0D\u4E0E\u4EFB\u4F55\u8868\u5173\u8054\u3002
core.configuration.fieldnotmapped=JDO76102: \u672A\u6620\u5C04\u7C7B {1} \u7684\u6301\u4E45\u6027\u5B57\u6BB5 {0}\u3002
core.configuration.iddescnofield=JDO76103: SqlIDDesc \u5BF9\u8C61\u8BBE\u7F6E\u4E0D\u5F53\u3002\u6CA1\u6709\u53EF\u7528\u7684\u5B57\u6BB5\u63CF\u8FF0\u7B26\u3002
core.configuration.loadfailed.class=JDO76104: \u65E0\u6CD5\u52A0\u8F7D\u7C7B {0} \u7684\u914D\u7F6E\u3002
core.configuration.noneexistentpkfield=JDO76105: \u5BF9\u8C61 ID \u7C7B {1} \u4E2D\u7684\u5B57\u6BB5 {0} \u5728\u5177\u6709\u6301\u4E45\u6027\u7684\u7C7B {2} \u4E2D\u4E0D\u5B58\u5728\u3002
core.configuration.unsupportedconsistencylevel=JDO76106: \u7C7B {0} \u5177\u6709\u4E0D\u652F\u6301\u7684\u4E00\u81F4\u6027\u7EA7\u522B\u3002\u5F53\u524D\u53D7\u652F\u6301\u7684\u4E00\u81F4\u6027\u7EA7\u522B\u4E3A "none", "check-modified-at-commit", "lock-when-loaded" \u548C "check-version-of-accessed-instances"\u3002
core.configuration.validationfailed=JDO76107: \u7C7B {0} \u7684\u6620\u5C04\u65E0\u6548:\n{1}\u3002
core.configuration.validationproblem=JDO76108: \u7C7B {0} \u4E2D\u6709\u9A8C\u8BC1\u9519\u8BEF: {1}
#
# <FieldDesc validation at runtime>
#
core.fielddesc.minvalue=JDO76109: \u503C {0} \u5C0F\u4E8E\u5B57\u6BB5\u7C7B\u578B {2} \u6240\u5141\u8BB8\u7684\u6700\u5C0F\u503C {1}\u3002
core.fielddesc.maxvalue=JDO76110: \u503C {0} \u5927\u4E8E\u5B57\u6BB5\u7C7B\u578B {2} \u6240\u5141\u8BB8\u7684\u6700\u5927\u503C {1}\u3002
core.configuration.noneexistentvcfield=JDO76111: \u5B57\u6BB5 {0} \u88AB\u6807\u8BB0\u4E3A\u7248\u672C\u5B57\u6BB5, \u4F46\u662F\u5728\u5177\u6709\u6301\u4E45\u6027\u7684\u7C7B {1} \u4E2D\u4E0D\u5B58\u5728\u3002
core.configuration.loadfailed.field=JDO76112: \u65E0\u6CD5\u5728\u7C7B {1} \u4E2D\u52A0\u8F7D\u5B57\u6BB5 {0} \u7684\u914D\u7F6E\u3002

#
# <NOI18N: model>
#
sqlstore.model.classdesc.assocrelatedfield=\u5173\u8054\u7684\u5173\u7CFB\u5B57\u6BB5 = {0}\u3002
sqlstore.model.classdesc.createsqldesc=\u4ECE{0}\u521B\u5EFA SqlIDDesc\u3002
sqlstore.model.classdesc.fieldinfo=\u5B57\u6BB5\u540D = {0}, ID= {1}\u3002
sqlstore.model.classdesc.general={0}.{1} =>{2}
sqlstore.model.classdesc.getlocalfielddesc=<-> SqlPersistenceDesc.getLocalFieldDesc(), \u7C7B ={0}, \u4E3A\u5217 {2} \u6DFB\u52A0\u4E86\u9690\u85CF\u5B57\u6BB5 {1}\u3002
sqlstore.model.classdesc.loadedclass=\u5DF2\u6210\u529F\u52A0\u8F7D oid \u7C7B= {0}\u3002
sqlstore.model.classdesc.persistconfiginit.exit=<-- SqlPersistenceConfig.initialize()\u3002
sqlstore.model.classdesc.persistconfiginit=--> SqlPersistenceConfig.initialize(), \u7C7B = {0}\u3002
sqlstore.model.classdesc.pkfield=PK \u5B57\u6BB5 = {0}\u3002
sqlstore.model.classdesc.primarytrackedfield=\u5B57\u6BB5 {0} \u4E3A\u4E3B\u8981\u8DDF\u8E2A\u5B57\u6BB5\u3002
sqlstore.model.classdesc.unsetconcurrencychk=\u5982\u679C{0}, \u53D6\u6D88\u8BBE\u7F6E IN_CONCURRENCY_CHECK \u5C5E\u6027\u3002
sqlstore.model.classdesc.unsetrefintegrityupdate=\u5982\u679C{0}, \u53D6\u6D88\u8BBE\u7F6E REF_INTEGRITY_UPDATES \u5C5E\u6027\u3002
sqlstore.model.classdesc.vcfield=\u7248\u672C\u4E00\u81F4\u6027\u5B57\u6BB5 = {0}\u3002
sqlstore.model.fielddesc.addingfield=\u6DFB\u52A0\u5B57\u6BB5 {0}, \u7531\u5B57\u6BB5 {1} \u8DDF\u8E2A\u3002
sqlstore.model.fielddesc.convertvalue.from_to=convertValue: {0} \u4ECE: {1} \u5230: {2}\u3002
sqlstore.model.fielddesc.convertvalue.hidden=convertValue: \u9690\u85CF {0}... \u8FD4\u56DE\u3002
sqlstore.model.fielddesc.convertvalue=convertValue: \u7A7A\u503C... \u8FD4\u56DE\u3002
sqlstore.model.fielddesc.fieldname={0} = {1}.
sqlstore.model.fielddesc.setupdesc=setupDesc(): fieldName {0} fieldType {1}\u3002
sqlstore.model.configcacheimpl.size_before=\u6E05\u7406\u524D\u7684{0}\u5927\u5C0F: {1}\u3002
sqlstore.model.configcacheimpl.size_after=\u6E05\u7406\u540E\u7684{0}\u5927\u5C0F: {1}\u3002


###############################################################################
# <StateManager>
# Message ID Range: JDO76200 - JDO76299
###############################################################################
core.statemanager.anotherowner=JDO76200: \u4E0D\u80FD\u6307\u5B9A\u5176\u4ED6\u5BF9\u8C61\u62E5\u6709\u7684 SCO \u5B9E\u4F8B\u3002
core.statemanager.cantnewoid=JDO76201: \u65E0\u6CD5\u521B\u5EFA\u7C7B {0} \u7684\u65B0\u7684\u4E3B\u952E\u5B9E\u4F8B\u3002
core.statemanager.cantschedulejointable=JDO76202: \u65E0\u6CD5\u8C03\u5EA6\u7C7B {0} \u548C\u7C7B {1} \u4E4B\u95F4\u7684\u8FDE\u63A5\u8868\u6761\u76EE, \u5173\u7CFB\u5B57\u6BB5\u8BF4\u660E\u4E3A\u7A7A\u503C\u3002
core.statemanager.cantsetkeyfield=JDO76203: \u65E0\u6CD5\u8BBE\u7F6E\u4E3B\u952E\u5B57\u6BB5 {0} \u7684\u503C\u3002
core.statemanager.conflictingvalues=JDO76204: \u6620\u5C04\u5230\u540C\u4E00\u5217\u7684\u5B57\u6BB5 {0} \u548C\u5B57\u6BB5 {1} \u4E4B\u95F4\u7684\u503C\u51B2\u7A81
core.statemanager.getfieldfailed=JDO76205: \u65E0\u6CD5\u83B7\u53D6\u5B57\u6BB5\u3002
core.statemanager.invalidpk=JDO76206: \u91CD\u65B0\u52A0\u8F7D\u5177\u6709\u6301\u4E45\u6027\u7684\u7C7B {1} \u7684\u5B9E\u4F8B\u65F6, \u7A7A\u4E3B\u952E\u5B57\u6BB5 {0} \u65E0\u6548\u3002\u8BE5\u5B9E\u4F8B\u7684\u5BF9\u8C61 ID \u4E3A {2}\u3002
core.statemanager.nopkupdate=JDO76207: \u4E0D\u5141\u8BB8\u66F4\u65B0\u4E3B\u952E\u5B57\u6BB5\u3002
core.statemanager.nopm=JDO76208: \u72B6\u6001\u7BA1\u7406\u5668\u4E0D\u5305\u542B\u5BF9\u6301\u4E45\u6027\u7BA1\u7406\u5668\u7684\u5F15\u7528\u3002
core.statemanager.notnavigable=JDO76209: \u5C1D\u8BD5\u8BBF\u95EE\u7C7B {1} \u7684\u5B57\u6BB5 {0}\u3002\u8BE5\u5B57\u6BB5\u5148\u524D\u672A\u5B9E\u4F8B\u5316, \u5E76\u4E14\u6B64\u7C7B\u4E0D\u5141\u8BB8\u52A8\u6001\u5BFC\u822A\u3002\u60A8\u5FC5\u987B\u5728\u68C0\u7D22\u7C7B\u65F6\u8BF7\u6C42\u8BE5\u5B57\u6BB5, \u6216\u8005\u5141\u8BB8\u52A8\u6001\u5BFC\u822A, \u4EE5\u4FBF\u8BBF\u95EE\u65F6\u53EF\u4EE5\u81EA\u52A8\u68C0\u7D22\u8BE5\u5B57\u6BB5\u3002
core.statemanager.objectnotfound=JDO76210: \u5BF9\u8C61\u5728\u6570\u636E\u5B58\u50A8\u4E2D\u4E0D\u5B58\u5728\u3002
core.statemanager.poshiddenindex=JDO76211: \u9690\u85CF\u5B57\u6BB5\u7684\u7D22\u5F15\u5E94\u4E3A\u8D1F\u503C, \u4F46\u83B7\u53D6\u7684\u7D22\u5F15\u4E3A {0}\u3002
core.statemanager.readonly=JDO76212: \u5C1D\u8BD5\u4FEE\u6539\u7C7B {1} \u7684\u53EA\u8BFB\u5B57\u6BB5 {0}\u3002
core.statemanager.releaselock.wrongthread=JDO76213: \u7EBF\u7A0B {0} \u4E0D\u4FDD\u7559 StateManager \u9501\u5B9A\u3002
core.statemanager.setfieldfailed=JDO76214: \u65E0\u6CD5\u8BBE\u7F6E\u5B57\u6BB5\u3002
core.statemanager.wrongusageforoverlappingpkfkdelete=JDO76215: \u4E0D\u80FD\u5C1D\u8BD5\u4ECE\u7BA1\u7406\u7684\u5173\u7CFB\u4E2D\u5220\u9664\u5B9E\u4F8B\u3002\u5173\u7CFB\u7531\u53E6\u4E00\u65B9\u7684\u4E3B\u952E\u5217\u5B9A\u4E49\u3002\u96C6\u5408\u4E0A\u7684\u5220\u9664\u64CD\u4F5C\u9700\u8981\u66F4\u65B0\u53E6\u4E00\u65B9\u4E2D\u7684\u5217, \u4F46\u4E0D\u5141\u8BB8\u66F4\u65B0\u4E3B\u952E\u3002\u56E0\u6B64, \u8981\u4ECE\u7531\u4E3B\u952E\u5B9A\u4E49\u7684\u7BA1\u7406\u7684\u5173\u7CFB\u96C6\u5408\u4E2D\u5220\u9664\u5B9E\u4F8B, \u53EA\u80FD\u663E\u5F0F\u5220\u9664\u8BE5\u5B9E\u4F8B\u6216\u901A\u8FC7\u7EA7\u8054\u5220\u9664\u6765\u5220\u9664\u8BE5\u5B9E\u4F8B\u3002
core.statemanager.toomanyrows=JDO76215: \u4E3A\u6620\u5C04\u5230\u7C7B {0} \u7684\u4E00\u4E2A\u8868\u8FD4\u56DE\u4E86\u591A\u884C\u3002\u5BF9\u4E8E\u6BCF\u4E2A\u5BF9\u8C61\u5B9E\u4F8B, \u6BCF\u4E2A\u6620\u5C04\u5230\u7C7B\u7684\u8868\u5E94\u8BE5\u53EA\u6709\u4E00\u884C\u3002
core.statemanager.copyFields.mismatch=JDO76216: \u5C1D\u8BD5\u5C06\u5B57\u6BB5\u4ECE\u4E00\u4E2A StateManager \u590D\u5236\u5230\u53E6\u4E00\u4E2A StateManager, \u8BE5 StateManager \u7BA1\u7406\u4E0D\u540C\u7C7B\u578B\u7684\u5B9E\u4F8B: {0} \u548C {1}\u3002

#
# <NOI18N: StateManager>
#
sqlstore.sqlstatemanager.adddependency=<-> SQLStateManager.addDependency(), \u6B64 StateManager: {0}, \u5176\u4ED6 StateManager: {1}\u3002
sqlstore.sqlstatemanager.addupdate=<-> SQLStateManager.addUpdatedForeignReference(), lobj={0}, f={1}, fobj={2}, refCount={3}\u3002
sqlstore.sqlstatemanager.applyupdates.exit=<-- SqlStateManager.applyUpdates()\u3002
sqlstore.sqlstatemanager.applyupdates=--> SqlStateManager.applyUpdates(), \u5B57\u6BB5 = {0}\u3002
sqlstore.sqlstatemanager.clearpersistencefields.exit=<--- SqlStateManager.clearPersistenceFields()\u3002
sqlstore.sqlstatemanager.clearpersistencefields=--> SqlStateManager.clearPersistenceFields()\u3002
sqlstore.sqlstatemanager.copychanges.exit=<-- SQLStateManager.copyChanges()\u3002
sqlstore.sqlstatemanager.copychanges=--> SQLStateManager.copyChanges(), \u72B6\u6001\u7BA1\u7406\u5668 = {0}\u3002
sqlstore.sqlstatemanager.deletepersistence=<-> SqlStateManager.deletePersistence(), type = {0}\u3002
sqlstore.sqlstatemanager.getbeforeimage.exit=<-- SqlStateManager.getBeforeImage()\u3002
sqlstore.sqlstatemanager.getbeforeimage=--> SqlStateManager.getBeforeImage(), \u7C7B\u578B = {0}\u3002
sqlstore.sqlstatemanager.isbeforeimagerequired=isBeforeImageRequired \u4E3A : {0}\u3002
sqlstore.sqlstatemanager.loadforread.exit=<-- SQLStateManager.loadForRead()\u3002
sqlstore.sqlstatemanager.loadforread=--> SQLStateManager.loadForRead()\u3002
sqlstore.sqlstatemanager.loadforupdate.exit=<-- SQLStateManager.loadForUpdate()\u3002
sqlstore.sqlstatemanager.loadforupdate=--> SQLStateManager.loadForUpdate()\u3002
sqlstore.sqlstatemanager.loggingfield=\u65E5\u5FD7\u8BB0\u5F55\u5B57\u6BB5 = {0}, \u503C = {1}\u3002
sqlstore.sqlstatemanager.makedirty.fixscocollection=--- SqlStateManager.makeDirty(), fix SCOCollection\u3002
sqlstore.sqlstatemanager.makedirty.fixscodate=--- SqlStateManager.makeDirty(), \u4FEE\u590D SCODate\u3002
sqlstore.sqlstatemanager.makedirty=--> SqlStateManager.makeDirty(), \u5B57\u6BB5 = {0}\u3002
sqlstore.sqlstatemanager.makedirtyfield=\u6807\u8BB0\u7684\u810F\u5B57\u6BB5 = {0}\u3002
sqlstore.sqlstatemanager.makepersistence=<-> SqlStateManager.makePersistence(), \u7C7B\u578B = {0}\u3002
sqlstore.sqlstatemanager.makepresent=--> SqlStateManager.makePresent(), \u5B57\u6BB5 = {0}\u3002
sqlstore.sqlstatemanager.marking=\u6807\u8BB0: {0} \u4E3A\u5F53\u524D\u3002
sqlstore.sqlstatemanager.newtype=\u65B0\u7C7B\u578B: {0}\u3002
sqlstore.sqlstatemanager.nosuchmethodexcep.clone=\u5F02\u5E38\u9519\u8BEF: {0}  \u514B\u9686... \u9488\u5BF9\u7C7B\u578B {1}\u3002
sqlstore.sqlstatemanager.preparegetfield.exit=<-- SqlStateManager.prepareGetField()\u3002
sqlstore.sqlstatemanager.preparegetfield=--> SqlStateManager.prepareGetField(), \u540D\u79F0 = {0}\u3002
sqlstore.sqlstatemanager.preparesetfield.exit=<-- SQLStateManager.prepareSetField()\u3002
sqlstore.sqlstatemanager.preparesetfield=--> SQLStateManager.prepareSetField(), \u540D\u79F0 = {0}\u3002
sqlstore.sqlstatemanager.preparetoupdateph1.exit=<-- SqlStateManager.prepareToUpdateI()\u3002
sqlstore.sqlstatemanager.preparetoupdateph1=--> SqlStateManager.prepareToUpdatePhaseI(), \u7C7B\u578B = {0}\u3002
sqlstore.sqlstatemanager.preparetoupdateph2.exit=<-- SqlStateManager.prepareToUpdateII()\u3002
sqlstore.sqlstatemanager.preparetoupdateph2=--> SqlStateManager.prepareToUpdatePhaseII(), \u7C7B\u578B = {0}\u3002
sqlstore.sqlstatemanager.preparetoupdateph3.exit=<-- SqlStateManager.prepareToUpdateIII()\u3002
sqlstore.sqlstatemanager.preparetoupdateph3=--> SqlStateManager.prepareToUpdatePhaseIII(), \u7C7B\u578B = {0}\u3002
sqlstore.sqlstatemanager.prepareupdatefield.exit=<-- SQLStateManager.prepareUpdateField()\u3002
sqlstore.sqlstatemanager.prepareupdatefield=--> SQLStateManager.prepareUpdateField(), \u540D\u79F0 = {0}, \u72B6\u6001: {1}\u3002
sqlstore.sqlstatemanager.prepareupdatefieldspl.exit=<-- SQLStateManager.prepareUpdateFieldSpecial()\u3002
sqlstore.sqlstatemanager.prepareupdatefieldspl=--> SQLStateManager.prepareUpdateFieldSpecial, \u540D\u79F0 = {0}, \u72B6\u6001: {1}\u3002
sqlstore.sqlstatemanager.processcollectionupdate.exit=<-- SQLStateManager.processCollectionUpdates()\u3002
sqlstore.sqlstatemanager.processcollectionupdate=--> SQLStateManager.processCollectionUpdates(), beforeList={0}, afterlist={1}\u3002
sqlstore.sqlstatemanager.processforeign=\u8FDB\u7A0B\u5916\u90E8\u5B57\u6BB5 ={0}\u3002
sqlstore.sqlstatemanager.processforeignfield.remove=-- SQLStateManager.processForeignField(): \u4E3A Collection - \u5220\u9664\u3002
sqlstore.sqlstatemanager.processforeignfield.remove_from_bi=-- SQLStateManager.processForeignField(): \u4E3A SCOCollection - \u4ECE BI \u5220\u9664\u3002
sqlstore.sqlstatemanager.processforeignfield.reset=-- SQLStateManager.processForeignField(): \u4E3A SCOCollection - \u91CD\u8BBE\u3002
sqlstore.sqlstatemanager.processforeignfield=-- SQLStateManager.processForeignField(): \u503C: {0} \u7C7B\u578B: {1}\u3002
sqlstore.sqlstatemanager.realizefield.exit=<-- SqlStateManager.realizeField()\u3002
sqlstore.sqlstatemanager.realizefield=--> SqlStateManager.realizeField(), \u540D\u79F0 = {0}\u3002
sqlstore.sqlstatemanager.realizeforeignfield.exit=<-- SqlStateManager.realizeField(), \u5B9E\u73B0\u7684\u5B57\u6BB5 = {0}\u3002
sqlstore.sqlstatemanager.realizeforeignfield=--> SqlStateManager.realizeField(), \u540D\u79F0 = {0}\u3002
sqlstore.sqlstatemanager.recordingfield=\u8BB0\u5F55\u5B57\u6BB5 = {0}\u3002
sqlstore.sqlstatemanager.refreshpersistent.exit=<-- SqlStateManager.refreshPersistent()\u3002
sqlstore.sqlstatemanager.refreshpersistent=--> SqlStateManager.refreshPersistence(), \u7C7B\u578B = {0}\u3002
sqlstore.sqlstatemanager.reload.exit=<-- SqlStateManager.reload(FieldDesc)\u3002
sqlstore.sqlstatemanager.reload=--> SqlStateManager.reload(FieldDesc), \u7C7B\u578B = {0}, \u5B57\u6BB5 = {1}\u3002
sqlstore.sqlstatemanager.removeupdate=<-> SQLStateManager.removeUpdatedForeignReference(), lobj={0}, f={1}, fobj={2}, refCount={3}\u3002
sqlstore.sqlstatemanager.replaceobjectfield.unsetsco=-- SqlStateManager.replaceObjectField(), \u53D6\u6D88\u8BBE\u7F6E SCO\u3002
sqlstore.sqlstatemanager.replaceobjectfield=-- SqlStateManager.replaceObjectField(), \u5B57\u6BB5 = {0}, \u7C7B\u578B = {1}\u3002
sqlstore.sqlstatemanager.reset=--> SqlStateManager.reset(), retValues = {0}, wasNew: {1}, keepState: {2}\u3002
sqlstore.sqlstatemanager.resettingcollection=\u91CD\u8BBE\u96C6\u5408\u3002
sqlstore.sqlstatemanager.resettingdate=\u91CD\u8BBE\u65E5\u671F\u3002
sqlstore.sqlstatemanager.resolvedependencies=<-> SQLStateManager.resolveDependencies(), obj={0}\u3002
sqlstore.sqlstatemanager.resolvedependency=<-> SQLStateManager.resolveDependency(), \u5DF2\u89E3\u6790\u4F9D\u8D56\u6027: lobj={0}, f={1}, fobj={2}\u3002
sqlstore.sqlstatemanager.retrieve.exit=<-- SqlStateManager.retrieve()\u3002
sqlstore.sqlstatemanager.retrieve=--> SqlStateManager.retrieve(), \u540D\u79F0 = {0}\u3002
sqlstore.sqlstatemanager.retrieveforeign.exit=<-- SqlStateManager.retrieveForeign()\u3002
sqlstore.sqlstatemanager.retrieveforeign=--> SqlStateManager.retrieveForeign(), \u540D\u79F0 = {0}\u3002
sqlstore.sqlstatemanager.unsetmask=\u53D6\u6D88\u8BBE\u7F6E\u5B57\u6BB5\u7684\u63A9\u7801 = {0}\u3002
sqlstore.sqlstatemanager.unconditionalreload.exit=<-- SqlStateManager.reload()\u3002
sqlstore.sqlstatemanager.unconditionalreload=--> SqlStateManager.reload(), \u7C7B\u578B = {0}\u3002
sqlstore.sqlstatemanager.updatebeforeimage=<-> SQLStateManager.updateBeforeImage(), \u540D\u79F0 = {0}, \u503C = {1}\u3002
sqlstore.sqlstatemanager.updateobjfield.exit=<-- SQLStateManager.updateObjectField()\u3002
sqlstore.sqlstatemanager.updateobjfield=--> SQLStateManager.updateObjectField(), \u540D\u79F0 = {0}, \u7C7B\u578B = {1}\u3002
sqlstore.sqlstatemanager.updatepersistent.exit=<-- SqlStateManager.updatePersistent()\u3002
sqlstore.sqlstatemanager.updatepersistent.immediateflush=<--> SqlStateManager.updatePersistent(), \u9700\u8981\u7ACB\u5373\u66F4\u65B0: \u5BF9\u8C61={0}, \u4E0B\u4E00\u4E2A={1}\u3002
sqlstore.sqlstatemanager.updatepersistent.skipped=<--> SqlStateManager.updatePersistent() \u5DF2\u8DF3\u8FC7, \u7C7B\u578B ={0}, \u5BF9\u8C61= {1}\u3002
sqlstore.sqlstatemanager.updatepersistent=--> SqlStateManager.updatePersistent(), \u7C7B\u578B = {0}\u3002
sqlstore.sqlstatemanager.updatetrackedfields.exit=<-- updateTrackedFields()\u3002
sqlstore.sqlstatemanager.updatetrackedfields=--> updateTrackedFields(), f = {0} \u503C = {1}  fieldToIgnore = {2}\u3002


###############################################################################
# <sql generator components: All the source files under sql.>
# Message ID Range: JDO76300 - JDO76399
###############################################################################
core.constraint.duporderby=JDO76300: \u5B57\u6BB5 {0} \u7684\u7EA6\u675F\u6761\u4EF6\u4E3A "order by", \u8BE5\u5B57\u6BB5\u5DF2\u5728\u4E00\u4E2A "order by" \u7EA6\u675F\u6761\u4EF6\u4E2D\u88AB\u6307\u5B9A\u3002
core.constraint.fielddisallowed=JDO76301: \u5DF2\u6307\u5B9A fieldName \u53C2\u6570, \u4F46\u64CD\u4F5C {0} \u4E0D\u5141\u8BB8\u8BE5\u53C2\u6570\u3002
core.constraint.fieldrequired=JDO76302: \u7F3A\u5C11 fieldName \u53C2\u6570, \u4F46\u64CD\u4F5C {0} \u9700\u8981\u4E00\u4E2A\u5B57\u6BB5\u3002
core.constraint.illegalParameterInfo=JDO76303: \u8C03\u7528 OP_PARAMETER \u7684 addConstraint() \u5FC5\u987B\u4F7F\u7528 ParameterInfo \u7C7B\u578B\u7684\u503C\u3002
core.constraint.illegalnode=JDO76304: SqlConstraint \u5806\u6808\u4E2D\u7684\u7EA6\u675F\u6761\u4EF6\u8282\u70B9 {0} \u4E0D\u5408\u6CD5\u3002
core.constraint.illegalop=JDO76305: \u64CD\u4F5C\u53C2\u6570\u5305\u542B\u975E\u6CD5\u503C {0}\u3002
core.constraint.needfieldnamenode=JDO76306: \u7EA6\u675F\u6761\u4EF6\u5806\u6808\u4E2D\u6709\u9519\u8BEF\u3002\u9700\u8981\u5B57\u6BB5\u540D\u79F0\u3002
core.constraint.needfieldnode=JDO76307: \u7EA6\u675F\u6761\u4EF6\u5806\u6808\u4E2D\u6709\u9519\u8BEF\u3002\u9700\u8981\u5B57\u6BB5\u8BF4\u660E\u3002
core.constraint.needvalnode=JDO76308: \u7EA6\u675F\u6761\u4EF6\u5806\u6808\u4E2D\u6709\u9519\u8BEF\u3002\u9700\u8981\u4E00\u4E2A\u503C\u3002
core.constraint.stackempty=JDO76309: \u7EA6\u675F\u6761\u4EF6\u5806\u6808\u4E3A\u7A7A - \u5BF9\u4E8E\u8FD0\u7B97\u7B26\u7684\u6570\u91CF\u6CA1\u6709\u8DB3\u591F\u7684\u503C\u3002
core.constraint.unknownfield=JDO76310: \u68C0\u7D22\u63CF\u8FF0\u7B26\u4E2D\u6307\u5B9A\u7684\u5B57\u6BB5 {0} \u4E0D\u662F\u7C7B {1} \u7684\u6210\u5458\u3002
core.constraint.valdisallowed=JDO76311: \u5DF2\u6307\u5B9A value \u53C2\u6570, \u4F46\u64CD\u4F5C {0} \u4E0D\u5141\u8BB8\u8BE5\u53C2\u6570\u3002
core.constraint.valrequired=JDO76312: \u7F3A\u5C11 value \u53C2\u6570, \u4F46\u64CD\u4F5C {0} \u9700\u8981\u4E00\u4E2A\u503C\u3002
sqlstore.resultdesc.errorgettingvalefromresulset=JDO76313: \u4ECE\u7D22\u5F15\u4E3A {0} \u7684\u7ED3\u679C\u96C6\u4E2D\u83B7\u53D6\u7ED3\u679C\u7C7B\u578B\u4E3A {1} \u7684\u503C\u65F6\u51FA\u73B0\u9519\u8BEF\u3002columnSqlType {2}\u3002\u5F02\u5E38\u9519\u8BEF: {3}
sqlstore.resultdesc.foreignfieldprojection=JDO76314: {0} \u7684\u67E5\u8BE2\u4E0D\u5E94\u5728\u5173\u7CFB\u5B57\u6BB5\u4E0A\u6709\u6295\u5F71\u3002
sqlstore.resultdesc.unknownfieldtype=JDO76317: \u9047\u5230\u672A\u77E5\u5B57\u6BB5\u7C7B\u578B {0}\u3002
sqlstore.retrievedesc.toomanyprojections=JDO76318: \u4E0D\u80FD\u4E3A RetrieveDesc \u8BBE\u7F6E\u591A\u4E2A\u6295\u5F71\u3002
sqlstore.retrievedesc.toomanyresulttypes=JDO76319: \u4E0D\u80FD\u4E3A RetrieveDesc \u8BBE\u7F6E\u591A\u4E2A\u7ED3\u679C\u7C7B\u578B\u3002
sqlstore.selectstatement.noupdatelocksupport=JDO76320: \u6B64\u67E5\u8BE2\u4E2D\u6D89\u53CA\u7684\u4E00\u4E2A\u5BF9\u8C61\u7C7B\u578B\u7684\u4E00\u81F4\u6027\u7EA7\u522B\u4E3A "\u52A0\u8F7D\u65F6\u9501\u5B9A"\u3002\u6267\u884C\u8BE5\u4E00\u81F4\u6027\u7EA7\u522B\u9700\u8981\u6570\u636E\u5B58\u50A8\u652F\u6301\u884C\u7EA7\u66F4\u65B0\u9501\u5B9A\u3002\u8BE5\u6570\u636E\u5B58\u50A8\u4E0D\u652F\u6301\u884C\u7EA7\u66F4\u65B0\u9501\u5B9A\u3002
sqlstore.sql.generator.statement.likeescapenotsupported=JDO76321: \u6B64\u6570\u636E\u5E93\u4E2D\u4E0D\u652F\u6301 LIKE ESCAPE \u5B50\u53E5\u3002
sqlstore.sql.generator.statement.positionthreeargsnotsupported=JDO76322: Third arg for POSITION clause must be 1.
core.configuration.classnotmapped=JDO76323: \u672A\u6620\u5C04\u7C7B {0}\u3002
core.configuration.classnotmappedtotable=JDO76324: \u7C7B {0} \u672A\u6620\u5C04\u5230\u8868 {1}\u3002
sqlstore.sql.generator.statement.unexpectedconstraint=JDO76325: \u64CD\u4F5C {0} \u7684\u7EA6\u675F\u6761\u4EF6\u6C38\u8FDC\u4E0D\u4F1A\u6210\u4E3A where \u5B50\u53E5\u7684\u6839\u3002

# <I18N: sql generator>
# Following messages are used within other messages. They need to be i18ned but need not be numbered.
#
sqlstore.sql.generator.statement.sqlStatement=SQL \u8BED\u53E5
sqlstore.sql.generator.statement.withinputvalues= \u8F93\u5165\u503C:
sqlstore.sql.generator.statement.withnoinputvalues= \u6CA1\u6709\u8F93\u5165\u503C\u3002


#
# <ResultDesc NOI18N>
#
sqlstore.resultdesc.deserializing=\u53CD\u5E8F\u5217\u5316 = {0}\u3002
sqlstore.resultdesc.marking_field=\u5C06\u672C\u5730\u5B57\u6BB5 {0} \u6807\u8BB0\u4E3A\u5F53\u524D\u3002
sqlstore.resultdesc.marking_foreign_field=\u5C06\u5916\u90E8\u5B57\u6BB5 {0} \u6807\u8BB0\u4E3A\u5F53\u524D\u3002
sqlstore.resultdesc.marking_key_field=\u5C06\u5173\u952E\u5B57\u6BB5 {0} \u6807\u8BB0\u4E3A\u5F53\u524D\u3002
sqlstore.resultdesc.returning_field=\u5C06\u5B57\u6BB5 {0} \u8FD4\u56DE\u4E3A\u6620\u5C04\u3002
#
# <Misc. SQLStore NOI18N >
#
sqlstore.sql.concurrency.concurrencychkdirty.exit=--> ConcurrencyCheckDirty.update()\u3002
sqlstore.sql.concurrency.concurrencychkdirty=--> ConcurrencyCheckDirty.update(), beforeImage = {0}\u3002
sqlstore.sql.concurrencyoptverify.resumetx=<--> ConcurrencyOptVerify.resume(), \u6062\u590D\u7684\u4E8B\u52A1\u5904\u7406 = {0}\u3002
sqlstore.sql.concurrencyoptverify.suspendtx=<--> ConcurrencyOptVerify.suspend(), \u6302\u8D77\u7684\u4E8B\u52A1\u5904\u7406 = {0}\u3002
sqlstore.sql.concurrencyoptverify.update.exit=<-- ConcurrencyOptVerify.update()\u3002
sqlstore.sql.concurrencyoptverify.update=--> ConcurrencyOptVerify.update(), beforeImage = {0}\u3002
sqlstore.sql.generator.dbstatement.addbatch=addbatch ({0})
sqlstore.sql.generator.dbstatement.bindinputcolumn=bindInputColumn \u7D22\u5F15: {0} \u503C: {1} sqlType: {2}\u3002
sqlstore.sql.generator.dbstatement.executebatch=executeBatch \u6B63\u5728\u6267\u884C {0} \u547D\u4EE4
sqlstore.sql.generator.selectqueryplan.processforeignfield.exit=<-- SelectQueryPlan.processForeignFields()\u3002
sqlstore.sql.generator.selectqueryplan.processforeignfield=--> SelectQueryPlan.processForeignFields(), \u7C7B = {0}\u3002
sqlstore.sql.generator.selectqueryplan.processlocalfield.exit=<-- SelectQueryPlan.processLocalFields()\u3002
sqlstore.sql.generator.selectqueryplan.processlocalfield=--> SelectQueryPlan.processLocalFields(), \u7C7B = {0}\u3002
sqlstore.sql.generator.selectqueryplan.processstmts.exit=<-- SelectQueryPlan.processStatements()\u3002
sqlstore.sql.generator.selectqueryplan.processstmts=--> SelectQueryPlan.processStatements(), \u7C7B = {0}, \u8BED\u53E5 = {1}\u3002
sqlstore.sql.updateobjdescimpl.afterimagenull=AfterImage is not set.
sqlstore.sql.updateobjdescimpl.beforeimagenull=\u672A\u8BBE\u7F6E BeforeImage\u3002
sqlstore.sql.updateobjdescimpl.markrelationshipchange=<--> UpdateDesc.markRelationshipChange()\u3002
sqlstore.sql.updateobjdescimpl.updated={0} \u5DF2\u66F4\u65B0\u3002


###############################################################################
# <SQLStoreManager>
# Message ID Range: JDO76400 - JDO76499
###############################################################################
#
# <SQLStoreManager>
#
core.persistencestore.jdbcerror=JDO76400: \u6267\u884C SQL \u8BED\u53E5\u65F6\u6536\u5230 JDBC SQLException:\n{0}\u3002\n\u8BF7\u67E5\u770B SQLException \u4EE5\u83B7\u5F97\u8BE6\u7EC6\u4FE1\u606F\u3002
sqlstore.retrievedesc.stmntsnotjoined=JDO76401: \u4E00\u4E2A RetrieveDesc \u4E0D\u652F\u6301\u591A\u4E2A SQL \u8BED\u53E5\u3002
core.persistencestore.toofewrows=JDO76402: \u5C1D\u8BD5\u83B7\u53D6\u7C7B {0} \u7684\u5173\u8054 {1} \u7684\u503C\u65F6, \u4ECE\u6570\u636E\u5E93\u8FD4\u56DE\u7684\u884C\u6570\u5C11\u4E8E\u6B64\u5173\u8054\u6240\u5141\u8BB8\u7684\u57FA\u6570\u3002\u5141\u8BB8\u7684\u6700\u5C0F\u884C\u6570\u4E3A {2}\u3002
core.persistencestore.toomanyobjforcard1=JDO76403: \u6570\u636E\u5E93\u4E0E\u6301\u4E45\u6027\u6A21\u578B\u4E0D\u4E00\u81F4\u3002\u5C1D\u8BD5\u901A\u8FC7 {0} \u7C7B\u7684 {1} \u5173\u8054\u68C0\u7D22\u6D89\u53CA\u7684\u5BF9\u8C61, \u7ED3\u679C\u68C0\u7D22\u5230 {2} \u4E2A\u9879\u76EE, \u4F46\u7531\u4E8E\u6B64\u5173\u8054\u7684\u57FA\u6570\u4E0A\u9650\u4E3A 1, \u6240\u4EE5\u53EA\u80FD\u63A5\u53D7 1 \u4E2A\u9879\u76EE\u3002
core.persistencestore.toomanyrows=JDO76405: \u5C1D\u8BD5\u83B7\u53D6\u7C7B {0} \u7684\u5173\u8054 {1} \u7684\u503C\u65F6, \u4ECE\u6570\u636E\u5E93\u8FD4\u56DE\u7684\u884C\u6570\u591A\u4E8E\u6B64\u5173\u8054\u6240\u5141\u8BB8\u7684\u57FA\u6570\u3002\u5141\u8BB8\u7684\u6700\u5927\u884C\u6570\u4E3A {2}\u3002
core.store.concurrentaccess=JDO76406: \u5E76\u884C\u8BBF\u95EE\u5F02\u5E38\u9519\u8BEF: {0} \u7684\u5BF9\u8C61\u5DF2\u88AB\u53E6\u4E00\u4E2A\u4E8B\u52A1\u5904\u7406\u66F4\u65B0\u6216\u5220\u9664\u3002
sqlstore.sqlstoremanager.errorcloseresultset=JDO76407: \u5173\u95ED SQL \u7ED3\u679C\u96C6\u65F6\u51FA\u73B0\u9519\u8BEF\u3002\u5F02\u5E38\u9519\u8BEF: {0}
sqlstore.sqlstoremanager.errorclosestatement=JDO76408: \u5173\u95ED SQL \u8BED\u53E5\u65F6\u51FA\u73B0\u9519\u8BEF\u3002\u5F02\u5E38\u9519\u8BEF: {0}
sqlstore.sql.generator.selectqueryplan.plansnotjoined=JDO76409: \u4E00\u4E2A RetrieveDesc \u4E0D\u652F\u6301\u591A\u4E2A\u67E5\u8BE2\u8BA1\u5212\u3002

#
# <NOI18N: SQLStoreManager>
#
sqlstore.sqlstoremanager.executeQuery.exit=<-- SQLStoreManager.executeQuery()\u3002
sqlstore.sqlstoremanager.executeQuery=--> SQLStoreManager.executeQuery()\u3002
sqlstore.sqlstoremanager.executeupdate.exit=<-- SQLStoreManager.executeUpdate(), rows affected = {0}\u3002
sqlstore.sqlstoremanager.executeupdate=--> SQLStoreManager.executeUpdate()\u3002
sqlstore.sqlstoremanager.executeupdatebatch.addbatch={0}; \u6DFB\u52A0\u6279\u5904\u7406\u3002
sqlstore.sqlstoremanager.executeupdatebatch.exit=<-- SQLStoreManager.executeUpdateBatch()\u3002
sqlstore.sqlstoremanager.executeupdatebatch.exit.flush=<-- SQLStoreManager.executeUpdateBatch(), \u53D7\u5F71\u54CD\u7684\u884C = {0}\u3002
sqlstore.sqlstoremanager.executeupdatebatch.flushbatch={0}; \u66F4\u65B0\u6279\u5904\u7406\u3002
sqlstore.sqlstoremanager.executeupdatebatch=--> SQLStoreManager.executeUpdateBatch()\u3002
sqlstore.sqlstoremanager.getpersistenceconfig=<--> SQLStoreManager.getPersistenceConfig(), classType = {0}\u3002
sqlstore.sqlstoremanager.selectnoncorrelated.exit=<-- SQLStoreManager.selectNonCorrelated()\u3002
sqlstore.sqlstoremanager.selectnoncorrelated=--> SQLStoreManager.selectNonCorrelated()\u3002
sqlstore.sqlstoremanager.vendortype=<--> SQLStoreManager: \u4F9B\u5E94\u5546\u7C7B\u578B = {0}\u3002


###############################################################################
# <Connection/Connectionpool/DBVendorType/TransactionImpl/OracleSpecialDBOperation>
# Message ID Range: JDO76500 - JDO76599
###############################################################################
#
# <Connection/Connection Pool> - database
#
connection.connectionmanager.badnew=JDO76500: \u65B0\u7684 ''{0}'' \u5FC5\u987B\u5927\u4E8E\u7B49\u4E8E\u5F53\u524D\u7684 ''{1}''\u3002
connection.connectionmanager.badvalue=JDO76501:  ''{0}'' \u7684\u503C\u65E0\u6548\u3002
connection.connectionmanager.conntimeout=JDO76502: \u8FDE\u63A5\u8D85\u65F6\u5DF2\u8FC7\u671F\u3002
connection.connectionmanager.getconnection.mismatch=JDO76503: \u6C60\u8FDE\u63A5\u6CA1\u6709\u76F8\u540C\u7684\u7528\u6237\u4E0A\u4E0B\u6587\u3002
connection.connectionmanager.isdown=JDO76504: \u6B63\u5728\u5173\u95ED Connection Manager\u3002
connection.connectionmanager.maxpool=JDO76505: \u8FDE\u63A5\u6C60\u5DF2\u8FBE\u5230\u6700\u5927\u3002
connection.connectionmanager.msintervalvalue=JDO76506: MsInterval \u5FC5\u987B\u5927\u4E8E\u96F6\u4E14\u5C0F\u4E8E\u7B49\u4E8E MsWait\u3002
connection.connectionmanager.mswaitvalue=JDO76507: MsWait \u5FC5\u987B\u5927\u4E8E\u7B49\u4E8E\u96F6\u3002
connection.connectionmanager.nulldriver=JDO76508: \u9A71\u52A8\u7A0B\u5E8F\u540D\u4E3A\u7A7A\u503C\u3002
connection.connectionmanager.nullurl=JDO76509: URL \u4E3A\u7A7A\u503C\u3002
connection.connectionmanager.poolsize=JDO76510: 'maxPool' \u5FC5\u987B\u5927\u4E8E\u7B49\u4E8E 'minPool'\u3002
connection.connectionmanager.threaditerupted=JDO76511: \u7EBF\u7A0B\u5DF2\u4E2D\u65AD\u3002
connection.connectionmanager.zero=JDO76512:  ''{0}'' \u5FC5\u987B\u5927\u4E8E\u7B49\u4E8E\u96F6\u3002
#
# <DBVendorType>
#
sqlstore.database.dbvendor.cantloadDefaultProperties=JDO76513: \u65E0\u6CD5\u52A0\u8F7D\u9ED8\u8BA4\u6570\u636E\u5E93\u7684\u5C5E\u6027\u3002
sqlstore.database.dbvendor.init.default=JDO76514: -->\u65E0\u6CD5\u52A0\u8F7D\u4F9B\u5E94\u5546\u7C7B\u578B {0} \u7684\u5C5E\u6027, \u5C06\u4F7F\u7528\u9ED8\u8BA4\u503C\u3002
sqlstore.database.dbvendor.cantinstantiateclass=JDO76515: \u65E0\u6CD5\u5B9E\u4F8B\u5316\u7C7B {0}\u3002
#
# <OracleSpecialDBOperation>
#
sqlstore.database.oracle.defineCol=JDO76516: \u65E0\u6CD5\u5B9A\u4E49\u8BED\u53E5\u7684\u5217\u3002
sqlstore.database.oracle.nooracleavailable=JDO76517: \u521D\u59CB\u5316 Oracle \u8D44\u6E90\u5DE5\u5382 ''{0}'' \u65F6, \u65E0\u6CD5\u83B7\u53D6 oracle.jdbc.OraclePreparedStatement \u6216 oracle.jdbc.driver.OraclePreparedStatement \u7684\u5B9E\u4F8B\u3002Oracle \u7279\u5B9A\u4F18\u5316\u5C06\u88AB\u7981\u7528\u3002\u5982\u679C\u4F7F\u7528\u8BE5\u8D44\u6E90\u7684\u5B9E\u4F8B\u9700\u8981\u7ED1\u5B9A\u6620\u5C04\u4E3A\u56FA\u5B9A\u5B57\u7B26\u5217\u7684\u5217\u7684\u503C, \u5219\u5C06\u7528\u7A7A\u683C\u586B\u5145\u8FD9\u4E9B\u503C\u4EE5\u8FBE\u5230\u76F8\u5E94 dbschema \u6587\u4EF6\u4E2D\u6307\u5B9A\u7684\u957F\u5EA6\u3002
sqlstore.database.oracle.fixedcharpadded=JDO76518: \u503C "{0}" \u88AB\u7ED1\u5B9A\u5230 CHAR \u5217\u3002\u8FD9\u9700\u8981\u5728 Oracle \u4E2D\u8FDB\u884C\u7279\u6B8A\u5904\u7406\u3002\u7531\u4E8E\u65E0\u6CD5\u4ECE\u9A71\u52A8\u7A0B\u5E8F\u4E2D\u83B7\u53D6\u7C7B OraclePreparedStatement, \u5C06\u7528\u7A7A\u683C\u586B\u5145\u8BE5\u503C\u4EE5\u8FBE\u5230\u6355\u83B7\u7684 dbschema \u6587\u4EF6\u4E2D\u6307\u5B9A\u7684\u957F\u5EA6 {1}\u3002
#
# <Misc.>
#
core.configuration.getvendortypefailed=JDO76519: \u65E0\u6CD5\u6807\u8BC6\u6570\u636E\u5B58\u50A8\u7684\u4F9B\u5E94\u5546\u7C7B\u578B\u3002
jdo.sqlpersistencemanagerfactory.errorgettingDatabaseInfo=JDO76520: \u83B7\u53D6\u6709\u5173\u6570\u636E\u5E93\u7684\u4FE1\u606F\u65F6\u51FA\u73B0\u9519\u8BEF\u3002\u53D1\u751F\u4EE5\u4E0B\u5F02\u5E38\u9519\u8BEF:

#
# <NOI18N: Connection>
#
sqlstore.connection.conncectiomgr.found=<--> ConnectionManager.getConnection: \u627E\u5230{0}\u3002
sqlstore.connection.conncectiomgr.getnewconn=<--> ConnectionManager.getConnection: \u65B0{0}\u3002
sqlstore.connection.conncectiomgr.replacefreeconn=<--> ConnectionManager.replaceFreeConnection: \u7A7A\u95F2{0}\u3002
sqlstore.connectionimpl.clearxact.close=--- ConnectionImpl.clearXact: \u8FDE\u63A5\u5DF2\u5173\u95ED\u3002
sqlstore.connectionimpl.clearxact.disassocxact=--- ConnectionImpl.clearXact: disassociateXact\u3002
sqlstore.connectionimpl.clearxact=--- ConnectionImpl.clearXact: \u3002
sqlstore.connectionimpl.close.connrelease=<--- ConnectionImpl.close: \u8FDE\u63A5\u5DF2\u91CA\u653E\u3002
sqlstore.connectionimpl.close.exit=<--- ConnectionImpl.close: \u8FDE\u63A5\u5DF2\u5173\u95ED\u3002
sqlstore.connectionimpl.close.freepending=<--- ConnectionImpl.close: \u8BBE\u7F6E FreePending\u3002
sqlstore.connectionimpl.close.putfreelist=<--- ConnectionImpl.close: \u653E\u5728 freeList \u4E2D\u3002
sqlstore.connectionimpl.close.replaced=<--- ConnectionImpl.close: \u8FDE\u63A5\u5DF2\u66FF\u6362\u3002
sqlstore.connectionimpl.close=---> ConnectionImpl.close\u3002
sqlstore.connectionimpl.close_arg=---> ConnectionImpl.close: {0}\u3002
sqlstore.connectionimpl.commit=--- ConnectionImpl.commit: \u8FDE\u63A5\u5DF2\u5173\u95ED\u3002
sqlstore.connectionimpl.finalize=--- ConnectionImpl.finalize: \u8FDE\u63A5\u5DF2\u5173\u95ED\u3002
sqlstore.connectionimpl.internalcommit=--- ConnectionImpl.internalCommit: \u3002
sqlstore.connectionimpl.pendingdisassocxact=--- ConnectionImpl.clearXact: \u6682\u6302 disassociateXact\u3002
sqlstore.connectionimpl.rollback.close=--- ConnectionImpl.rollback: \u8FDE\u63A5\u5DF2\u5173\u95ED\u3002
sqlstore.connectionimpl.rollback=--- ConnectionImpl.rollback:\u3002
#
# <NOI18N: DBVendorType>
#
sqlstore.database.dbvendor.castRequiredForNumericValues=<-> DBVendorType.isCastRequiredForNumericValues(): {0}\u3002
sqlstore.database.dbvendor.getModFunctionName=<-> DBVendorType.getModFunctionName(): {0}\u3002
sqlstore.database.dbvendor.getNullComparisonFunctionName=<-> DBVendorType.getNullComparisonFunctionName(): {0}\u3002
sqlstore.database.dbvendor.getConcatCast=<-> DBVendorType.getConcatCast(): {0}\u3002
sqlstore.database.dbvendor.getSpecialDBOperation=<-> DBVendorType.getSpecialDBOperation(): {0}\u3002
sqlstore.database.dbvendor.getabs=<-> DBVendorType.getAbs(): {0}\u3002
sqlstore.database.dbvendor.getcharlength=<-> DBVendorType.getCharLength(): {0}\u3002
sqlstore.database.dbvendor.getforupdate=<-> DBVendorType.getForUpdate(): {0}\u3002
sqlstore.database.dbvendor.getholdlock=<-> DBVendorType.getHoldlock(): {0}\u3002
sqlstore.database.dbvendor.getisnotnull=<-> DBVendorType.getIsNotNull(): {0}\u3002
sqlstore.database.dbvendor.getisnull=<-> DBVendorType.getIsNull(): {0}\u3002
sqlstore.database.dbvendor.getleftjoin=<-> DBVendorType.getLeftJoin(): {0}\u3002
sqlstore.database.dbvendor.getleftjoinpost=<-> DBVendorType.getLeftJoinPost(): {0}\u3002
sqlstore.database.dbvendor.getleftlikeescape=<-> DBVendorType.getLeftLikeEscape(): {0}\u3002
sqlstore.database.dbvendor.getnotequal=<-> DBVendorType.getNotEqual(): {0}\u3002
sqlstore.database.dbvendor.getposition3args=<-> DBVendorType.getPositionThreeArrgs(): {0}\u3002
sqlstore.database.dbvendor.getposition=<-> DBVendorType.getPosition(): {0}\u3002
sqlstore.database.dbvendor.getpositionin=<-> DBVendorType.getPositionIn(): {0}\u3002
sqlstore.database.dbvendor.getpositionsrchsrc=<-> DBVendorType.getPositionSearchSource(): {0}\u3002
sqlstore.database.dbvendor.getquotecharstart=<-> DBVendorType.getQuoteCharStart(): {0}\u3002
sqlstore.database.dbvendor.getrightjoinipre=<-> DBVendorType.getRightJoin(): {0}\u3002
sqlstore.database.dbvendor.getrightlikeescape=<-> DBVendorType.getRightLikeEscape(): {0}\u3002
sqlstore.database.dbvendor.getrtrim=<-> DBVendorType.getRtrim(): {0}\u3002
sqlstore.database.dbvendor.getrtrimpost=<-> DBVendorType.getRtrimPost(): {0}\u3002
sqlstore.database.dbvendor.getsqrt=<-> DBVendorType.getSqrt(): {0}\u3002
sqlstore.database.dbvendor.getstringconcat=<-> DBVendorType.getStringConcat(): {0}\u3002
sqlstore.database.dbvendor.getsubstring=<-> DBVendorType.getSubstring(): {0}\u3002
sqlstore.database.dbvendor.getsubstringfor=<-> DBVendorType.getSubstringFor(): {0}\u3002
sqlstore.database.dbvendor.getsubstringfrom=<-> DBVendorType.getSubstringFrom(): {0}\u3002
sqlstore.database.dbvendor.gettablelistend=<-> DBVendorType.getTableListEnd(): {0}\u3002
sqlstore.database.dbvendor.gettableliststart=<-> DBVendorType.getTableListStart(): {0}\u3002
sqlstore.database.dbvendor.isAnsiTrim=<-> DBVendorType.isAnsiTrim(): {0}\u3002
sqlstore.database.dbvendor.isInlineNumeric=<-> DBVendorType.isInlineNumeric(): {0}\u3002
sqlstore.database.dbvendor.isNativeOuterJoin=<-> DBVendorType.isNativeOuterJoin(): {0}\u3002
sqlstore.database.dbvendor.isParameterCast=<-> DBVendorType.isParameterCast(): {0}\u3002
sqlstore.database.dbvendor.isdistinctupdatelocksupported=<-> DBVendorType.isDistinctSupportedWithUpdateLock(): {0}\u3002
sqlstore.database.dbvendor.islockcolumnlistsupported=<-> DBVendorType.isLockColumnListSupported(): {0}\u3002
sqlstore.database.dbvendor.isupdatelocksupported=<-> DBVendorType.isUpdateLockSupported(): {0}\u3002
sqlstore.database.dbvendor.mapemptystrtonull=<-> DBVendorType.mapEmptyStringToNull(): {0}\u3002
sqlstore.database.dbvendor.overrideproperties.with=<-> DBVendorType.overrideProperties() : {0} \u4E3A: {1}\u3002
sqlstore.database.dbvendor.overrideproperties=<-> DBVendorType.overrideProperties() - NONE.
sqlstore.database.dbvendor.supportslikeescape=<-> DBVendorType.supportsLikeEscape(): {0}\u3002
sqlstore.database.dbvendor.vendorname=<-> DBVendorType(), vendorName: [{0}]  vendorType: {1}\u3002
#
# <NOI18N: TransactionImpl>
#
sqlstore.transactionimpl.call.info={0} Tran[ {1} ].{2}: {3} \u9488\u5BF9 {4}\u3002
sqlstore.transactionimpl.call={0} Tran[ {1} ].{2}:status = {3}, txType: {4} for  {5}.
sqlstore.transactionimpl.closeconnection=--- TransactionImpl.closeConnection() {0} \u9488\u5BF9 {1}\u3002
sqlstore.transactionimpl.general={0}.
sqlstore.transactionimpl.getconnection=--- TransactionImpl.getConnection(): {0} TX optimistic: {1} referenceCount = {2} for {3}.
sqlstore.transactionimpl.releaseconnection=--- TransactionImpl.releaseConnection(): TX \u4E50\u89C2: {0} \u63D0\u4EA4\u5185\u90E8: {1} referenceCount: {2} \u9488\u5BF9 {3}\u3002
sqlstore.transactionimpl.rollbackconnection=--- TransactionImpl.rollbackConnection(): {0} \u9488\u5BF9 {1}\u3002
sqlstore.transactionimpl.status={0} Tran[ {1} ].setStatus: {2} => {3} for {4}.


###############################################################################
# All the source files under subdir ejb.
# Message ID Range: JDO76600 - JDO76699
###############################################################################
#
#EJBHelper messages
#
# {0} - method name
ejb.ejbhelper.nonmanaged=JDO76600: \u4E0D\u5E94\u5728\u975E\u7BA1\u7406\u7684\u73AF\u5883\u4E2D\u8C03\u7528\u65B9\u6CD5 {0}\u3002

#
# Common messages between SunContainerHelper and DeploymentHelper
# so they have a neutral key, that still starts with "ejb".
#
# {0} - jndi name.
ejb.jndi.lookupfailed=JDO76604: \u5BF9 cmp-resource ''{0}'' \u7684 JNDI \u67E5\u627E\u5931\u8D25\u3002
JDO76604.diag.cause.1=\u5177\u6709\u6B64 JNDI \u540D\u79F0\u7684 CMP \u8D44\u6E90\u6CA1\u6709\u6CE8\u518C\u6B64\u5B9E\u4F8B\u3002
JDO76604.diag.cause.2=CMP \u8D44\u6E90\u7684 JNDI \u540D\u79F0\u62FC\u5199\u9519\u8BEF\u3002
JDO76604.diag.check.1=\u8BF7\u68C0\u67E5\u8981\u4F7F\u7528\u7684\u8D44\u6E90\u7684 JNDI \u540D\u79F0\u3002
JDO76604.diag.check.2=\u8BF7\u68C0\u67E5\u5728\u6A21\u5757\u4E2D\u6307\u5B9A\u7684 CMP \u8D44\u6E90\u7684 JNDI \u540D\u79F0\u3002

# {0} - jndi name.
# {1} - returned class name.
ejb.jndi.unexpectedinstance=JDO76605: \u5BF9 cmp-resource ''{0}'' \u7684 JNDI \u67E5\u627E\u8FD4\u56DE\u610F\u5916\u7C7B\u578B\u7684\u5B9E\u4F8B: {1}\u3002
JDO76605.diag.cause.1=\u5177\u6709\u6B64 JNDI \u540D\u79F0\u7684 CMP \u8D44\u6E90\u6CA1\u6709\u5F15\u7528 jdbc-resource \u6216 persistence-manager-factory-resource\u3002
JDO76605.diag.cause.2=CMP \u8D44\u6E90\u7684 JNDI \u540D\u79F0\u62FC\u5199\u9519\u8BEF\u3002
JDO76605.diag.check.1=\u8BF7\u68C0\u67E5\u8981\u4F7F\u7528\u7684\u8D44\u6E90\u7684 JNDI \u540D\u79F0\u3002
JDO76605.diag.check.2=\u8BF7\u68C0\u67E5\u5728\u6A21\u5757\u4E2D\u6307\u5B9A\u7684 CMP \u8D44\u6E90\u7684 JNDI \u540D\u79F0\u3002

#
# DeploymentHelper messages - ejb
#
#
#<NOI18N: DeploymentHelper>
#
ejb.DeploymentHelper.getconnection=\u83B7\u5F97 JNDI \u540D\u79F0 ''{0}'' \u7684\u8FDE\u63A5\u3002

# The messages JDO76606 through JDO76615 that were originally here 
# have been moved to 
# cmp/support/ejb/src/com/sun/jdo/spi/persistence/support/ejb/ejbc/Bundle.properties
# As part of INF#
# So do not use these messages. 


#
#CMPHelper messages
#
ejb.cmphelper.nonmanaged=JDO76613: CMPHelper \u8BBF\u95EE\u65E0\u6548\u3002\u6B64\u7C7B\u4EC5\u7528\u4E8E CMP \u652F\u6301, \u4E0D\u5E94\u5728\u5E94\u7528\u7A0B\u5E8F\u670D\u52A1\u5668\u5916\u90E8\u8C03\u7528\u5B83\u3002

#
#SunTransactionHelper messages
#

# {0} class name
ejb.SunTransactionHelper.wrongdatasourcetype=JDO76616: DataSource \u4E0D\u662F\u6240\u9700\u7684\u7C7B\u578B\u3002\u9700\u8981: com.sun.appserv.jdbc.DataSource \u83B7\u5F97: {0}\u3002


###############################################################################
# <Generic messages. Add new messages to this section only if none of the above categories can be used.>
###############################################################################
#
# <NOI18N: generic>
#
vendor=Sun Microsystems
# majorVersion (minorVersion) buildDate
fullVersion={0} ({1}) {2}
#
# <NOI18N: This messages are used for JDOFatalInternalException from multiple places. No need to I18N>
#
core.generic.unknownfield=\u5B57\u6BB5 {0} \u4E0D\u662F\u7C7B {1} \u7684\u6210\u5458\u3002
core.generic.unknownexception=\u6536\u5230\u672A\u77E5\u7684\u5F02\u5E38\u9519\u8BEF\u3002
core.generic.nullparam={0} \u53C2\u6570\u4E3A\u7A7A\u503C\u3002
core.generic.notinstanceof=\u7C7B {0} \u7684\u5BF9\u8C61\u4E0D\u662F {1} \u7684\u5B9E\u4F8B\u3002


###############################################################################
# <These messages are used from multiple places in code.It is absolutely necessary to cleanup code
# to use different messages >
###############################################################################
core.configuration.cantloadclass=\u65E0\u6CD5\u52A0\u8F7D\u7C7B {0}\u3002
sqlstore.exception.log=Exception.
jdo.lifecycle.deleted.accessField=\u65E0\u6CD5\u8BBF\u95EE\u5220\u9664\u5B9E\u4F8B\u7684\u5B57\u6BB5\u3002
