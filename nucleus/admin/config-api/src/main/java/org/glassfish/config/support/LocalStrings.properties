#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright (c) 2010-2017 Oracle and/or its affiliates. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common Development
# and Distribution License("CDDL") (collectively, the "License").  You
# may not use this file except in compliance with the License.  You can
# obtain a copy of the License at
# https://oss.oracle.com/licenses/CDDL+GPL-1.1
# or LICENSE.txt.  See the License for the specific
# language governing permissions and limitations under the License.
#
# When distributing the software, include this License Header Notice in each
# file and include the License file at LICENSE.txt.
#
# GPL Classpath Exception:
# Oracle designates this particular file as subject to the "Classpath"
# exception as provided by Oracle in the GPL Version 2 section of the License
# file that accompanied this code.
#
# Modifications:
# If applicable, add the following below the License Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyright [year] [name of copyright owner]"
#
# Contributor(s):
# If you wish your version of this file to be governed by only the CDDL or
# only the GPL Version 2, indicate your decision by adding "[Contributor]
# elects to include this software in this distribution under the [CDDL or GPL
# Version 2] license."  If you don't indicate a single choice of license, a
# recipient has the option to distribute your version of this file under
# either the CDDL, the GPL Version 2 or to extend the choice of license to
# its licensees as provided above.  However, if you add GPL Version 2 code
# and therefore, elected the GPL Version 2 license, then the option applies
# only if the new code is made subject to such option by the copyright
# holder.
#

InstanceReaderFilter.CantFindConfig=Can''t find the config element for the instance {0}
InstanceReaderFilter.UnknownException=Got an unknown error while parsing domain.xml: {0}
InstanceReaderFilter.ReparseNeeded=Doman.xml had to be parsed twice instead of \
once because the order of elements is non-optimal.  \n\
The optimal order is <clusters>...<<servers>...<configs>
time=Total time to parse domain.xml: {0}
dxpp.serverNotFound=Couldn''t find the server element for the instance: {0}
dxpp.configrefnotmatch=The instance, {0}, belongs to the cluster, {1}, but the config-ref''s don''t match.
dxpp.confignotfound=The config element, {1} for the instance, {0} was not found.

ConfigParsingFailed=Failed to parse domain.xml
NoConfigFile={0} does not exist or is empty, will use backup
NoBackupFile={0} does not exist or is empty, cannot use backup
NoUsableConfigFile=No usable configuration file at {0}
SystemPropertyUpgrade.Failure=Failure while upgrading config {0} system-property from v2.1.1 to 3.1"
BadEnv=Instance {0} from environment not found in domain.xml

GenericCrudCommand.invalid_type=Invalid annotated type {0} passed to InjectionResolver:getValue()
GenericCrudCommand.invocation_failure=Failure {0} while getting List<?> values from component;
GenericCrudCommand.nongeneric_type=The List type returned by {0} must be a generic type
GenericCrudCommand.wrong_type=The generic type {0} is not supported, only List<? extends ConfigBeanProxy> is"
GenericCrudCommand.introspection_failure=Failure {0} while instrospecting {1} to find all getters and setters
GenericCrudCommand.too_many_indexes=The metadata for this generic implementation has more than one index {0}
GenericCrudCommand.unamed_service=The service {0} is un-named, for generic command, the service name is the command name and must be provided
GenericCrudCommand.transactionException=Transaction exception {0} while injecting {1}
GenericCrudCommand.method_invocation_exception=Exception while invoking {0} method : {1}
GenericCrudCommand.annotation_not_found=Cannot find annotation {0} with value {1} on method {2}
GenericCreateCommand.configbean_not_found=The Config Bean {0} cannot be loaded by the generic command implementation : {1}
GenericCreateCommand.command_model_exception=Exception while creating the command model for the generic command {0} : {1}
GenericCreateCommand.target_object_not_found=The ConfigResolver {0} could not find the configuration object of type {1} where instances of {2} should be added
GenericCreateCommand.decorator_not_found=The CreationDecorator {0} could not be found in the habitat,is it annotated with @Service ?
GenericCreateCommand.deletion_decorator_not_found=The DeletionDecorator {0} could not be found in the habitat,is it annotated with @Service ?
GenericCreateCommand.transaction_exception=Configuration not added. {0}
GenericCreateCommand.already_existing_instance=A {0} instance with a "{1}" name already exists in the configuration
GenericDeleteCommand.transaction_exception=Configuration {0} not deleted. {1}
GenericDeleteCommand.target_object_not_found=The ConfigResolver {0} could not find the configuration object of type {1} where instances of {2} should be removed
TypeAndNameResolver.target_object_not_found=Cannot find a {0} with a name {1}
TypeResolver.target_object_not_found=Cannot find a single component instance of type {0}
TypeResolver.no_element_of_that_type=The Domain configuration does not have a sub-element of the type {0}
GenericListCommand.element_has_no_key=The element {0} has no key attribute
GenericListCommand.accesschecks=Exception while creating access checks for generic command {0}: {1}
GenericListCommand.invalidOutputOpts=Invalid output option. Choose from the following columns: {0}

DefaultConfigUpgrade.existingDefaultConfig=Existing default-config detected during upgrade. No need to create default-config.
DefaultConfigUpgrade.runningDefaultConfigUpgrade=default-config not detected during upgrade. Running DefaultConfigUpgrade to create default-config.
DefaultConfigUpgrade.cantFindInstallRoot=DefaultConfigUpgrade failed.  Can't find domain.xml template. Install root system property, {0}, is null.
## DefaultConfigUpgrade failed. Missing domain.xml template here {installRoot/lib/templates/domain.xml).
DefaultConfigUpgrade.cannotGetDomainXmlTemplate=DefaultConfigUpgrade failed. Cannot get default domain.xml from {0).
DefaultConfigUpgrade.failure=Failure during upgrade - could not create default-config

# {0}=maximum number of substitutions, {1}=offending property value
TranslatedConfigView.badprop=System property substitution exceeded maximum of {0} in: {1}
# {0}=password being dealiased, {1}=exception error message
TranslatedConfigView.aliaserror=Error in dealiasing the password {0}: {1}
